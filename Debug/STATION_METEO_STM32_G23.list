
STATION_METEO_STM32_G23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009abc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08009c00  08009c00  00019c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a128  0800a128  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a130  0800a130  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001d4  0800a30c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800a30c  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ece  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e3c  00000000  00000000  0003210e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d94  00000000  00000000  000360f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019359  00000000  00000000  00036e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017104  00000000  00000000  000501dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096bbc  00000000  00000000  000672e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d78  00000000  00000000  000fdea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00103c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009be4 	.word	0x08009be4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08009be4 	.word	0x08009be4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9aa 	b.w	8000f04 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83e 	bl	8000c38 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff ff09 	bl	80009ec <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x20>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fc7f 	bl	8000508 <__aeabi_dmul>
 8000c0a:	f7ff ff55 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc00 	bl	8000414 <__aeabi_ui2d>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c18:	f7ff fc76 	bl	8000508 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fab8 	bl	8000198 <__aeabi_dsub>
 8000c28:	f7ff ff46 	bl	8000ab8 <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	468e      	mov	lr, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14c      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d967      	bls.n	8000d1e <__udivmoddi4+0xe6>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b153      	cbz	r3, 8000c6a <__udivmoddi4+0x32>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	ea42 0e0e 	orr.w	lr, r2, lr
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fbbe f1f7 	udiv	r1, lr, r7
 8000c72:	fa1f f58c 	uxth.w	r5, ip
 8000c76:	fb07 ee11 	mls	lr, r7, r1, lr
 8000c7a:	fb01 f005 	mul.w	r0, r1, r5
 8000c7e:	0c22      	lsrs	r2, r4, #16
 8000c80:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x66>
 8000c88:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000c90:	f080 8119 	bcs.w	8000ec6 <__udivmoddi4+0x28e>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f240 8116 	bls.w	8000ec6 <__udivmoddi4+0x28e>
 8000c9a:	3902      	subs	r1, #2
 8000c9c:	4462      	add	r2, ip
 8000c9e:	1a12      	subs	r2, r2, r0
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	fb00 f505 	mul.w	r5, r0, r5
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbe:	f080 8104 	bcs.w	8000eca <__udivmoddi4+0x292>
 8000cc2:	42a5      	cmp	r5, r4
 8000cc4:	f240 8101 	bls.w	8000eca <__udivmoddi4+0x292>
 8000cc8:	4464      	add	r4, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	1b64      	subs	r4, r4, r5
 8000cd4:	b11e      	cbz	r6, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40dc      	lsrs	r4, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e9c6 4300 	strd	r4, r3, [r6]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0xc0>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80ea 	beq.w	8000ec0 <__udivmoddi4+0x288>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	d148      	bne.n	8000d92 <__udivmoddi4+0x15a>
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d302      	bcc.n	8000d0a <__udivmoddi4+0xd2>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	f200 80f8 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d0a:	1a84      	subs	r4, r0, r2
 8000d0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d10:	2001      	movs	r0, #1
 8000d12:	4696      	mov	lr, r2
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d0e2      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d18:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d1c:	e7df      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xea>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f382 	clz	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 808e 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2c:	1a88      	subs	r0, r1, r2
 8000d2e:	2101      	movs	r1, #1
 8000d30:	0c17      	lsrs	r7, r2, #16
 8000d32:	fa1f fe82 	uxth.w	lr, r2
 8000d36:	fbb0 f5f7 	udiv	r5, r0, r7
 8000d3a:	fb07 0015 	mls	r0, r7, r5, r0
 8000d3e:	0c22      	lsrs	r2, r4, #16
 8000d40:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d44:	fb0e f005 	mul.w	r0, lr, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x126>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x124>
 8000d56:	4290      	cmp	r0, r2
 8000d58:	f200 80cc 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5c:	4645      	mov	r5, r8
 8000d5e:	1a12      	subs	r2, r2, r0
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x150>
 8000d76:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x14e>
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	f200 80b4 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d86:	4610      	mov	r0, r2
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d90:	e7a0      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d92:	f1c1 0720 	rsb	r7, r1, #32
 8000d96:	408b      	lsls	r3, r1
 8000d98:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da0:	fa25 fa07 	lsr.w	sl, r5, r7
 8000da4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da8:	fbba f8f9 	udiv	r8, sl, r9
 8000dac:	408d      	lsls	r5, r1
 8000dae:	fa20 f307 	lsr.w	r3, r0, r7
 8000db2:	fb09 aa18 	mls	sl, r9, r8, sl
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	432b      	orrs	r3, r5
 8000dbc:	fa00 f501 	lsl.w	r5, r0, r1
 8000dc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc4:	0c1c      	lsrs	r4, r3, #16
 8000dc6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000dca:	42a0      	cmp	r0, r4
 8000dcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd0:	d90b      	bls.n	8000dea <__udivmoddi4+0x1b2>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dda:	f080 8086 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000dde:	42a0      	cmp	r0, r4
 8000de0:	f240 8083 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de4:	f1a8 0802 	sub.w	r8, r8, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	1a24      	subs	r4, r4, r0
 8000dec:	b298      	uxth	r0, r3
 8000dee:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df2:	fb09 4413 	mls	r4, r9, r3, r4
 8000df6:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfa:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x1dc>
 8000e02:	eb1c 0404 	adds.w	r4, ip, r4
 8000e06:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e0a:	d26a      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d968      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e10:	3b02      	subs	r3, #2
 8000e12:	4464      	add	r4, ip
 8000e14:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e18:	fba0 9302 	umull	r9, r3, r0, r2
 8000e1c:	eba4 040e 	sub.w	r4, r4, lr
 8000e20:	429c      	cmp	r4, r3
 8000e22:	46c8      	mov	r8, r9
 8000e24:	469e      	mov	lr, r3
 8000e26:	d354      	bcc.n	8000ed2 <__udivmoddi4+0x29a>
 8000e28:	d051      	beq.n	8000ece <__udivmoddi4+0x296>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d067      	beq.n	8000efe <__udivmoddi4+0x2c6>
 8000e2e:	ebb5 0308 	subs.w	r3, r5, r8
 8000e32:	eb64 040e 	sbc.w	r4, r4, lr
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	fa04 f707 	lsl.w	r7, r4, r7
 8000e3c:	431f      	orrs	r7, r3
 8000e3e:	40cc      	lsrs	r4, r1
 8000e40:	e9c6 7400 	strd	r7, r4, [r6]
 8000e44:	2100      	movs	r1, #0
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e4c:	f1c3 0020 	rsb	r0, r3, #32
 8000e50:	40c1      	lsrs	r1, r0
 8000e52:	409d      	lsls	r5, r3
 8000e54:	fa24 f000 	lsr.w	r0, r4, r0
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	4328      	orrs	r0, r5
 8000e5e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e62:	fb07 1115 	mls	r1, r7, r5, r1
 8000e66:	fa1f fe8c 	uxth.w	lr, ip
 8000e6a:	0c02      	lsrs	r2, r0, #16
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	fbb2 f1f7 	udiv	r1, r2, r7
 8000e94:	fb07 2211 	mls	r2, r7, r1, r2
 8000e98:	b280      	uxth	r0, r0
 8000e9a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e9e:	fb01 f20e 	mul.w	r2, r1, lr
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x280>
 8000ea6:	eb1c 0000 	adds.w	r0, ip, r0
 8000eaa:	f101 38ff 	add.w	r8, r1, #4294967295
 8000eae:	d216      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eb0:	4282      	cmp	r2, r0
 8000eb2:	d914      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb4:	3902      	subs	r1, #2
 8000eb6:	4460      	add	r0, ip
 8000eb8:	1a80      	subs	r0, r0, r2
 8000eba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ebe:	e73a      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e70b      	b.n	8000cde <__udivmoddi4+0xa6>
 8000ec6:	4671      	mov	r1, lr
 8000ec8:	e6e9      	b.n	8000c9e <__udivmoddi4+0x66>
 8000eca:	4610      	mov	r0, r2
 8000ecc:	e6fe      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ece:	454d      	cmp	r5, r9
 8000ed0:	d2ab      	bcs.n	8000e2a <__udivmoddi4+0x1f2>
 8000ed2:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed6:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a5      	b.n	8000e2a <__udivmoddi4+0x1f2>
 8000ede:	4641      	mov	r1, r8
 8000ee0:	e7ea      	b.n	8000eb8 <__udivmoddi4+0x280>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e796      	b.n	8000e14 <__udivmoddi4+0x1dc>
 8000ee6:	4645      	mov	r5, r8
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	46d0      	mov	r8, sl
 8000eec:	e77d      	b.n	8000dea <__udivmoddi4+0x1b2>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e749      	b.n	8000d88 <__udivmoddi4+0x150>
 8000ef4:	3d02      	subs	r5, #2
 8000ef6:	4462      	add	r2, ip
 8000ef8:	e731      	b.n	8000d5e <__udivmoddi4+0x126>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e70a      	b.n	8000d14 <__udivmoddi4+0xdc>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e6ed      	b.n	8000cde <__udivmoddi4+0xa6>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <DWT_Delay_us>:
// Déclaration de la fonction d'initialisation du compteur de cycles DWT pour le délai
uint32_t DWT_Delay_Init(void);

// Cette fonction fournit un délai en microsecondes en utilisant le compteur de cycles DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t initial_ticks = DWT->CYCCNT; // Définit le nombre de ticks initial du compteur de cycles DWT
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <DWT_Delay_us+0x44>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	60fb      	str	r3, [r7, #12]
  uint32_t ticks = (HAL_RCC_GetHCLKFreq() / 1000000); // Calcule le nombre de ticks par microseconde
 8000f16:	f003 f83b 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <DWT_Delay_us+0x48>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	60bb      	str	r3, [r7, #8]
  microseconds *= ticks; // Convertit la durée du délai en ticks
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - initial_ticks) < microseconds); // Attend que le nombre de ticks requis soit atteint
 8000f30:	bf00      	nop
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <DWT_Delay_us+0x44>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3f8      	bcc.n	8000f32 <DWT_Delay_us+0x2a>
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	431bde83 	.word	0x431bde83

08000f54 <Data_Output>:
#include "delay.h"
#include "stm32l1xx_hal.h"

// Fonction pour configurer une broche GPIO en mode sortie (vers le capteur)
void Data_Output(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0}; // Initialise une structure de configuration GPIO
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN; // Définit la broche GPIO à configurer
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Mode de sortie Push-Pull
 8000f74:	2301      	movs	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT, &GPIO_InitStruct); // Initialise la broche GPIO avec les paramètres spécifiés
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 fb18 	bl	80025b4 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Data_Input>:

// Fonction pour configurer une broche GPIO en mode entrée (vers le microcontrôleur)
void Data_Input(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0}; // Initialise une structure de configuration GPIO
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN; // Définit la broche GPIO à configurer
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Mode d'entrée
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT, &GPIO_InitStruct); // Initialise la broche GPIO avec les paramètres spécifiés
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fafc 	bl	80025b4 <HAL_GPIO_Init>
}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <Read_data>:

// Fonction pour lire les données provenant du capteur
void Read_data(uint8_t *data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    int i, k; // Déclaration des variables de boucle

    for (i = 0; i < 8; i++) // Boucle pour lire chaque bit de données
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e053      	b.n	800107a <Read_data+0xb6>
    {
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) // Vérifie si le bit de données est 0
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <Read_data+0xc8>)
 8000fd6:	f001 fc7d 	bl	80028d4 <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11c      	bne.n	800101a <Read_data+0x56>
        {
            (*data) &= ~(1 << (7 - i)); // Efface le bit correspondant dans la variable de données
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1c3 0307 	rsb	r3, r3, #7
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	701a      	strb	r2, [r3, #0]
            while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // Attend la fin du signal bas
 8001002:	bf00      	nop
 8001004:	2110      	movs	r1, #16
 8001006:	4821      	ldr	r0, [pc, #132]	; (800108c <Read_data+0xc8>)
 8001008:	f001 fc64 	bl	80028d4 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f8      	beq.n	8001004 <Read_data+0x40>
            DWT_Delay_us(40); // Attend pour le prochain bit
 8001012:	2028      	movs	r0, #40	; 0x28
 8001014:	f7ff ff78 	bl	8000f08 <DWT_Delay_us>
 8001018:	e02c      	b.n	8001074 <Read_data+0xb0>
        }
        else // Si le bit de données est 1
        {
            (*data) |= (1 << (7 - i)); // Définit le bit correspondant dans la variable de données
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25a      	sxtb	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	b25b      	sxtb	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 1000; k++) // Boucle pour attendre la fin du signal haut
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	e009      	b.n	8001052 <Read_data+0x8e>
            {
                if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET)
 800103e:	2110      	movs	r1, #16
 8001040:	4812      	ldr	r0, [pc, #72]	; (800108c <Read_data+0xc8>)
 8001042:	f001 fc47 	bl	80028d4 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <Read_data+0x98>
            for (k = 0; k < 1000; k++) // Boucle pour attendre la fin du signal haut
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3301      	adds	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001058:	dbf1      	blt.n	800103e <Read_data+0x7a>
 800105a:	e000      	b.n	800105e <Read_data+0x9a>
                {
                    break; // Sort de la boucle si le signal devient bas
 800105c:	bf00      	nop
                }
            }
            while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // Attend la fin du signal haut
 800105e:	bf00      	nop
 8001060:	2110      	movs	r1, #16
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <Read_data+0xc8>)
 8001064:	f001 fc36 	bl	80028d4 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f8      	beq.n	8001060 <Read_data+0x9c>
            DWT_Delay_us(40); // Attend pour le prochain bit
 800106e:	2028      	movs	r0, #40	; 0x28
 8001070:	f7ff ff4a 	bl	8000f08 <DWT_Delay_us>
    for (i = 0; i < 8; i++) // Boucle pour lire chaque bit de données
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b07      	cmp	r3, #7
 800107e:	dda8      	ble.n	8000fd2 <Read_data+0xe>
        }
    }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020000 	.word	0x40020000

08001090 <DWT_Delay_Init>:
#include "delay.h"
#include "stm32l1xx_hal.h"

// Fonction d'initialisation du compteur de cycles DWT pour le délai
uint32_t DWT_Delay_Init(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // Désactive le compteur de cycles TRC
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <DWT_Delay_Init+0x58>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <DWT_Delay_Init+0x58>)
 800109a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800109e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // Active le compteur de cycles TRC
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <DWT_Delay_Init+0x58>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <DWT_Delay_Init+0x58>)
 80010a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010aa:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; // Désactive le compteur de cycles
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <DWT_Delay_Init+0x5c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <DWT_Delay_Init+0x5c>)
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; // Active le compteur de cycles
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <DWT_Delay_Init+0x5c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <DWT_Delay_Init+0x5c>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0; // Réinitialise la valeur du compteur de cycles à zéro
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <DWT_Delay_Init+0x5c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP"); // 3 instructions "NOP" pour attendre un court laps de temps
 80010ca:	bf00      	nop
    __ASM volatile ("NOP");
 80010cc:	bf00      	nop
    __ASM volatile ("NOP");
 80010ce:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <DWT_Delay_Init+0x5c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <DWT_Delay_Init+0x4c>
    {
       return 0; // Le compteur de cycles a démarré
 80010d8:	2300      	movs	r3, #0
 80010da:	e000      	b.n	80010de <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; // Le compteur de cycles n'a pas démarré
 80010dc:	2301      	movs	r3, #1
    }
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000edf0 	.word	0xe000edf0
 80010ec:	e0001000 	.word	0xe0001000

080010f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <MX_GPIO_Init+0xec>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a34      	ldr	r2, [pc, #208]	; (80011dc <MX_GPIO_Init+0xec>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <MX_GPIO_Init+0xec>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <MX_GPIO_Init+0xec>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <MX_GPIO_Init+0xec>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <MX_GPIO_Init+0xec>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <MX_GPIO_Init+0xec>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <MX_GPIO_Init+0xec>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_GPIO_Init+0xec>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_GPIO_Init+0xec>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a22      	ldr	r2, [pc, #136]	; (80011dc <MX_GPIO_Init+0xec>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_GPIO_Init+0xec>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	21b0      	movs	r1, #176	; 0xb0
 800116a:	481d      	ldr	r0, [pc, #116]	; (80011e0 <MX_GPIO_Init+0xf0>)
 800116c:	f001 fbc9 	bl	8002902 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <MX_GPIO_Init+0xf4>)
 8001178:	f001 fbc3 	bl	8002902 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_GPIO_Init+0xf8>)
 8001194:	f001 fa0e 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA7 */
  GPIO_InitStruct.Pin = DHT22_Pin|LD2_Pin|GPIO_PIN_7;
 8001198:	23b0      	movs	r3, #176	; 0xb0
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_GPIO_Init+0xf0>)
 80011b0:	f001 fa00 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_GPIO_Init+0xf4>)
 80011ce:	f001 f9f1 	bl	80025b4 <HAL_GPIO_Init>

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800

080011ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_I2C1_Init+0x50>)
 800122a:	f001 fb83 	bl	8002934 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 fd2c 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001f0 	.word	0x200001f0
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_I2C_MspInit+0x7c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_I2C_MspInit+0x80>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_I2C_MspInit+0x80>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_I2C_MspInit+0x80>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001282:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001294:	2304      	movs	r3, #4
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480b      	ldr	r0, [pc, #44]	; (80012cc <HAL_I2C_MspInit+0x84>)
 80012a0:	f001 f988 	bl	80025b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_I2C_MspInit+0x80>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_I2C_MspInit+0x80>)
 80012aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ae:	6253      	str	r3, [r2, #36]	; 0x24
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_I2C_MspInit+0x80>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <lcd_init>:
//I2C_HandleTypeDef hi2c3;

//UART_HandleTypeDef huart2;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f043 030c 	orr.w	r3, r3, #12
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80012fc:	f107 0118 	add.w	r1, r7, #24
 8001300:	230a      	movs	r3, #10
 8001302:	2202      	movs	r2, #2
 8001304:	486c      	ldr	r0, [pc, #432]	; (80014b8 <lcd_init+0x1e8>)
 8001306:	f003 fee3 	bl	80050d0 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800130a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800130e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001310:	f107 0114 	add.w	r1, r7, #20
 8001314:	230a      	movs	r3, #10
 8001316:	2202      	movs	r2, #2
 8001318:	4867      	ldr	r0, [pc, #412]	; (80014b8 <lcd_init+0x1e8>)
 800131a:	f003 fed9 	bl	80050d0 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2205      	movs	r2, #5
 8001322:	217c      	movs	r1, #124	; 0x7c
 8001324:	69f8      	ldr	r0, [r7, #28]
 8001326:	f001 fd47 	bl	8002db8 <HAL_I2C_IsDeviceReady>
 800132a:	4603      	mov	r3, r0
 800132c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800132e:	f107 0113 	add.w	r1, r7, #19
 8001332:	230a      	movs	r3, #10
 8001334:	2201      	movs	r2, #1
 8001336:	4860      	ldr	r0, [pc, #384]	; (80014b8 <lcd_init+0x1e8>)
 8001338:	f003 feca 	bl	80050d0 <HAL_UART_Transmit>
	HAL_Delay(50);
 800133c:	2032      	movs	r0, #50	; 0x32
 800133e:	f001 f833 	bl	80023a8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001342:	f107 0218 	add.w	r2, r7, #24
 8001346:	f241 3388 	movw	r3, #5000	; 0x1388
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2302      	movs	r3, #2
 800134e:	217c      	movs	r1, #124	; 0x7c
 8001350:	69f8      	ldr	r0, [r7, #28]
 8001352:	f001 fc33 	bl	8002bbc <HAL_I2C_Master_Transmit>
 8001356:	4603      	mov	r3, r0
 8001358:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800135a:	f107 0112 	add.w	r1, r7, #18
 800135e:	230a      	movs	r3, #10
 8001360:	2201      	movs	r2, #1
 8001362:	4855      	ldr	r0, [pc, #340]	; (80014b8 <lcd_init+0x1e8>)
 8001364:	f003 feb4 	bl	80050d0 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001368:	2032      	movs	r0, #50	; 0x32
 800136a:	f001 f81d 	bl	80023a8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800136e:	f107 0218 	add.w	r2, r7, #24
 8001372:	f241 3388 	movw	r3, #5000	; 0x1388
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2302      	movs	r3, #2
 800137a:	217c      	movs	r1, #124	; 0x7c
 800137c:	69f8      	ldr	r0, [r7, #28]
 800137e:	f001 fc1d 	bl	8002bbc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001382:	2005      	movs	r0, #5
 8001384:	f001 f810 	bl	80023a8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001388:	f107 0218 	add.w	r2, r7, #24
 800138c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2302      	movs	r3, #2
 8001394:	217c      	movs	r1, #124	; 0x7c
 8001396:	69f8      	ldr	r0, [r7, #28]
 8001398:	f001 fc10 	bl	8002bbc <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2204      	movs	r2, #4
 80013a0:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80013ae:	f107 0218 	add.w	r2, r7, #24
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2302      	movs	r3, #2
 80013ba:	217c      	movs	r1, #124	; 0x7c
 80013bc:	69f8      	ldr	r0, [r7, #28]
 80013be:	f001 fbfd 	bl	8002bbc <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80013c2:	2301      	movs	r3, #1
 80013c4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80013c6:	f107 0218 	add.w	r2, r7, #24
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2302      	movs	r3, #2
 80013d2:	217c      	movs	r1, #124	; 0x7c
 80013d4:	69f8      	ldr	r0, [r7, #28]
 80013d6:	f001 fbf1 	bl	8002bbc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80013da:	2002      	movs	r0, #2
 80013dc:	f000 ffe4 	bl	80023a8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80013f2:	f107 0218 	add.w	r2, r7, #24
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2302      	movs	r3, #2
 80013fe:	217c      	movs	r1, #124	; 0x7c
 8001400:	69f8      	ldr	r0, [r7, #28]
 8001402:	f001 fbdb 	bl	8002bbc <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001406:	2300      	movs	r3, #0
 8001408:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800140e:	f107 0210 	add.w	r2, r7, #16
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2302      	movs	r3, #2
 800141a:	21c4      	movs	r1, #196	; 0xc4
 800141c:	69f8      	ldr	r0, [r7, #28]
 800141e:	f001 fbcd 	bl	8002bbc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001422:	2308      	movs	r3, #8
 8001424:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001426:	23ff      	movs	r3, #255	; 0xff
 8001428:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800142a:	f107 0210 	add.w	r2, r7, #16
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2302      	movs	r3, #2
 8001436:	21c4      	movs	r1, #196	; 0xc4
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f001 fbbf 	bl	8002bbc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800143e:	2301      	movs	r3, #1
 8001440:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001442:	2320      	movs	r3, #32
 8001444:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2302      	movs	r3, #2
 8001452:	21c4      	movs	r1, #196	; 0xc4
 8001454:	69f8      	ldr	r0, [r7, #28]
 8001456:	f001 fbb1 	bl	8002bbc <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800145a:	2304      	movs	r3, #4
 800145c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800145e:	23ff      	movs	r3, #255	; 0xff
 8001460:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001462:	f107 020c 	add.w	r2, r7, #12
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2302      	movs	r3, #2
 800146e:	21c4      	movs	r1, #196	; 0xc4
 8001470:	69f8      	ldr	r0, [r7, #28]
 8001472:	f001 fba3 	bl	8002bbc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001476:	2303      	movs	r3, #3
 8001478:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800147a:	23ff      	movs	r3, #255	; 0xff
 800147c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800147e:	f107 020c 	add.w	r2, r7, #12
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	21c4      	movs	r1, #196	; 0xc4
 800148c:	69f8      	ldr	r0, [r7, #28]
 800148e:	f001 fb95 	bl	8002bbc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001492:	2302      	movs	r3, #2
 8001494:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2302      	movs	r3, #2
 80014a6:	21c4      	movs	r1, #196	; 0xc4
 80014a8:	69f8      	ldr	r0, [r7, #28]
 80014aa:	f001 fb87 	bl	8002bbc <HAL_I2C_Master_Transmit>


}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000040c 	.word	0x2000040c

080014bc <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <clearlcd+0x2c>)
 80014c6:	f000 f83c 	bl	8001542 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <clearlcd+0x30>)
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <clearlcd+0x2c>)
 80014ce:	f000 f80f 	bl	80014f0 <lcd_print>
	lcd_position(&hi2c1,0,1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2100      	movs	r1, #0
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <clearlcd+0x2c>)
 80014d8:	f000 f833 	bl	8001542 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80014dc:	4903      	ldr	r1, [pc, #12]	; (80014ec <clearlcd+0x30>)
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <clearlcd+0x2c>)
 80014e0:	f000 f806 	bl	80014f0 <lcd_print>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001f0 	.word	0x200001f0
 80014ec:	08009c00 	.word	0x08009c00

080014f0 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80014fe:	2340      	movs	r3, #64	; 0x40
 8001500:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001506:	e011      	b.n	800152c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001512:	f107 020c 	add.w	r2, r7, #12
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	217c      	movs	r1, #124	; 0x7c
 8001520:	6938      	ldr	r0, [r7, #16]
 8001522:	f001 fb4b 	bl	8002bbc <HAL_I2C_Master_Transmit>
            i++;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e7      	bne.n	8001508 <lcd_print+0x18>
   }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af02      	add	r7, sp, #8
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
 800154e:	4613      	mov	r3, r2
 8001550:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <lcd_position+0x24>
    {
        col = col | 0x80;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001562:	70fb      	strb	r3, [r7, #3]
 8001564:	e003      	b.n	800156e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800156c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2302      	movs	r3, #2
 8001582:	217c      	movs	r1, #124	; 0x7c
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f001 fb19 	bl	8002bbc <HAL_I2C_Master_Transmit>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af02      	add	r7, sp, #8
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	460b      	mov	r3, r1
 80015a0:	71bb      	strb	r3, [r7, #6]
 80015a2:	4613      	mov	r3, r2
 80015a4:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <reglagecouleur+0x74>)
 80015a8:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 80015aa:	2304      	movs	r3, #4
 80015ac:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 80015b2:	f107 0210 	add.w	r2, r7, #16
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2302      	movs	r3, #2
 80015be:	21c4      	movs	r1, #196	; 0xc4
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f001 fafb 	bl	8002bbc <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 80015c6:	2303      	movs	r3, #3
 80015c8:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2302      	movs	r3, #2
 80015da:	21c4      	movs	r1, #196	; 0xc4
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f001 faed 	bl	8002bbc <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 80015e2:	2302      	movs	r3, #2
 80015e4:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80015ea:	f107 0208 	add.w	r2, r7, #8
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2302      	movs	r3, #2
 80015f6:	21c4      	movs	r1, #196	; 0xc4
 80015f8:	6978      	ldr	r0, [r7, #20]
 80015fa:	f001 fadf 	bl	8002bbc <HAL_I2C_Master_Transmit>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200001f0 	.word	0x200001f0

0800160c <DWT_Delay_us>:
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t initial_ticks = DWT->CYCCNT; // Définit le nombre de ticks initial du compteur de cycles DWT
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <DWT_Delay_us+0x44>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	60fb      	str	r3, [r7, #12]
  uint32_t ticks = (HAL_RCC_GetHCLKFreq() / 1000000); // Calcule le nombre de ticks par microseconde
 800161a:	f002 fcb9 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 800161e:	4603      	mov	r3, r0
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <DWT_Delay_us+0x48>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	60bb      	str	r3, [r7, #8]
  microseconds *= ticks; // Convertit la durée du délai en ticks
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - initial_ticks) < microseconds); // Attend que le nombre de ticks requis soit atteint
 8001634:	bf00      	nop
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <DWT_Delay_us+0x44>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad2      	subs	r2, r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3f8      	bcc.n	8001636 <DWT_Delay_us+0x2a>
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e0001000 	.word	0xe0001000
 8001654:	431bde83 	.word	0x431bde83

08001658 <UART_TransmitTemperature>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_TransmitTemperature(float Temperature ) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
        sprintf(bufT, " %.2f C\t", Temperature);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7fe fef9 	bl	8000458 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4909      	ldr	r1, [pc, #36]	; (8001690 <UART_TransmitTemperature+0x38>)
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <UART_TransmitTemperature+0x3c>)
 800166e:	f004 fe33 	bl	80062d8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)bufT, strlen(bufT), HAL_MAX_DELAY);
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <UART_TransmitTemperature+0x3c>)
 8001674:	f7fe fd84 	bl	8000180 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	4904      	ldr	r1, [pc, #16]	; (8001694 <UART_TransmitTemperature+0x3c>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <UART_TransmitTemperature+0x40>)
 8001684:	f003 fd24 	bl	80050d0 <HAL_UART_Transmit>

    }
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	08009c14 	.word	0x08009c14
 8001694:	2000027c 	.word	0x2000027c
 8001698:	2000040c 	.word	0x2000040c

0800169c <UART_TransmitHummidity>:
    void UART_TransmitHummidity(float Humidite ) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
            sprintf(bufRH, " %.2f %%\r\n", Humidite);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7fe fed7 	bl	8000458 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4909      	ldr	r1, [pc, #36]	; (80016d4 <UART_TransmitHummidity+0x38>)
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <UART_TransmitHummidity+0x3c>)
 80016b2:	f004 fe11 	bl	80062d8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)bufRH, strlen(bufRH), HAL_MAX_DELAY);
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <UART_TransmitHummidity+0x3c>)
 80016b8:	f7fe fd62 	bl	8000180 <strlen>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	4904      	ldr	r1, [pc, #16]	; (80016d8 <UART_TransmitHummidity+0x3c>)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <UART_TransmitHummidity+0x40>)
 80016c8:	f003 fd02 	bl	80050d0 <HAL_UART_Transmit>

        }
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08009c20 	.word	0x08009c20
 80016d8:	2000025c 	.word	0x2000025c
 80016dc:	2000040c 	.word	0x2000040c

080016e0 <UART_TransmitTemperature_SD>:
    void UART_TransmitTemperature_SD(float Temperature ) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    	 sprintf(bufT_SD, "Temperature: %.2f C\n", Temperature);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7fe feb5 	bl	8000458 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4909      	ldr	r1, [pc, #36]	; (8001718 <UART_TransmitTemperature_SD+0x38>)
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <UART_TransmitTemperature_SD+0x3c>)
 80016f6:	f004 fdef 	bl	80062d8 <siprintf>
    	 HAL_UART_Transmit(&huart1, (uint8_t*)bufT_SD, strlen(bufT_SD), HAL_MAX_DELAY);
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <UART_TransmitTemperature_SD+0x3c>)
 80016fc:	f7fe fd40 	bl	8000180 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	4904      	ldr	r1, [pc, #16]	; (800171c <UART_TransmitTemperature_SD+0x3c>)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <UART_TransmitTemperature_SD+0x40>)
 800170c:	f003 fce0 	bl	80050d0 <HAL_UART_Transmit>

    	}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	08009c2c 	.word	0x08009c2c
 800171c:	200002d0 	.word	0x200002d0
 8001720:	200003c4 	.word	0x200003c4

08001724 <UART_TransmitHummidity_SD>:


    void UART_TransmitHummidity_SD(float Humidite ) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
               sprintf(bufRH_SD, "Humidity: %.2f %%\r\n", Humidite);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7fe fe93 	bl	8000458 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4909      	ldr	r1, [pc, #36]	; (800175c <UART_TransmitHummidity_SD+0x38>)
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <UART_TransmitHummidity_SD+0x3c>)
 800173a:	f004 fdcd 	bl	80062d8 <siprintf>
               HAL_UART_Transmit(&huart1, (uint8_t*)bufRH_SD, strlen(bufRH_SD), HAL_MAX_DELAY);
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <UART_TransmitHummidity_SD+0x3c>)
 8001740:	f7fe fd1e 	bl	8000180 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	4904      	ldr	r1, [pc, #16]	; (8001760 <UART_TransmitHummidity_SD+0x3c>)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <UART_TransmitHummidity_SD+0x40>)
 8001750:	f003 fcbe 	bl	80050d0 <HAL_UART_Transmit>

           }
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	08009c44 	.word	0x08009c44
 8001760:	2000029c 	.word	0x2000029c
 8001764:	200003c4 	.word	0x200003c4

08001768 <set_Time>:


    /////////////////////////////////////real time ////////////////////////////////

    void set_Time(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
      /** Initialize RTC and set the Time and Date
      */
      sTime.Hours = 0x12;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <set_Time+0x3c>)
 800176e:	2212      	movs	r2, #18
 8001770:	701a      	strb	r2, [r3, #0]
      sTime.Minutes = 0x22;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <set_Time+0x3c>)
 8001774:	2222      	movs	r2, #34	; 0x22
 8001776:	705a      	strb	r2, [r3, #1]
      sTime.Seconds = 0x1;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <set_Time+0x3c>)
 800177a:	2201      	movs	r2, #1
 800177c:	709a      	strb	r2, [r3, #2]
      sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <set_Time+0x3c>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
      sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <set_Time+0x3c>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
      if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800178a:	2201      	movs	r2, #1
 800178c:	4905      	ldr	r1, [pc, #20]	; (80017a4 <set_Time+0x3c>)
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <set_Time+0x40>)
 8001790:	f002 fe1d 	bl	80043ce <HAL_RTC_SetTime>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <set_Time+0x36>
      {
        Error_Handler();
 800179a:	f000 fa79 	bl	8001c90 <Error_Handler>
      }
    }
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000334 	.word	0x20000334
 80017a8:	20000360 	.word	0x20000360

080017ac <get_time>:
    void get_time(void)
    {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af02      	add	r7, sp, #8


      /* Get the RTC current Time */
      HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80017b2:	2200      	movs	r2, #0
 80017b4:	4939      	ldr	r1, [pc, #228]	; (800189c <get_time+0xf0>)
 80017b6:	483a      	ldr	r0, [pc, #232]	; (80018a0 <get_time+0xf4>)
 80017b8:	f002 fea3 	bl	8004502 <HAL_RTC_GetTime>
      /* Get the RTC current Date */
      HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80017bc:	2200      	movs	r2, #0
 80017be:	4939      	ldr	r1, [pc, #228]	; (80018a4 <get_time+0xf8>)
 80017c0:	4837      	ldr	r0, [pc, #220]	; (80018a0 <get_time+0xf4>)
 80017c2:	f002 ff80 	bl	80046c6 <HAL_RTC_GetDate>

      /* Display time Format: hh:mm:ss */
      sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <get_time+0xf0>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <get_time+0xf0>)
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <get_time+0xf0>)
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	460b      	mov	r3, r1
 80017da:	4933      	ldr	r1, [pc, #204]	; (80018a8 <get_time+0xfc>)
 80017dc:	4833      	ldr	r0, [pc, #204]	; (80018ac <get_time+0x100>)
 80017de:	f004 fd7b 	bl	80062d8 <siprintf>

      /* Display date Format: mm-dd-yy */
      sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2024 + gDate.Year);  // I like the date first
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <get_time+0xf8>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <get_time+0xf8>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	4619      	mov	r1, r3
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <get_time+0xf8>)
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	460b      	mov	r3, r1
 80017fa:	492d      	ldr	r1, [pc, #180]	; (80018b0 <get_time+0x104>)
 80017fc:	482d      	ldr	r0, [pc, #180]	; (80018b4 <get_time+0x108>)
 80017fe:	f004 fd6b 	bl	80062d8 <siprintf>

      /* UART date Format: mm-dd-yy */
                  sprintf((char*)date_U,"%02d-%02d-%2d\t",gDate.Date, gDate.Month, 2024 + gDate.Year);
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <get_time+0xf8>)
 8001804:	789b      	ldrb	r3, [r3, #2]
 8001806:	461a      	mov	r2, r3
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <get_time+0xf8>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	4619      	mov	r1, r3
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <get_time+0xf8>)
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	4927      	ldr	r1, [pc, #156]	; (80018b8 <get_time+0x10c>)
 800181c:	4827      	ldr	r0, [pc, #156]	; (80018bc <get_time+0x110>)
 800181e:	f004 fd5b 	bl	80062d8 <siprintf>
      /* UART time Format: hh:mm:ss */
            sprintf((char*)time_U,"%02d:%02d:%02d\t",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <get_time+0xf0>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <get_time+0xf0>)
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	4619      	mov	r1, r3
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <get_time+0xf0>)
 8001830:	789b      	ldrb	r3, [r3, #2]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	460b      	mov	r3, r1
 8001836:	4922      	ldr	r1, [pc, #136]	; (80018c0 <get_time+0x114>)
 8001838:	4822      	ldr	r0, [pc, #136]	; (80018c4 <get_time+0x118>)
 800183a:	f004 fd4d 	bl	80062d8 <siprintf>

            	HAL_UART_Transmit(&huart2, (uint8_t*)date_U, strlen(date_U), HAL_MAX_DELAY);
 800183e:	481f      	ldr	r0, [pc, #124]	; (80018bc <get_time+0x110>)
 8001840:	f7fe fc9e 	bl	8000180 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	491b      	ldr	r1, [pc, #108]	; (80018bc <get_time+0x110>)
 800184e:	481e      	ldr	r0, [pc, #120]	; (80018c8 <get_time+0x11c>)
 8001850:	f003 fc3e 	bl	80050d0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2, (uint8_t*)time_U, strlen(time_U), HAL_MAX_DELAY);
 8001854:	481b      	ldr	r0, [pc, #108]	; (80018c4 <get_time+0x118>)
 8001856:	f7fe fc93 	bl	8000180 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	4918      	ldr	r1, [pc, #96]	; (80018c4 <get_time+0x118>)
 8001864:	4818      	ldr	r0, [pc, #96]	; (80018c8 <get_time+0x11c>)
 8001866:	f003 fc33 	bl	80050d0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t*)date_U, strlen(date_U), HAL_MAX_DELAY);
 800186a:	4814      	ldr	r0, [pc, #80]	; (80018bc <get_time+0x110>)
 800186c:	f7fe fc88 	bl	8000180 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	4910      	ldr	r1, [pc, #64]	; (80018bc <get_time+0x110>)
 800187a:	4814      	ldr	r0, [pc, #80]	; (80018cc <get_time+0x120>)
 800187c:	f003 fc28 	bl	80050d0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t*)time_U, strlen(time_U), HAL_MAX_DELAY);
 8001880:	4810      	ldr	r0, [pc, #64]	; (80018c4 <get_time+0x118>)
 8001882:	f7fe fc7d 	bl	8000180 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	b29a      	uxth	r2, r3
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	490d      	ldr	r1, [pc, #52]	; (80018c4 <get_time+0x118>)
 8001890:	480e      	ldr	r0, [pc, #56]	; (80018cc <get_time+0x120>)
 8001892:	f003 fc1d 	bl	80050d0 <HAL_UART_Transmit>

    }
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000034c 	.word	0x2000034c
 80018a0:	20000360 	.word	0x20000360
 80018a4:	20000348 	.word	0x20000348
 80018a8:	08009c58 	.word	0x08009c58
 80018ac:	20000304 	.word	0x20000304
 80018b0:	08009c68 	.word	0x08009c68
 80018b4:	20000310 	.word	0x20000310
 80018b8:	08009c78 	.word	0x08009c78
 80018bc:	20000328 	.word	0x20000328
 80018c0:	08009c88 	.word	0x08009c88
 80018c4:	2000031c 	.word	0x2000031c
 80018c8:	2000040c 	.word	0x2000040c
 80018cc:	200003c4 	.word	0x200003c4

080018d0 <display_time>:


    //Let's display the time and date on lcd

   void display_time (void)
    {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    	 	 	 lcd_position(&hi2c1,0,0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	4808      	ldr	r0, [pc, #32]	; (80018fc <display_time+0x2c>)
 80018da:	f7ff fe32 	bl	8001542 <lcd_position>
    		  	  lcd_print(&hi2c1,date);
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <display_time+0x30>)
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <display_time+0x2c>)
 80018e2:	f7ff fe05 	bl	80014f0 <lcd_print>
    		  	  lcd_position(&hi2c1,1,1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2101      	movs	r1, #1
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <display_time+0x2c>)
 80018ec:	f7ff fe29 	bl	8001542 <lcd_position>
    		  	  lcd_print(&hi2c1,time);
 80018f0:	4904      	ldr	r1, [pc, #16]	; (8001904 <display_time+0x34>)
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <display_time+0x2c>)
 80018f4:	f7ff fdfc 	bl	80014f0 <lcd_print>
    }
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200001f0 	.word	0x200001f0
 8001900:	20000310 	.word	0x20000310
 8001904:	20000304 	.word	0x20000304

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 int k = 0; //variable pour les bloucles while
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f000 fcda 	bl	80022ca <HAL_Init>
  /* USER CODE BEGIN Init */
//   UART_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f957 	bl	8001bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f7ff fbe9 	bl	80010f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800191e:	f000 fc0f 	bl	8002140 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001922:	f7ff fc63 	bl	80011ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8001926:	f000 fb79 	bl	800201c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800192a:	f000 fbdf 	bl	80020ec <MX_USART1_UART_Init>
  MX_RTC_Init();
 800192e:	f000 f9b5 	bl	8001c9c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8001932:	498f      	ldr	r1, [pc, #572]	; (8001b70 <main+0x268>)
 8001934:	488f      	ldr	r0, [pc, #572]	; (8001b74 <main+0x26c>)
 8001936:	f7ff fccb 	bl	80012d0 <lcd_init>
  ////////////////////Real time////////////////
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 800193a:	2101      	movs	r1, #1
 800193c:	488e      	ldr	r0, [pc, #568]	; (8001b78 <main+0x270>)
 800193e:	f003 f8f6 	bl	8004b2e <HAL_RTCEx_BKUPRead>
 8001942:	4603      	mov	r3, r0
 8001944:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001948:	4293      	cmp	r3, r2
 800194a:	d001      	beq.n	8001950 <main+0x48>
         {
         //   Set the time
	  set_Time();
 800194c:	f7ff ff0c 	bl	8001768 <set_Time>
         }
  //////////////
  DWT_Delay_Init();
 8001950:	f7ff fb9e 	bl	8001090 <DWT_Delay_Init>

    lcd_position(&hi2c1,0,0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	4886      	ldr	r0, [pc, #536]	; (8001b74 <main+0x26c>)
 800195a:	f7ff fdf2 	bl	8001542 <lcd_position>
    lcd_print(&hi2c1,"STATION METEO");
 800195e:	4987      	ldr	r1, [pc, #540]	; (8001b7c <main+0x274>)
 8001960:	4884      	ldr	r0, [pc, #528]	; (8001b74 <main+0x26c>)
 8001962:	f7ff fdc5 	bl	80014f0 <lcd_print>
    reglagecouleur(0,0,255);
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	2100      	movs	r1, #0
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fe12 	bl	8001594 <reglagecouleur>
    lcd_position(&hi2c1,0,1);
 8001970:	2201      	movs	r2, #1
 8001972:	2100      	movs	r1, #0
 8001974:	487f      	ldr	r0, [pc, #508]	; (8001b74 <main+0x26c>)
 8001976:	f7ff fde4 	bl	8001542 <lcd_position>
    lcd_print(&hi2c1,"ALLICHE & MAHAR");
 800197a:	4981      	ldr	r1, [pc, #516]	; (8001b80 <main+0x278>)
 800197c:	487d      	ldr	r0, [pc, #500]	; (8001b74 <main+0x26c>)
 800197e:	f7ff fdb7 	bl	80014f0 <lcd_print>
    HAL_Delay(3000);
 8001982:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001986:	f000 fd0f 	bl	80023a8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*commence la communication avec le capteur*/
	  	  	  	  	  	  HAL_Delay(6000); // Attend 10 minute (afin d'avoir la mesure de la T° et RH% chaque 10min )
 800198a:	f241 7070 	movw	r0, #6000	; 0x1770
 800198e:	f000 fd0b 	bl	80023a8 <HAL_Delay>
		        	  	  Data_Output(GPIOA, GPIO_PIN_4); // Configure la broche GPIOA_Pin_4 en mode sortie (info vers le capteur)
 8001992:	2110      	movs	r1, #16
 8001994:	487b      	ldr	r0, [pc, #492]	; (8001b84 <main+0x27c>)
 8001996:	f7ff fadd 	bl	8000f54 <Data_Output>
		        	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Met la broche GPIOA_Pin_4 à l'état bas (remet à l'état bas)
 800199a:	2200      	movs	r2, #0
 800199c:	2110      	movs	r1, #16
 800199e:	4879      	ldr	r0, [pc, #484]	; (8001b84 <main+0x27c>)
 80019a0:	f000 ffaf 	bl	8002902 <HAL_GPIO_WritePin>
		        	  	  DWT_Delay_us(1200); // Attend un délai de 1200 µs (signal de commande > 1ms)
 80019a4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80019a8:	f7ff fe30 	bl	800160c <DWT_Delay_us>
		        	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Met la broche GPIOA_Pin_4 à l'état haut (état haut)
 80019ac:	2201      	movs	r2, #1
 80019ae:	2110      	movs	r1, #16
 80019b0:	4874      	ldr	r0, [pc, #464]	; (8001b84 <main+0x27c>)
 80019b2:	f000 ffa6 	bl	8002902 <HAL_GPIO_WritePin>
		        	  	  DWT_Delay_us(30); // Attend un délai de 30 µs (signal de commande)
 80019b6:	201e      	movs	r0, #30
 80019b8:	f7ff fe28 	bl	800160c <DWT_Delay_us>
		        	  	  Data_Input(GPIOA, GPIO_PIN_4); // Configure la broche GPIOA_Pin_4 en mode entrée (info vers le microcontrôleur)
 80019bc:	2110      	movs	r1, #16
 80019be:	4871      	ldr	r0, [pc, #452]	; (8001b84 <main+0x27c>)
 80019c0:	f7ff fae4 	bl	8000f8c <Data_Input>

		        	  	  /*commence la réception de données*/

		        	  	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // Attend que la broche GPIOA_Pin_4 soit à l'état haut
 80019c4:	bf00      	nop
 80019c6:	2110      	movs	r1, #16
 80019c8:	486e      	ldr	r0, [pc, #440]	; (8001b84 <main+0x27c>)
 80019ca:	f000 ff83 	bl	80028d4 <HAL_GPIO_ReadPin>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f8      	beq.n	80019c6 <main+0xbe>

		        	  	  for ( k=0;k<1000;k++) // Boucle pour attendre jusqu'à 1000 fois
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	e009      	b.n	80019ee <main+0xe6>
		        	  	  {
		        	  		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) // Vérifie si la broche GPIOA_Pin_4 est à l'état bas
 80019da:	2110      	movs	r1, #16
 80019dc:	4869      	ldr	r0, [pc, #420]	; (8001b84 <main+0x27c>)
 80019de:	f000 ff79 	bl	80028d4 <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <main+0xf0>
		        	  	  for ( k=0;k<1000;k++) // Boucle pour attendre jusqu'à 1000 fois
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f4:	dbf1      	blt.n	80019da <main+0xd2>
 80019f6:	e000      	b.n	80019fa <main+0xf2>
		        	  		  {
		        	  	  	  	break; // Sort de la boucle si la condition est vraie
 80019f8:	bf00      	nop
		        	  	  	  }
		        	  	  }

		        	  	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // Attend que la broche GPIOA_Pin_4 soit à l'état haut
 80019fa:	bf00      	nop
 80019fc:	2110      	movs	r1, #16
 80019fe:	4861      	ldr	r0, [pc, #388]	; (8001b84 <main+0x27c>)
 8001a00:	f000 ff68 	bl	80028d4 <HAL_GPIO_ReadPin>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f8      	beq.n	80019fc <main+0xf4>
		        	  	  DWT_Delay_us(40); // Attend un délai de 40 µs
 8001a0a:	2028      	movs	r0, #40	; 0x28
 8001a0c:	f7ff fdfe 	bl	800160c <DWT_Delay_us>

		        	  	  Read_data(&dataH1); // Lit les données du capteur (dans la bibliothèque HT.c)
 8001a10:	485d      	ldr	r0, [pc, #372]	; (8001b88 <main+0x280>)
 8001a12:	f7ff fad7 	bl	8000fc4 <Read_data>
		        	  	  Read_data(&dataH2);
 8001a16:	485d      	ldr	r0, [pc, #372]	; (8001b8c <main+0x284>)
 8001a18:	f7ff fad4 	bl	8000fc4 <Read_data>
		        	  	  Read_data(&dataT1);
 8001a1c:	485c      	ldr	r0, [pc, #368]	; (8001b90 <main+0x288>)
 8001a1e:	f7ff fad1 	bl	8000fc4 <Read_data>
		        	  	  Read_data(&dataT2);
 8001a22:	485c      	ldr	r0, [pc, #368]	; (8001b94 <main+0x28c>)
 8001a24:	f7ff face 	bl	8000fc4 <Read_data>
		        	  	  Read_data(&SUM);
 8001a28:	485b      	ldr	r0, [pc, #364]	; (8001b98 <main+0x290>)
 8001a2a:	f7ff facb 	bl	8000fc4 <Read_data>

		        	  	  check = dataH1 + dataH2 + dataT1 + dataT2; // Calcule la somme des données pour vérification
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <main+0x280>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <main+0x284>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <main+0x288>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <main+0x28c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <main+0x294>)
 8001a4c:	701a      	strb	r2, [r3, #0]

		        	  	 if(check == (SUM)) // Vérifie si la somme est égale au checksum
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <main+0x294>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <main+0x290>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d117      	bne.n	8001a8a <main+0x182>
		        	  	  {

		        	  	  RH = (dataH1<<8) | dataH2; // Calcule l'humidité
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <main+0x280>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <main+0x284>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <main+0x298>)
 8001a70:	801a      	strh	r2, [r3, #0]
		        	  	  TEMP = (dataT1<<8) | dataT2; // Calcule la température
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <main+0x288>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <main+0x28c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <main+0x29c>)
 8001a88:	801a      	strh	r2, [r3, #0]

		        	  	  }


		        	  	  Humidite = RH / 10.0; // Calcule l'humidité finale
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <main+0x298>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcd0 	bl	8000434 <__aeabi_i2d>
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <main+0x2a0>)
 8001a9a:	f7fe fe5f 	bl	800075c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f827 	bl	8000af8 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a3f      	ldr	r2, [pc, #252]	; (8001bac <main+0x2a4>)
 8001aae:	6013      	str	r3, [r2, #0]
		        	  	  Temperature = TEMP / 10.0; // Calcule la température finale
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <main+0x29c>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fcbd 	bl	8000434 <__aeabi_i2d>
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <main+0x2a0>)
 8001ac0:	f7fe fe4c 	bl	800075c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f814 	bl	8000af8 <__aeabi_d2f>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <main+0x2a8>)
 8001ad4:	6013      	str	r3, [r2, #0]


	  	 /////////Real time////////////
	  	  	  get_time();//  fonction pour récupérer l'heure actuelle via le RTC
 8001ad6:	f7ff fe69 	bl	80017ac <get_time>
	  	  	 clearlcd();
 8001ada:	f7ff fcef 	bl	80014bc <clearlcd>
	  		  display_time();// Affichage de l'heure actuelle sur l'écran LCD
 8001ade:	f7ff fef7 	bl	80018d0 <display_time>
	  		  HAL_Delay(5000);
 8001ae2:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ae6:	f000 fc5f 	bl	80023a8 <HAL_Delay>
	  		  /////////////////////////
	  		  /*commence transmission vers LCD*/
	  		 clearlcd(); // Efface l'affichage LCD
 8001aea:	f7ff fce7 	bl	80014bc <clearlcd>
	  		  sprintf(bufRH,"Humidite: %.1f", Humidite); // Formatage de l'humidité pour l'affichage
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <main+0x2a4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fcb0 	bl	8000458 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	492d      	ldr	r1, [pc, #180]	; (8001bb4 <main+0x2ac>)
 8001afe:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <main+0x2b0>)
 8001b00:	f004 fbea 	bl	80062d8 <siprintf>
	  		  sprintf(bufT, "Temp.: %.1f C", Temperature); // Formatage de la température pour l'affichage
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <main+0x2a8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fca5 	bl	8000458 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	492a      	ldr	r1, [pc, #168]	; (8001bbc <main+0x2b4>)
 8001b14:	482a      	ldr	r0, [pc, #168]	; (8001bc0 <main+0x2b8>)
 8001b16:	f004 fbdf 	bl	80062d8 <siprintf>
	  		 lcd_position(&hi2c1,1,0); // Positionne le curseur LCD
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4815      	ldr	r0, [pc, #84]	; (8001b74 <main+0x26c>)
 8001b20:	f7ff fd0f 	bl	8001542 <lcd_position>
	  		  lcd_print(&hi2c1,bufRH); // Affiche l'humidité sur le LCD
 8001b24:	4924      	ldr	r1, [pc, #144]	; (8001bb8 <main+0x2b0>)
 8001b26:	4813      	ldr	r0, [pc, #76]	; (8001b74 <main+0x26c>)
 8001b28:	f7ff fce2 	bl	80014f0 <lcd_print>
	  		 lcd_print(&hi2c1,"%"); // Affiche le symbole "%" sur le LCD
 8001b2c:	4925      	ldr	r1, [pc, #148]	; (8001bc4 <main+0x2bc>)
 8001b2e:	4811      	ldr	r0, [pc, #68]	; (8001b74 <main+0x26c>)
 8001b30:	f7ff fcde 	bl	80014f0 <lcd_print>
	  		 lcd_position(&hi2c1,1,1); // Positionne le curseur LCD
 8001b34:	2201      	movs	r2, #1
 8001b36:	2101      	movs	r1, #1
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <main+0x26c>)
 8001b3a:	f7ff fd02 	bl	8001542 <lcd_position>
	  		lcd_print(&hi2c1,bufT); // Affiche la température sur le LCD
 8001b3e:	4920      	ldr	r1, [pc, #128]	; (8001bc0 <main+0x2b8>)
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <main+0x26c>)
 8001b42:	f7ff fcd5 	bl	80014f0 <lcd_print>
	  			///////////////////////

	  	 UART_TransmitTemperature( Temperature); // Transmet la température via UART 2
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <main+0x2a8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fd84 	bl	8001658 <UART_TransmitTemperature>
	  	  UART_TransmitHummidity( Humidite ); // Transmet l'humidité via UART 2
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <main+0x2a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fda1 	bl	800169c <UART_TransmitHummidity>
		  ///////////OPENLOG////////////
	  UART_TransmitTemperature_SD(Temperature);//Transmet la température a la carte SD via UART 1
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <main+0x2a8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fdbe 	bl	80016e0 <UART_TransmitTemperature_SD>
	  UART_TransmitHummidity_SD(Humidite);//Transmet l'humidité a la carte SD via UART 1
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <main+0x2a4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fddb 	bl	8001724 <UART_TransmitHummidity_SD>
	  	  	  	  	  	  HAL_Delay(6000); // Attend 10 minute (afin d'avoir la mesure de la T° et RH% chaque 10min )
 8001b6e:	e70c      	b.n	800198a <main+0x82>
 8001b70:	20000244 	.word	0x20000244
 8001b74:	200001f0 	.word	0x200001f0
 8001b78:	20000360 	.word	0x20000360
 8001b7c:	08009c98 	.word	0x08009c98
 8001b80:	08009ca8 	.word	0x08009ca8
 8001b84:	40020000 	.word	0x40020000
 8001b88:	20000254 	.word	0x20000254
 8001b8c:	20000255 	.word	0x20000255
 8001b90:	20000256 	.word	0x20000256
 8001b94:	20000257 	.word	0x20000257
 8001b98:	20000258 	.word	0x20000258
 8001b9c:	20000259 	.word	0x20000259
 8001ba0:	20000250 	.word	0x20000250
 8001ba4:	20000252 	.word	0x20000252
 8001ba8:	40240000 	.word	0x40240000
 8001bac:	2000024c 	.word	0x2000024c
 8001bb0:	20000248 	.word	0x20000248
 8001bb4:	08009cb8 	.word	0x08009cb8
 8001bb8:	2000025c 	.word	0x2000025c
 8001bbc:	08009cc8 	.word	0x08009cc8
 8001bc0:	2000027c 	.word	0x2000027c
 8001bc4:	08009cd8 	.word	0x08009cd8

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b096      	sub	sp, #88	; 0x58
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	2234      	movs	r2, #52	; 0x34
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 fbe1 	bl	800639e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <SystemClock_Config+0xc4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <SystemClock_Config+0xc4>)
 8001c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c04:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001c06:	2306      	movs	r3, #6
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c12:	2310      	movs	r3, #16
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	2302      	movs	r3, #2
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001c22:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fc4b 	bl	80034c8 <HAL_RCC_OscConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c38:	f000 f82a 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c40:	2303      	movs	r3, #3
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 ff66 	bl	8003b28 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c62:	f000 f815 	bl	8001c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c66:	2301      	movs	r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 fa1e 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001c7e:	f000 f807 	bl	8001c90 <Error_Handler>
  }
}
 8001c82:	bf00      	nop
 8001c84:	3758      	adds	r7, #88	; 0x58
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40007000 	.word	0x40007000

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>
	...

08001c9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b090      	sub	sp, #64	; 0x40
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2228      	movs	r2, #40	; 0x28
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 fb6e 	bl	800639e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <MX_RTC_Init+0x110>)
 8001cc4:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <MX_RTC_Init+0x114>)
 8001cc6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <MX_RTC_Init+0x110>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <MX_RTC_Init+0x110>)
 8001cd0:	227f      	movs	r2, #127	; 0x7f
 8001cd2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <MX_RTC_Init+0x110>)
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <MX_RTC_Init+0x110>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <MX_RTC_Init+0x110>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <MX_RTC_Init+0x110>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cec:	482f      	ldr	r0, [pc, #188]	; (8001dac <MX_RTC_Init+0x110>)
 8001cee:	f002 faeb 	bl	80042c8 <HAL_RTC_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cf8:	f7ff ffca 	bl	8001c90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x22;
 8001d02:	2322      	movs	r3, #34	; 0x22
 8001d04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4823      	ldr	r0, [pc, #140]	; (8001dac <MX_RTC_Init+0x110>)
 8001d20:	f002 fb55 	bl	80043ce <HAL_RTC_SetTime>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d2a:	f7ff ffb1 	bl	8001c90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_APRIL;
 8001d34:	2304      	movs	r3, #4
 8001d36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x18;
 8001d3a:	2318      	movs	r3, #24
 8001d3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4817      	ldr	r0, [pc, #92]	; (8001dac <MX_RTC_Init+0x110>)
 8001d50:	f002 fc35 	bl	80045be <HAL_RTC_SetDate>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d5a:	f7ff ff99 	bl	8001c90 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x12;
 8001d5e:	2312      	movs	r3, #18
 8001d60:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x22;
 8001d62:	2322      	movs	r3, #34	; 0x22
 8001d64:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2201      	movs	r2, #1
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_RTC_Init+0x110>)
 8001d96:	f002 fce5 	bl	8004764 <HAL_RTC_SetAlarm>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001da0:	f7ff ff76 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	3740      	adds	r7, #64	; 0x40
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000360 	.word	0x20000360
 8001db0:	40002800 	.word	0x40002800

08001db4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_RTC_MspInit+0x24>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d102      	bne.n	8001dcc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RTC_MspInit+0x28>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40002800 	.word	0x40002800
 8001ddc:	424706d8 	.word	0x424706d8

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_MspInit+0x5c>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_MspInit+0x5c>)
 8001dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	6253      	str	r3, [r2, #36]	; 0x24
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_MspInit+0x5c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_MspInit+0x5c>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_MspInit+0x5c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_MspInit+0x5c>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_MspInit+0x5c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_MspInit+0x5c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6253      	str	r3, [r2, #36]	; 0x24
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_MspInit+0x5c>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f000 fb8c 	bl	800254c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e86:	f000 fa73 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  return 1;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_kill>:

int _kill(int pid, int sig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea6:	f004 facd 	bl	8006444 <__errno>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2216      	movs	r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffe7 	bl	8001e9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ece:	e7fe      	b.n	8001ece <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
  }

  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
  }
  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f68:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f004 fa36 	bl	8006444 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20014000 	.word	0x20014000
 8002004:	00000400 	.word	0x00000400
 8002008:	20000380 	.word	0x20000380
 800200c:	200005a8 	.word	0x200005a8

08002010 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <MX_TIM2_Init+0x94>)
 800203a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002042:	221f      	movs	r2, #31
 8002044:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <MX_TIM2_Init+0x94>)
 800204e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002052:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_TIM2_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002062:	f002 fd7b 	bl	8004b5c <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800206c:	f7ff fe10 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4619      	mov	r1, r3
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_TIM2_Init+0x94>)
 800207e:	f002 fdac 	bl	8004bda <HAL_TIM_ConfigClockSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002088:	f7ff fe02 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_TIM2_Init+0x94>)
 800209a:	f002 ff6b 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020a4:	f7ff fdf4 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000384 	.word	0x20000384

080020b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d10b      	bne.n	80020de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_TIM_Base_MspInit+0x34>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_TIM_Base_MspInit+0x34>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6253      	str	r3, [r2, #36]	; 0x24
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_TIM_Base_MspInit+0x34>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40023800 	.word	0x40023800

080020ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <MX_USART1_UART_Init+0x50>)
 80020f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002124:	f002 ff84 	bl	8005030 <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800212e:	f7ff fdaf 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200003c4 	.word	0x200003c4
 800213c:	40013800 	.word	0x40013800

08002140 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_USART2_UART_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800214c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002178:	f002 ff5a 	bl	8005030 <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002182:	f7ff fd85 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000040c 	.word	0x2000040c
 8002190:	40004400 	.word	0x40004400

08002194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_UART_MspInit+0xd8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d128      	bne.n	8002208 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_UART_MspInit+0xdc>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_UART_MspInit+0xdc>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_UART_MspInit+0xdc>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_UART_MspInit+0xdc>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_UART_MspInit+0xdc>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_UART_MspInit+0xdc>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f6:	2307      	movs	r3, #7
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	481c      	ldr	r0, [pc, #112]	; (8002274 <HAL_UART_MspInit+0xe0>)
 8002202:	f000 f9d7 	bl	80025b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002206:	e02c      	b.n	8002262 <HAL_UART_MspInit+0xce>
  else if(uartHandle->Instance==USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_UART_MspInit+0xe4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d127      	bne.n	8002262 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_UART_MspInit+0xdc>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_UART_MspInit+0xdc>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	6253      	str	r3, [r2, #36]	; 0x24
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_UART_MspInit+0xdc>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_UART_MspInit+0xdc>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_UART_MspInit+0xdc>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_UART_MspInit+0xdc>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002242:	230c      	movs	r3, #12
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002252:	2307      	movs	r3, #7
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	4807      	ldr	r0, [pc, #28]	; (800227c <HAL_UART_MspInit+0xe8>)
 800225e:	f000 f9a9 	bl	80025b4 <HAL_GPIO_Init>
}
 8002262:	bf00      	nop
 8002264:	3730      	adds	r7, #48	; 0x30
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40013800 	.word	0x40013800
 8002270:	40023800 	.word	0x40023800
 8002274:	40020400 	.word	0x40020400
 8002278:	40004400 	.word	0x40004400
 800227c:	40020000 	.word	0x40020000

08002280 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002280:	f7ff fec6 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002286:	490c      	ldr	r1, [pc, #48]	; (80022b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800229c:	4c09      	ldr	r4, [pc, #36]	; (80022c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f004 f8d1 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ae:	f7ff fb2b 	bl	8001908 <main>
  bx lr
 80022b2:	4770      	bx	lr
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022bc:	0800a138 	.word	0x0800a138
  ldr r2, =_sbss
 80022c0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80022c4:	200005a4 	.word	0x200005a4

080022c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC1_IRQHandler>

080022ca <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 f939 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 f80e 	bl	80022fc <HAL_InitTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e001      	b.n	80022f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ec:	f7ff fd78 	bl	8001de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f0:	79fb      	ldrb	r3, [r7, #7]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_InitTick+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d022      	beq.n	8002356 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_InitTick+0x6c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_InitTick+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800231c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f938 	bl	800259a <HAL_SYSTICK_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d809      	bhi.n	800234a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002336:	2200      	movs	r2, #0
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	f000 f910 	bl	8002562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_InitTick+0x70>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e007      	b.n	800235a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e004      	b.n	800235a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e001      	b.n	800235a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000008 	.word	0x20000008
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_IncTick+0x1c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_IncTick+0x20>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4413      	add	r3, r2
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_IncTick+0x1c>)
 8002380:	6013      	str	r3, [r2, #0]
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000454 	.word	0x20000454
 8002390:	20000008 	.word	0x20000008

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_GetTick+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000454 	.word	0x20000454

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fff0 	bl	8002394 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d004      	beq.n	80023cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_Delay+0x40>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023cc:	bf00      	nop
 80023ce:	f7ff ffe1 	bl	8002394 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d8f7      	bhi.n	80023ce <HAL_Delay+0x26>
  {
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000008 	.word	0x20000008

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff90 	bl	8002450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff49 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff5e 	bl	8002434 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff90 	bl	80024a4 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5f 	bl	8002450 <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffb0 	bl	8002508 <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80025ca:	e160      	b.n	800288e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8152 	beq.w	8002888 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d005      	beq.n	80025fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d130      	bne.n	800265e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002632:	2201      	movs	r2, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 0201 	and.w	r2, r3, #1
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b03      	cmp	r3, #3
 8002668:	d017      	beq.n	800269a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d123      	bne.n	80026ee <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	6939      	ldr	r1, [r7, #16]
 80026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80ac 	beq.w	8002888 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002730:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_GPIO_Init+0x2f8>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a5d      	ldr	r2, [pc, #372]	; (80028ac <HAL_GPIO_Init+0x2f8>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b5b      	ldr	r3, [pc, #364]	; (80028ac <HAL_GPIO_Init+0x2f8>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002748:	4a59      	ldr	r2, [pc, #356]	; (80028b0 <HAL_GPIO_Init+0x2fc>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a51      	ldr	r2, [pc, #324]	; (80028b4 <HAL_GPIO_Init+0x300>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d025      	beq.n	80027c0 <HAL_GPIO_Init+0x20c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d01f      	beq.n	80027bc <HAL_GPIO_Init+0x208>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a4f      	ldr	r2, [pc, #316]	; (80028bc <HAL_GPIO_Init+0x308>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d019      	beq.n	80027b8 <HAL_GPIO_Init+0x204>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4e      	ldr	r2, [pc, #312]	; (80028c0 <HAL_GPIO_Init+0x30c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <HAL_GPIO_Init+0x200>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_GPIO_Init+0x310>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00d      	beq.n	80027b0 <HAL_GPIO_Init+0x1fc>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_GPIO_Init+0x314>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <HAL_GPIO_Init+0x1f8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4b      	ldr	r2, [pc, #300]	; (80028cc <HAL_GPIO_Init+0x318>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_GPIO_Init+0x1f4>
 80027a4:	2306      	movs	r3, #6
 80027a6:	e00c      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027a8:	2307      	movs	r3, #7
 80027aa:	e00a      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027ac:	2305      	movs	r3, #5
 80027ae:	e008      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e006      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027b4:	2303      	movs	r3, #3
 80027b6:	e004      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027c0:	2300      	movs	r3, #0
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027d2:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_GPIO_Init+0x2fc>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002804:	4a32      	ldr	r2, [pc, #200]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800282e:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	f47f ae97 	bne.w	80025cc <HAL_GPIO_Init+0x18>
  }
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40021400 	.word	0x40021400
 80028cc:	40021800 	.word	0x40021800
 80028d0:	40010400 	.word	0x40010400

080028d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e001      	b.n	80028f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]
 800290e:	4613      	mov	r3, r2
 8002910:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002912:	787b      	ldrb	r3, [r7, #1]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002918:	887a      	ldrh	r2, [r7, #2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800291e:	e003      	b.n	8002928 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	041a      	lsls	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
	...

08002934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e12b      	b.n	8002b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fc74 	bl	8001248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	; 0x24
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002998:	f001 fb04 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 800299c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a81      	ldr	r2, [pc, #516]	; (8002ba8 <HAL_I2C_Init+0x274>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d807      	bhi.n	80029b8 <HAL_I2C_Init+0x84>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a80      	ldr	r2, [pc, #512]	; (8002bac <HAL_I2C_Init+0x278>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e006      	b.n	80029c6 <HAL_I2C_Init+0x92>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a7d      	ldr	r2, [pc, #500]	; (8002bb0 <HAL_I2C_Init+0x27c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	bf94      	ite	ls
 80029c0:	2301      	movls	r3, #1
 80029c2:	2300      	movhi	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0e7      	b.n	8002b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a78      	ldr	r2, [pc, #480]	; (8002bb4 <HAL_I2C_Init+0x280>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0c9b      	lsrs	r3, r3, #18
 80029d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a6a      	ldr	r2, [pc, #424]	; (8002ba8 <HAL_I2C_Init+0x274>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d802      	bhi.n	8002a08 <HAL_I2C_Init+0xd4>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3301      	adds	r3, #1
 8002a06:	e009      	b.n	8002a1c <HAL_I2C_Init+0xe8>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	4a69      	ldr	r2, [pc, #420]	; (8002bb8 <HAL_I2C_Init+0x284>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	495c      	ldr	r1, [pc, #368]	; (8002ba8 <HAL_I2C_Init+0x274>)
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	d819      	bhi.n	8002a70 <HAL_I2C_Init+0x13c>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e59      	subs	r1, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a50:	400b      	ands	r3, r1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_I2C_Init+0x138>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1e59      	subs	r1, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6a:	e051      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e04f      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d111      	bne.n	8002a9c <HAL_I2C_Init+0x168>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e012      	b.n	8002ac2 <HAL_I2C_Init+0x18e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	0099      	lsls	r1, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Init+0x196>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e022      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10e      	bne.n	8002af0 <HAL_I2C_Init+0x1bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e58      	subs	r0, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	440b      	add	r3, r1
 8002ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aee:	e00f      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6809      	ldr	r1, [r1, #0]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6911      	ldr	r1, [r2, #16]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68d2      	ldr	r2, [r2, #12]
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	000186a0 	.word	0x000186a0
 8002bac:	001e847f 	.word	0x001e847f
 8002bb0:	003d08ff 	.word	0x003d08ff
 8002bb4:	431bde83 	.word	0x431bde83
 8002bb8:	10624dd3 	.word	0x10624dd3

08002bbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	460b      	mov	r3, r1
 8002bca:	817b      	strh	r3, [r7, #10]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff fbe0 	bl	8002394 <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	f040 80e0 	bne.w	8002da4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2319      	movs	r3, #25
 8002bea:	2201      	movs	r2, #1
 8002bec:	4970      	ldr	r1, [pc, #448]	; (8002db0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa92 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0d3      	b.n	8002da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2C_Master_Transmit+0x50>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0cc      	b.n	8002da6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d007      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2221      	movs	r2, #33	; 0x21
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	893a      	ldrh	r2, [r7, #8]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f9ca 	bl	8003014 <I2C_MasterRequestWrite>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e08d      	b.n	8002da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ca0:	e066      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fb50 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d107      	bne.n	8002cca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06b      	b.n	8002da6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11b      	bne.n	8002d44 <HAL_I2C_Master_Transmit+0x188>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	6a39      	ldr	r1, [r7, #32]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fb47 	bl	80033dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d107      	bne.n	8002d6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e01a      	b.n	8002da6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d194      	bne.n	8002ca2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	00100002 	.word	0x00100002
 8002db4:	ffff0000 	.word	0xffff0000

08002db8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff fae4 	bl	8002394 <HAL_GetTick>
 8002dcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	f040 8111 	bne.w	8003002 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2319      	movs	r3, #25
 8002de6:	2201      	movs	r2, #1
 8002de8:	4988      	ldr	r1, [pc, #544]	; (800300c <HAL_I2C_IsDeviceReady+0x254>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f994 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	e104      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_I2C_IsDeviceReady+0x50>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0fd      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d007      	beq.n	8002e2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2224      	movs	r2, #36	; 0x24
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a70      	ldr	r2, [pc, #448]	; (8003010 <HAL_I2C_IsDeviceReady+0x258>)
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f952 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0b6      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ea4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff fa75 	bl	8002394 <HAL_GetTick>
 8002eaa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	bf0c      	ite	eq
 8002eba:	2301      	moveq	r3, #1
 8002ebc:	2300      	movne	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002eda:	e025      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002edc:	f7ff fa5a 	bl	8002394 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d302      	bcc.n	8002ef2 <HAL_I2C_IsDeviceReady+0x13a>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	22a0      	movs	r2, #160	; 0xa0
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2ba0      	cmp	r3, #160	; 0xa0
 8002f32:	d005      	beq.n	8002f40 <HAL_I2C_IsDeviceReady+0x188>
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_I2C_IsDeviceReady+0x188>
 8002f3a:	7dbb      	ldrb	r3, [r7, #22]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0cd      	beq.n	8002edc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d129      	bne.n	8002faa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2319      	movs	r3, #25
 8002f82:	2201      	movs	r2, #1
 8002f84:	4921      	ldr	r1, [pc, #132]	; (800300c <HAL_I2C_IsDeviceReady+0x254>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8c6 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e036      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e02c      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2319      	movs	r3, #25
 8002fca:	2201      	movs	r2, #1
 8002fcc:	490f      	ldr	r1, [pc, #60]	; (800300c <HAL_I2C_IsDeviceReady+0x254>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f8a2 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e012      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	f4ff af32 	bcc.w	8002e52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	00100002 	.word	0x00100002
 8003010:	ffff0000 	.word	0xffff0000

08003014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d006      	beq.n	800303e <I2C_MasterRequestWrite+0x2a>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d003      	beq.n	800303e <I2C_MasterRequestWrite+0x2a>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800303c:	d108      	bne.n	8003050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e00b      	b.n	8003068 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2b12      	cmp	r3, #18
 8003056:	d107      	bne.n	8003068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f84f 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308e:	d103      	bne.n	8003098 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e035      	b.n	8003108 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a4:	d108      	bne.n	80030b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e01b      	b.n	80030f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	11db      	asrs	r3, r3, #7
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0306 	and.w	r3, r3, #6
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f063 030f 	orn	r3, r3, #15
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	490e      	ldr	r1, [pc, #56]	; (8003110 <I2C_MasterRequestWrite+0xfc>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f898 	bl	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e010      	b.n	8003108 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4907      	ldr	r1, [pc, #28]	; (8003114 <I2C_MasterRequestWrite+0x100>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f888 	bl	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	00010008 	.word	0x00010008
 8003114:	00010002 	.word	0x00010002

08003118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003128:	e048      	b.n	80031bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d044      	beq.n	80031bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7ff f92f 	bl	8002394 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d139      	bne.n	80031bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10d      	bne.n	800316e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	e00c      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0x70>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	43da      	mvns	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	429a      	cmp	r2, r3
 800318c:	d116      	bne.n	80031bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e023      	b.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10d      	bne.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	43da      	mvns	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	e00c      	b.n	80031fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d093      	beq.n	800312a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800321a:	e071      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d123      	bne.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e067      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d041      	beq.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7ff f88a 	bl	8002394 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d136      	bne.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10c      	bne.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e00b      	b.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	43da      	mvns	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e021      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10c      	bne.n	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	43da      	mvns	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4013      	ands	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e00b      	b.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	f47f af6d 	bne.w	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003358:	e034      	b.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f886 	bl	800346c <I2C_IsAcknowledgeFailed>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e034      	b.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d028      	beq.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7ff f80f 	bl	8002394 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d11d      	bne.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d016      	beq.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e007      	b.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d1c3      	bne.n	800335a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e8:	e034      	b.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f83e 	bl	800346c <I2C_IsAcknowledgeFailed>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e034      	b.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d028      	beq.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7fe ffc7 	bl	8002394 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11d      	bne.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d016      	beq.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e007      	b.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d1c3      	bne.n	80033ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d11b      	bne.n	80034bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800348c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e31d      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034da:	4b94      	ldr	r3, [pc, #592]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e4:	4b91      	ldr	r3, [pc, #580]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07b      	beq.n	80035f2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d006      	beq.n	800350e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d10f      	bne.n	8003526 <HAL_RCC_OscConfig+0x5e>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d10b      	bne.n	8003526 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350e:	4b87      	ldr	r3, [pc, #540]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d06a      	beq.n	80035f0 <HAL_RCC_OscConfig+0x128>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d166      	bne.n	80035f0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e2f7      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x74>
 800352e:	4b7f      	ldr	r3, [pc, #508]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7e      	ldr	r2, [pc, #504]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e02d      	b.n	8003598 <HAL_RCC_OscConfig+0xd0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10c      	bne.n	800355e <HAL_RCC_OscConfig+0x96>
 8003544:	4b79      	ldr	r3, [pc, #484]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a78      	ldr	r2, [pc, #480]	; (800372c <HAL_RCC_OscConfig+0x264>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a75      	ldr	r2, [pc, #468]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e01c      	b.n	8003598 <HAL_RCC_OscConfig+0xd0>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0xb8>
 8003566:	4b71      	ldr	r3, [pc, #452]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a70      	ldr	r2, [pc, #448]	; (800372c <HAL_RCC_OscConfig+0x264>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b6e      	ldr	r3, [pc, #440]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6d      	ldr	r2, [pc, #436]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xd0>
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a69      	ldr	r2, [pc, #420]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b67      	ldr	r3, [pc, #412]	; (800372c <HAL_RCC_OscConfig+0x264>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a66      	ldr	r2, [pc, #408]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fef8 	bl	8002394 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fef4 	bl	8002394 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e2ad      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fee4 	bl	8002394 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fee0 	bl	8002394 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e299      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035e2:	4b52      	ldr	r3, [pc, #328]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x108>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d05a      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d005      	beq.n	8003610 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d119      	bne.n	800363e <HAL_RCC_OscConfig+0x176>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d116      	bne.n	800363e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x160>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e276      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_RCC_OscConfig+0x264>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	493d      	ldr	r1, [pc, #244]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363c:	e03a      	b.n	80036b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCC_OscConfig+0x268>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fea2 	bl	8002394 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003654:	f7fe fe9e 	bl	8002394 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e257      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003666:	4b31      	ldr	r3, [pc, #196]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	492a      	ldr	r1, [pc, #168]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
 8003686:	e015      	b.n	80036b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x268>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fe81 	bl	8002394 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7fe fe7d 	bl	8002394 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e236      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80b8 	beq.w	8003832 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d170      	bne.n	80037aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x218>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e21a      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d921      	bls.n	8003734 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fc7d 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e208      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4906      	ldr	r1, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	4901      	ldr	r1, [pc, #4]	; (800372c <HAL_RCC_OscConfig+0x264>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
 800372a:	e020      	b.n	800376e <HAL_RCC_OscConfig+0x2a6>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003734:	4b99      	ldr	r3, [pc, #612]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4996      	ldr	r1, [pc, #600]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003746:	4b95      	ldr	r3, [pc, #596]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	4991      	ldr	r1, [pc, #580]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fc48 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1d3      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	3301      	adds	r3, #1
 8003776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800377e:	4a87      	ldr	r2, [pc, #540]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003780:	6892      	ldr	r2, [r2, #8]
 8003782:	0912      	lsrs	r2, r2, #4
 8003784:	f002 020f 	and.w	r2, r2, #15
 8003788:	4985      	ldr	r1, [pc, #532]	; (80039a0 <HAL_RCC_OscConfig+0x4d8>)
 800378a:	5c8a      	ldrb	r2, [r1, r2]
 800378c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800378e:	4a85      	ldr	r2, [pc, #532]	; (80039a4 <HAL_RCC_OscConfig+0x4dc>)
 8003790:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x4e0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fdb0 	bl	80022fc <HAL_InitTick>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d045      	beq.n	8003832 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	e1b5      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d029      	beq.n	8003806 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037b2:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x4e4>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fdec 	bl	8002394 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c0:	f7fe fde8 	bl	8002394 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1a1      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037d2:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	496c      	ldr	r1, [pc, #432]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f0:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	4967      	ldr	r1, [pc, #412]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003806:	4b69      	ldr	r3, [pc, #420]	; (80039ac <HAL_RCC_OscConfig+0x4e4>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fdc2 	bl	8002394 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003814:	f7fe fdbe 	bl	8002394 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e177      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d030      	beq.n	80038a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b5a      	ldr	r3, [pc, #360]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7fe fda2 	bl	8002394 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fe fd9e 	bl	8002394 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e157      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003866:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x38c>
 8003872:	e015      	b.n	80038a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	4b4e      	ldr	r3, [pc, #312]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fe fd8b 	bl	8002394 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003882:	f7fe fd87 	bl	8002394 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e140      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80b5 	beq.w	8003a18 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	4a36      	ldr	r2, [pc, #216]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6253      	str	r3, [r2, #36]	; 0x24
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a32      	ldr	r2, [pc, #200]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fd4f 	bl	8002394 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fe fd4b 	bl	8002394 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e104      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x466>
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6353      	str	r3, [r2, #52]	; 0x34
 800392c:	e02d      	b.n	800398a <HAL_RCC_OscConfig+0x4c2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x488>
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 800393c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003940:	6353      	str	r3, [r2, #52]	; 0x34
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4a15      	ldr	r2, [pc, #84]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003948:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800394c:	6353      	str	r3, [r2, #52]	; 0x34
 800394e:	e01c      	b.n	800398a <HAL_RCC_OscConfig+0x4c2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d10c      	bne.n	8003972 <HAL_RCC_OscConfig+0x4aa>
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	4a0f      	ldr	r2, [pc, #60]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 800395e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003962:	6353      	str	r3, [r2, #52]	; 0x34
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6353      	str	r3, [r2, #52]	; 0x34
 8003970:	e00b      	b.n	800398a <HAL_RCC_OscConfig+0x4c2>
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397c:	6353      	str	r3, [r2, #52]	; 0x34
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	4a06      	ldr	r2, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x4d4>)
 8003984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003988:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fcff 	bl	8002394 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003998:	e019      	b.n	80039ce <HAL_RCC_OscConfig+0x506>
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	08009ce8 	.word	0x08009ce8
 80039a4:	20000000 	.word	0x20000000
 80039a8:	20000004 	.word	0x20000004
 80039ac:	42470020 	.word	0x42470020
 80039b0:	42470680 	.word	0x42470680
 80039b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fcec 	bl	8002394 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0a3      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ce:	4b54      	ldr	r3, [pc, #336]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0ee      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4f0>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039dc:	f7fe fcda 	bl	8002394 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe fcd6 	bl	8002394 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e08d      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039fa:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ee      	bne.n	80039e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d079      	beq.n	8003b14 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d056      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d13b      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCC_OscConfig+0x65c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fcae 	bl	8002394 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fcaa 	bl	8002394 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e063      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a4e:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5a:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	4319      	orrs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	430b      	orrs	r3, r1
 8003a72:	492b      	ldr	r1, [pc, #172]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x65c>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fc89 	bl	8002394 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe fc85 	bl	8002394 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e03e      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x5be>
 8003aa4:	e036      	b.n	8003b14 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_RCC_OscConfig+0x65c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fc72 	bl	8002394 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe fc6e 	bl	8002394 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e027      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x5ec>
 8003ad2:	e01f      	b.n	8003b14 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e01a      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_OscConfig+0x658>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470060 	.word	0x42470060

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e11a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b8f      	ldr	r3, [pc, #572]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d919      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x34>
 8003b50:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a89      	ldr	r2, [pc, #548]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b87      	ldr	r3, [pc, #540]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 0201 	bic.w	r2, r3, #1
 8003b64:	4985      	ldr	r1, [pc, #532]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6c:	4b83      	ldr	r3, [pc, #524]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0f9      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	497a      	ldr	r1, [pc, #488]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 808e 	beq.w	8003cc6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bb2:	4b73      	ldr	r3, [pc, #460]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0d7      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d115      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0cb      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0bf      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0b7      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	495c      	ldr	r1, [pc, #368]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c14:	f7fe fbbe 	bl	8002394 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d112      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fe fbb6 	bl	8002394 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e09b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d1ee      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xfc>
 8003c46:	e03e      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d112      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c52:	f7fe fb9f 	bl	8002394 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e084      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c68:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b0c      	cmp	r3, #12
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x12a>
 8003c74:	e027      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d11d      	bne.n	8003cba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fb88 	bl	8002394 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e06d      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c96:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d1ee      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x158>
 8003ca2:	e010      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fe fb76 	bl	8002394 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e05b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ee      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d219      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x1be>
 8003cda:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	4923      	ldr	r1, [pc, #140]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <HAL_RCC_ClockConfig+0x254>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e034      	b.n	8003d72 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4917      	ldr	r1, [pc, #92]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	490f      	ldr	r1, [pc, #60]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d46:	f000 f823 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCC_ClockConfig+0x258>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	490b      	ldr	r1, [pc, #44]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x264>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fac8 	bl	80022fc <HAL_InitTick>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d70:	7afb      	ldrb	r3, [r7, #11]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08009ce8 	.word	0x08009ce8
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b092      	sub	sp, #72	; 0x48
 8003d96:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d98:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d00d      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	f200 80d5 	bhi.w	8003f58 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x28>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x2e>
 8003db6:	e0cf      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b72      	ldr	r3, [pc, #456]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003dbc:	e0da      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dbe:	4b72      	ldr	r3, [pc, #456]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003dc0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003dc2:	e0d7      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003dce:	5c9b      	ldrb	r3, [r3, r2]
 8003dd0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	0d9b      	lsrs	r3, r3, #22
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dde:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d05d      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2200      	movs	r2, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	4611      	mov	r1, r2
 8003df2:	4604      	mov	r4, r0
 8003df4:	460d      	mov	r5, r1
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e08:	0150      	lsls	r0, r2, #5
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4621      	mov	r1, r4
 8003e10:	1a51      	subs	r1, r2, r1
 8003e12:	6139      	str	r1, [r7, #16]
 8003e14:	4629      	mov	r1, r5
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e28:	4659      	mov	r1, fp
 8003e2a:	018b      	lsls	r3, r1, #6
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e32:	4651      	mov	r1, sl
 8003e34:	018a      	lsls	r2, r1, #6
 8003e36:	46d4      	mov	ip, sl
 8003e38:	ebb2 080c 	subs.w	r8, r2, ip
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e56:	4690      	mov	r8, r2
 8003e58:	4699      	mov	r9, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	eb18 0303 	adds.w	r3, r8, r3
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	462b      	mov	r3, r5
 8003e64:	eb49 0303 	adc.w	r3, r9, r3
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e76:	4629      	mov	r1, r5
 8003e78:	024b      	lsls	r3, r1, #9
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	4604      	mov	r4, r0
 8003e80:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003e84:	4601      	mov	r1, r0
 8003e86:	024a      	lsls	r2, r1, #9
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	2200      	movs	r2, #0
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e98:	f7fc fe7e 	bl	8000b98 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea4:	e055      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	627a      	str	r2, [r7, #36]	; 0x24
 8003eae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	0159      	lsls	r1, r3, #5
 8003ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec4:	0150      	lsls	r0, r2, #5
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	46c4      	mov	ip, r8
 8003ecc:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	468c      	mov	ip, r1
 8003ed6:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ee6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eee:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef2:	eb63 050b 	sbc.w	r5, r3, fp
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	00eb      	lsls	r3, r5, #3
 8003f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f04:	00e2      	lsls	r2, r4, #3
 8003f06:	4614      	mov	r4, r2
 8003f08:	461d      	mov	r5, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	18e3      	adds	r3, r4, r3
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	460b      	mov	r3, r1
 8003f12:	eb45 0303 	adc.w	r3, r5, r3
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f24:	4629      	mov	r1, r5
 8003f26:	028b      	lsls	r3, r1, #10
 8003f28:	4620      	mov	r0, r4
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003f32:	4601      	mov	r1, r0
 8003f34:	028a      	lsls	r2, r1, #10
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	61fa      	str	r2, [r7, #28]
 8003f42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f46:	f7fc fe27 	bl	8000b98 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003f56:	e00d      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0b5b      	lsrs	r3, r3, #13
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	3301      	adds	r3, #1
 8003f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3748      	adds	r7, #72	; 0x48
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200
 8003f8c:	08009cdc 	.word	0x08009cdc

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff2 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	08009cf8 	.word	0x08009cf8

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd0:	f7ff ffde 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0adb      	lsrs	r3, r3, #11
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	08009cf8 	.word	0x08009cf8

08003ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d12c      	bne.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800400c:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e016      	b.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402e:	6253      	str	r3, [r2, #36]	; 0x24
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004044:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800404c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004050:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004058:	d105      	bne.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004060:	d101      	bne.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004062:	2301      	movs	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 0201 	bic.w	r2, r3, #1
 8004080:	490b      	ldr	r1, [pc, #44]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40007000 	.word	0x40007000
 80040b0:	40023c00 	.word	0x40023c00

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80ed 	beq.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b78      	ldr	r3, [pc, #480]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	4b75      	ldr	r3, [pc, #468]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	4a74      	ldr	r2, [pc, #464]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6253      	str	r3, [r2, #36]	; 0x24
 80040f2:	4b72      	ldr	r3, [pc, #456]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004102:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d118      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800410e:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6b      	ldr	r2, [pc, #428]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411a:	f7fe f93b 	bl	8002394 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004122:	f7fe f937 	bl	8002394 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b64      	cmp	r3, #100	; 0x64
 800412e:	d901      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0be      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	4b62      	ldr	r3, [pc, #392]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004140:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004148:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d106      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	429a      	cmp	r2, r3
 8004164:	d00f      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800416e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004172:	d108      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004174:	4b51      	ldr	r3, [pc, #324]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004180:	d101      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e095      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800418e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d041      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d005      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10c      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d02d      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d027      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80041ca:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d4:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041da:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80041e0:	4a36      	ldr	r2, [pc, #216]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fe f8d0 	bl	8002394 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041f6:	e00a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe f8cc 	bl	8002394 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e051      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800420e:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ee      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800422e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004232:	d10a      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004244:	491d      	ldr	r1, [pc, #116]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800424c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004256:	4919      	ldr	r1, [pc, #100]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004258:	4313      	orrs	r3, r2
 800425a:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004270:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004274:	d10a      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004286:	490d      	ldr	r1, [pc, #52]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800428e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004298:	4908      	ldr	r1, [pc, #32]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800429a:	4313      	orrs	r3, r2
 800429c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	424706dc 	.word	0x424706dc

080042c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e073      	b.n	80043c6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7f5b      	ldrb	r3, [r3, #29]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fd60 	bl	8001db4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b10      	cmp	r3, #16
 8004306:	d055      	beq.n	80043b4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22ca      	movs	r2, #202	; 0xca
 800430e:	625a      	str	r2, [r3, #36]	; 0x24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2253      	movs	r2, #83	; 0x53
 8004316:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fb72 	bl	8004a02 <RTC_EnterInitMode>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d12c      	bne.n	8004382 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6919      	ldr	r1, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	041a      	lsls	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fb79 	bl	8004a70 <RTC_ExitInitMode>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d110      	bne.n	80043aa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
 80043b2:	e001      	b.n	80043b8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043ce:	b590      	push	{r4, r7, lr}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	7f1b      	ldrb	r3, [r3, #28]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_RTC_SetTime+0x1c>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e087      	b.n	80044fa <HAL_RTC_SetTime+0x12c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2202      	movs	r2, #2
 80043f4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d126      	bne.n	800444a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2200      	movs	r2, #0
 800440e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fb50 	bl	8004aba <RTC_ByteToBcd2>
 800441a:	4603      	mov	r3, r0
 800441c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fb49 	bl	8004aba <RTC_ByteToBcd2>
 8004428:	4603      	mov	r3, r0
 800442a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800442c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	789b      	ldrb	r3, [r3, #2]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb41 	bl	8004aba <RTC_ByteToBcd2>
 8004438:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800443a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e018      	b.n	800447c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800446a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004470:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	78db      	ldrb	r3, [r3, #3]
 8004476:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	22ca      	movs	r2, #202	; 0xca
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2253      	movs	r2, #83	; 0x53
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fab8 	bl	8004a02 <RTC_EnterInitMode>
 8004492:	4603      	mov	r3, r0
 8004494:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d120      	bne.n	80044de <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 facb 	bl	8004a70 <RTC_ExitInitMode>
 80044da:	4603      	mov	r3, r0
 80044dc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]

  return status;
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}

08004502 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004534:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004538:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	0d9b      	lsrs	r3, r3, #22
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11a      	bne.n	80045b4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fab6 	bl	8004af4 <RTC_Bcd2ToByte>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 faad 	bl	8004af4 <RTC_Bcd2ToByte>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	789b      	ldrb	r3, [r3, #2]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 faa4 	bl	8004af4 <RTC_Bcd2ToByte>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045be:	b590      	push	{r4, r7, lr}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	7f1b      	ldrb	r3, [r3, #28]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_RTC_SetDate+0x1c>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e071      	b.n	80046be <HAL_RTC_SetDate+0x100>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2202      	movs	r2, #2
 80045e4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10e      	bne.n	800460a <HAL_RTC_SetDate+0x4c>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	f023 0310 	bic.w	r3, r3, #16
 8004600:	b2db      	uxtb	r3, r3
 8004602:	330a      	adds	r3, #10
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d11c      	bne.n	800464a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	78db      	ldrb	r3, [r3, #3]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fa50 	bl	8004aba <RTC_ByteToBcd2>
 800461a:	4603      	mov	r3, r0
 800461c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fa49 	bl	8004aba <RTC_ByteToBcd2>
 8004628:	4603      	mov	r3, r0
 800462a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800462c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	789b      	ldrb	r3, [r3, #2]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa41 	bl	8004aba <RTC_ByteToBcd2>
 8004638:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800463a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e00e      	b.n	8004668 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	78db      	ldrb	r3, [r3, #3]
 800464e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004656:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800465c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	22ca      	movs	r2, #202	; 0xca
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2253      	movs	r2, #83	; 0x53
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f9c2 	bl	8004a02 <RTC_EnterInitMode>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10c      	bne.n	80046a2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004696:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f9e9 	bl	8004a70 <RTC_ExitInitMode>
 800469e:	4603      	mov	r3, r0
 80046a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]

  return status;
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd90      	pop	{r4, r7, pc}

080046c6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	0b5b      	lsrs	r3, r3, #13
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11a      	bne.n	800475a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	78db      	ldrb	r3, [r3, #3]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f9e3 	bl	8004af4 <RTC_Bcd2ToByte>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f9da 	bl	8004af4 <RTC_Bcd2ToByte>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	789b      	ldrb	r3, [r3, #2]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f9d1 	bl	8004af4 <RTC_Bcd2ToByte>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
  uint32_t subsecondtmpreg = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	7f1b      	ldrb	r3, [r3, #28]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_RTC_SetAlarm+0x24>
 8004784:	2302      	movs	r3, #2
 8004786:	e113      	b.n	80049b0 <HAL_RTC_SetAlarm+0x24c>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2202      	movs	r2, #2
 8004792:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d137      	bne.n	800480a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f981 	bl	8004aba <RTC_ByteToBcd2>
 80047b8:	4603      	mov	r3, r0
 80047ba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f97a 	bl	8004aba <RTC_ByteToBcd2>
 80047c6:	4603      	mov	r3, r0
 80047c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80047ca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	789b      	ldrb	r3, [r3, #2]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f972 	bl	8004aba <RTC_ByteToBcd2>
 80047d6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047d8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	78db      	ldrb	r3, [r3, #3]
 80047e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80047e2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f964 	bl	8004aba <RTC_ByteToBcd2>
 80047f2:	4603      	mov	r3, r0
 80047f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80047f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80047fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004804:	4313      	orrs	r3, r2
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e023      	b.n	8004852 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800482a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004830:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	78db      	ldrb	r3, [r3, #3]
 8004836:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004838:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004840:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004842:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004848:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800484e:	4313      	orrs	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
  }

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	22ca      	movs	r2, #202	; 0xca
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2253      	movs	r2, #83	; 0x53
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d148      	bne.n	800490a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004886:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004896:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80048a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048aa:	f7fd fd73 	bl	8002394 <HAL_GetTick>
 80048ae:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048b0:	e013      	b.n	80048da <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048b2:	f7fd fd6f 	bl	8002394 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c0:	d90b      	bls.n	80048da <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2203      	movs	r2, #3
 80048ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e06a      	b.n	80049b0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0e4      	beq.n	80048b2 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	61da      	str	r2, [r3, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	e047      	b.n	800499a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004918:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004928:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f462 7220 	orn	r2, r2, #640	; 0x280
 800493a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800493c:	f7fd fd2a 	bl	8002394 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004942:	e013      	b.n	800496c <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004944:	f7fd fd26 	bl	8002394 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004952:	d90b      	bls.n	800496c <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2203      	movs	r2, #3
 8004960:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e021      	b.n	80049b0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0e4      	beq.n	8004944 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	621a      	str	r2, [r3, #32]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	22ff      	movs	r2, #255	; 0xff
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd90      	pop	{r4, r7, pc}

080049b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f64f 7257 	movw	r2, #65367	; 0xff57
 80049cc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ce:	f7fd fce1 	bl	8002394 <HAL_GetTick>
 80049d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049d4:	e009      	b.n	80049ea <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049d6:	f7fd fcdd 	bl	8002394 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e4:	d901      	bls.n	80049ea <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e007      	b.n	80049fa <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ee      	beq.n	80049d6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d122      	bne.n	8004a66 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a30:	f7fd fcb0 	bl	8002394 <HAL_GetTick>
 8004a34:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a36:	e00c      	b.n	8004a52 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a38:	f7fd fcac 	bl	8002394 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a46:	d904      	bls.n	8004a52 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <RTC_EnterInitMode+0x64>
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d1e8      	bne.n	8004a38 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a8a:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ff8c 	bl	80049b8 <HAL_RTC_WaitForSynchro>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004ac8:	e005      	b.n	8004ad6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	3b0a      	subs	r3, #10
 8004ad4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d8f6      	bhi.n	8004aca <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	b2db      	uxtb	r3, r3
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	b2db      	uxtb	r3, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <HAL_RTCEx_BKUPRead>:
  *         the total number of Backup data Registers. This total number is not
  *         the same on all devices.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3350      	adds	r3, #80	; 0x50
 8004b42:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e031      	b.n	8004bd2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd fa96 	bl	80020b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 f8e4 	bl	8004d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0b4      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x186>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2e:	d03e      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xd4>
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c34:	f200 8087 	bhi.w	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	f000 8086 	beq.w	8004d4c <HAL_TIM_ConfigClockSource+0x172>
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c44:	d87f      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c46:	2b70      	cmp	r3, #112	; 0x70
 8004c48:	d01a      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0xa6>
 8004c4a:	2b70      	cmp	r3, #112	; 0x70
 8004c4c:	d87b      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4e:	2b60      	cmp	r3, #96	; 0x60
 8004c50:	d050      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x11a>
 8004c52:	2b60      	cmp	r3, #96	; 0x60
 8004c54:	d877      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c56:	2b50      	cmp	r3, #80	; 0x50
 8004c58:	d03c      	beq.n	8004cd4 <HAL_TIM_ConfigClockSource+0xfa>
 8004c5a:	2b50      	cmp	r3, #80	; 0x50
 8004c5c:	d873      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d058      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x13a>
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d86f      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	2b30      	cmp	r3, #48	; 0x30
 8004c68:	d064      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6a:	2b30      	cmp	r3, #48	; 0x30
 8004c6c:	d86b      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d060      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x15a>
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d867      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d05c      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d05a      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7e:	e062      	b.n	8004d46 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c90:	f000 f951 	bl	8004f36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]
      break;
 8004cac:	e04f      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cbe:	f000 f93a 	bl	8004f36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd0:	609a      	str	r2, [r3, #8]
      break;
 8004cd2:	e03c      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f000 f8b1 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2150      	movs	r1, #80	; 0x50
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f908 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e02c      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d00:	461a      	mov	r2, r3
 8004d02:	f000 f8cf 	bl	8004ea4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2160      	movs	r1, #96	; 0x60
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f8f8 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004d12:	e01c      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d20:	461a      	mov	r2, r3
 8004d22:	f000 f891 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f8e8 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004d32:	e00c      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 f8df 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e003      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4a:	e000      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <TIM_Base_SetConfig+0xc8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <TIM_Base_SetConfig+0xcc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <TIM_Base_SetConfig+0xd0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <TIM_Base_SetConfig+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0x82>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <TIM_Base_SetConfig+0xc8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0x82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <TIM_Base_SetConfig+0xcc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0x82>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <TIM_Base_SetConfig+0xd0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0x82>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <TIM_Base_SetConfig+0xd4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0x82>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <TIM_Base_SetConfig+0xd8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0x82>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <TIM_Base_SetConfig+0xdc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40010800 	.word	0x40010800
 8004e40:	40010c00 	.word	0x40010c00
 8004e44:	40011000 	.word	0x40011000

08004e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 030a 	bic.w	r3, r3, #10
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	621a      	str	r2, [r3, #32]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f043 0307 	orr.w	r3, r3, #7
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	609a      	str	r2, [r3, #8]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e046      	b.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d00e      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a12      	ldr	r2, [pc, #72]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a10      	ldr	r2, [pc, #64]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10c      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40010800 	.word	0x40010800

08005030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e042      	b.n	80050c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd f89c 	bl	8002194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f91d 	bl	80052b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d16d      	bne.n	80051cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Transmit+0x2c>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e066      	b.n	80051ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2221      	movs	r2, #33	; 0x21
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510e:	f7fd f941 	bl	8002394 <HAL_GetTick>
 8005112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d108      	bne.n	800513c <HAL_UART_Transmit+0x6c>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d104      	bne.n	800513c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e003      	b.n	8005144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005144:	e02a      	b.n	800519c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f840 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e036      	b.n	80051ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	3302      	adds	r3, #2
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e007      	b.n	800518e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	3301      	adds	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1cf      	bne.n	8005146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2140      	movs	r1, #64	; 0x40
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f810 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e000      	b.n	80051ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b090      	sub	sp, #64	; 0x40
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	e050      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d04c      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f6:	f7fd f8cd 	bl	8002394 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005202:	429a      	cmp	r2, r3
 8005204:	d241      	bcs.n	800528a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005226:	637a      	str	r2, [r7, #52]	; 0x34
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800522c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	613b      	str	r3, [r7, #16]
   return(result);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525a:	623a      	str	r2, [r7, #32]
 800525c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	69f9      	ldr	r1, [r7, #28]
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	61bb      	str	r3, [r7, #24]
   return(result);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d09f      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3740      	adds	r7, #64	; 0x40
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052f4:	f023 030c 	bic.w	r3, r3, #12
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	430b      	orrs	r3, r1
 8005300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a55      	ldr	r2, [pc, #340]	; (8005474 <UART_SetConfig+0x1c0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d103      	bne.n	800532a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005322:	f7fe fe53 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	e002      	b.n	8005330 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800532a:	f7fe fe3b 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 800532e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005338:	d14c      	bne.n	80053d4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009a      	lsls	r2, r3, #2
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	4a49      	ldr	r2, [pc, #292]	; (8005478 <UART_SetConfig+0x1c4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	0119      	lsls	r1, r3, #4
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009a      	lsls	r2, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <UART_SetConfig+0x1c4>)
 8005372:	fba3 0302 	umull	r0, r3, r3, r2
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	2064      	movs	r0, #100	; 0x64
 800537a:	fb00 f303 	mul.w	r3, r0, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	3332      	adds	r3, #50	; 0x32
 8005384:	4a3c      	ldr	r2, [pc, #240]	; (8005478 <UART_SetConfig+0x1c4>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005392:	4419      	add	r1, r3
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009a      	lsls	r2, r3, #2
 800539e:	441a      	add	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80053aa:	4b33      	ldr	r3, [pc, #204]	; (8005478 <UART_SetConfig+0x1c4>)
 80053ac:	fba3 0302 	umull	r0, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	2064      	movs	r0, #100	; 0x64
 80053b4:	fb00 f303 	mul.w	r3, r0, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	3332      	adds	r3, #50	; 0x32
 80053be:	4a2e      	ldr	r2, [pc, #184]	; (8005478 <UART_SetConfig+0x1c4>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f003 0207 	and.w	r2, r3, #7
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	440a      	add	r2, r1
 80053d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d2:	e04a      	b.n	800546a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	4a23      	ldr	r2, [pc, #140]	; (8005478 <UART_SetConfig+0x1c4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	0119      	lsls	r1, r3, #4
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009a      	lsls	r2, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	fbb2 f2f3 	udiv	r2, r2, r3
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <UART_SetConfig+0x1c4>)
 800540c:	fba3 0302 	umull	r0, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2064      	movs	r0, #100	; 0x64
 8005414:	fb00 f303 	mul.w	r3, r0, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	3332      	adds	r3, #50	; 0x32
 800541e:	4a16      	ldr	r2, [pc, #88]	; (8005478 <UART_SetConfig+0x1c4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542a:	4419      	add	r1, r3
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009a      	lsls	r2, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <UART_SetConfig+0x1c4>)
 8005444:	fba3 0302 	umull	r0, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2064      	movs	r0, #100	; 0x64
 800544c:	fb00 f303 	mul.w	r3, r0, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	3332      	adds	r3, #50	; 0x32
 8005456:	4a08      	ldr	r2, [pc, #32]	; (8005478 <UART_SetConfig+0x1c4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	440a      	add	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40013800 	.word	0x40013800
 8005478:	51eb851f 	.word	0x51eb851f

0800547c <__cvt>:
 800547c:	2b00      	cmp	r3, #0
 800547e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005482:	461f      	mov	r7, r3
 8005484:	bfbb      	ittet	lt
 8005486:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800548a:	461f      	movlt	r7, r3
 800548c:	2300      	movge	r3, #0
 800548e:	232d      	movlt	r3, #45	; 0x2d
 8005490:	b088      	sub	sp, #32
 8005492:	4614      	mov	r4, r2
 8005494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005496:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005498:	7013      	strb	r3, [r2, #0]
 800549a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800549c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80054a0:	f023 0820 	bic.w	r8, r3, #32
 80054a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a8:	d005      	beq.n	80054b6 <__cvt+0x3a>
 80054aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054ae:	d100      	bne.n	80054b2 <__cvt+0x36>
 80054b0:	3501      	adds	r5, #1
 80054b2:	2302      	movs	r3, #2
 80054b4:	e000      	b.n	80054b8 <__cvt+0x3c>
 80054b6:	2303      	movs	r3, #3
 80054b8:	aa07      	add	r2, sp, #28
 80054ba:	9204      	str	r2, [sp, #16]
 80054bc:	aa06      	add	r2, sp, #24
 80054be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054c2:	e9cd 3500 	strd	r3, r5, [sp]
 80054c6:	4622      	mov	r2, r4
 80054c8:	463b      	mov	r3, r7
 80054ca:	f001 f885 	bl	80065d8 <_dtoa_r>
 80054ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054d2:	4606      	mov	r6, r0
 80054d4:	d102      	bne.n	80054dc <__cvt+0x60>
 80054d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054d8:	07db      	lsls	r3, r3, #31
 80054da:	d522      	bpl.n	8005522 <__cvt+0xa6>
 80054dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054e0:	eb06 0905 	add.w	r9, r6, r5
 80054e4:	d110      	bne.n	8005508 <__cvt+0x8c>
 80054e6:	7833      	ldrb	r3, [r6, #0]
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d10a      	bne.n	8005502 <__cvt+0x86>
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	4620      	mov	r0, r4
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fb fa70 	bl	80009d8 <__aeabi_dcmpeq>
 80054f8:	b918      	cbnz	r0, 8005502 <__cvt+0x86>
 80054fa:	f1c5 0501 	rsb	r5, r5, #1
 80054fe:	f8ca 5000 	str.w	r5, [sl]
 8005502:	f8da 3000 	ldr.w	r3, [sl]
 8005506:	4499      	add	r9, r3
 8005508:	2200      	movs	r2, #0
 800550a:	2300      	movs	r3, #0
 800550c:	4620      	mov	r0, r4
 800550e:	4639      	mov	r1, r7
 8005510:	f7fb fa62 	bl	80009d8 <__aeabi_dcmpeq>
 8005514:	b108      	cbz	r0, 800551a <__cvt+0x9e>
 8005516:	f8cd 901c 	str.w	r9, [sp, #28]
 800551a:	2230      	movs	r2, #48	; 0x30
 800551c:	9b07      	ldr	r3, [sp, #28]
 800551e:	454b      	cmp	r3, r9
 8005520:	d307      	bcc.n	8005532 <__cvt+0xb6>
 8005522:	4630      	mov	r0, r6
 8005524:	9b07      	ldr	r3, [sp, #28]
 8005526:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005528:	1b9b      	subs	r3, r3, r6
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	b008      	add	sp, #32
 800552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	9107      	str	r1, [sp, #28]
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e7f0      	b.n	800551c <__cvt+0xa0>

0800553a <__exponent>:
 800553a:	4603      	mov	r3, r0
 800553c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800553e:	2900      	cmp	r1, #0
 8005540:	f803 2b02 	strb.w	r2, [r3], #2
 8005544:	bfb6      	itet	lt
 8005546:	222d      	movlt	r2, #45	; 0x2d
 8005548:	222b      	movge	r2, #43	; 0x2b
 800554a:	4249      	neglt	r1, r1
 800554c:	2909      	cmp	r1, #9
 800554e:	7042      	strb	r2, [r0, #1]
 8005550:	dd2a      	ble.n	80055a8 <__exponent+0x6e>
 8005552:	f10d 0207 	add.w	r2, sp, #7
 8005556:	4617      	mov	r7, r2
 8005558:	260a      	movs	r6, #10
 800555a:	fb91 f5f6 	sdiv	r5, r1, r6
 800555e:	4694      	mov	ip, r2
 8005560:	fb06 1415 	mls	r4, r6, r5, r1
 8005564:	3430      	adds	r4, #48	; 0x30
 8005566:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800556a:	460c      	mov	r4, r1
 800556c:	2c63      	cmp	r4, #99	; 0x63
 800556e:	4629      	mov	r1, r5
 8005570:	f102 32ff 	add.w	r2, r2, #4294967295
 8005574:	dcf1      	bgt.n	800555a <__exponent+0x20>
 8005576:	3130      	adds	r1, #48	; 0x30
 8005578:	f1ac 0402 	sub.w	r4, ip, #2
 800557c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005580:	4622      	mov	r2, r4
 8005582:	1c41      	adds	r1, r0, #1
 8005584:	42ba      	cmp	r2, r7
 8005586:	d30a      	bcc.n	800559e <__exponent+0x64>
 8005588:	f10d 0209 	add.w	r2, sp, #9
 800558c:	eba2 020c 	sub.w	r2, r2, ip
 8005590:	42bc      	cmp	r4, r7
 8005592:	bf88      	it	hi
 8005594:	2200      	movhi	r2, #0
 8005596:	4413      	add	r3, r2
 8005598:	1a18      	subs	r0, r3, r0
 800559a:	b003      	add	sp, #12
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80055a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80055a6:	e7ed      	b.n	8005584 <__exponent+0x4a>
 80055a8:	2330      	movs	r3, #48	; 0x30
 80055aa:	3130      	adds	r1, #48	; 0x30
 80055ac:	7083      	strb	r3, [r0, #2]
 80055ae:	70c1      	strb	r1, [r0, #3]
 80055b0:	1d03      	adds	r3, r0, #4
 80055b2:	e7f1      	b.n	8005598 <__exponent+0x5e>

080055b4 <_printf_float>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	b091      	sub	sp, #68	; 0x44
 80055ba:	460c      	mov	r4, r1
 80055bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80055c0:	4616      	mov	r6, r2
 80055c2:	461f      	mov	r7, r3
 80055c4:	4605      	mov	r5, r0
 80055c6:	f000 fef3 	bl	80063b0 <_localeconv_r>
 80055ca:	6803      	ldr	r3, [r0, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	f7fa fdd6 	bl	8000180 <strlen>
 80055d4:	2300      	movs	r3, #0
 80055d6:	930e      	str	r3, [sp, #56]	; 0x38
 80055d8:	f8d8 3000 	ldr.w	r3, [r8]
 80055dc:	900a      	str	r0, [sp, #40]	; 0x28
 80055de:	3307      	adds	r3, #7
 80055e0:	f023 0307 	bic.w	r3, r3, #7
 80055e4:	f103 0208 	add.w	r2, r3, #8
 80055e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80055ec:	f8d4 b000 	ldr.w	fp, [r4]
 80055f0:	f8c8 2000 	str.w	r2, [r8]
 80055f4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80055f8:	4652      	mov	r2, sl
 80055fa:	4643      	mov	r3, r8
 80055fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005600:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005604:	930b      	str	r3, [sp, #44]	; 0x2c
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	4650      	mov	r0, sl
 800560c:	4b9c      	ldr	r3, [pc, #624]	; (8005880 <_printf_float+0x2cc>)
 800560e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005610:	f7fb fa14 	bl	8000a3c <__aeabi_dcmpun>
 8005614:	bb70      	cbnz	r0, 8005674 <_printf_float+0xc0>
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	4650      	mov	r0, sl
 800561c:	4b98      	ldr	r3, [pc, #608]	; (8005880 <_printf_float+0x2cc>)
 800561e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005620:	f7fb f9ee 	bl	8000a00 <__aeabi_dcmple>
 8005624:	bb30      	cbnz	r0, 8005674 <_printf_float+0xc0>
 8005626:	2200      	movs	r2, #0
 8005628:	2300      	movs	r3, #0
 800562a:	4650      	mov	r0, sl
 800562c:	4641      	mov	r1, r8
 800562e:	f7fb f9dd 	bl	80009ec <__aeabi_dcmplt>
 8005632:	b110      	cbz	r0, 800563a <_printf_float+0x86>
 8005634:	232d      	movs	r3, #45	; 0x2d
 8005636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563a:	4a92      	ldr	r2, [pc, #584]	; (8005884 <_printf_float+0x2d0>)
 800563c:	4b92      	ldr	r3, [pc, #584]	; (8005888 <_printf_float+0x2d4>)
 800563e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005642:	bf94      	ite	ls
 8005644:	4690      	movls	r8, r2
 8005646:	4698      	movhi	r8, r3
 8005648:	2303      	movs	r3, #3
 800564a:	f04f 0a00 	mov.w	sl, #0
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	f02b 0304 	bic.w	r3, fp, #4
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	4633      	mov	r3, r6
 8005658:	4621      	mov	r1, r4
 800565a:	4628      	mov	r0, r5
 800565c:	9700      	str	r7, [sp, #0]
 800565e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005660:	f000 f9d6 	bl	8005a10 <_printf_common>
 8005664:	3001      	adds	r0, #1
 8005666:	f040 8090 	bne.w	800578a <_printf_float+0x1d6>
 800566a:	f04f 30ff 	mov.w	r0, #4294967295
 800566e:	b011      	add	sp, #68	; 0x44
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	4652      	mov	r2, sl
 8005676:	4643      	mov	r3, r8
 8005678:	4650      	mov	r0, sl
 800567a:	4641      	mov	r1, r8
 800567c:	f7fb f9de 	bl	8000a3c <__aeabi_dcmpun>
 8005680:	b148      	cbz	r0, 8005696 <_printf_float+0xe2>
 8005682:	f1b8 0f00 	cmp.w	r8, #0
 8005686:	bfb8      	it	lt
 8005688:	232d      	movlt	r3, #45	; 0x2d
 800568a:	4a80      	ldr	r2, [pc, #512]	; (800588c <_printf_float+0x2d8>)
 800568c:	bfb8      	it	lt
 800568e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005692:	4b7f      	ldr	r3, [pc, #508]	; (8005890 <_printf_float+0x2dc>)
 8005694:	e7d3      	b.n	800563e <_printf_float+0x8a>
 8005696:	6863      	ldr	r3, [r4, #4]
 8005698:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	d142      	bne.n	8005726 <_printf_float+0x172>
 80056a0:	2306      	movs	r3, #6
 80056a2:	6063      	str	r3, [r4, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	9206      	str	r2, [sp, #24]
 80056a8:	aa0e      	add	r2, sp, #56	; 0x38
 80056aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80056ae:	aa0d      	add	r2, sp, #52	; 0x34
 80056b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80056b4:	9203      	str	r2, [sp, #12]
 80056b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80056ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	4652      	mov	r2, sl
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	4628      	mov	r0, r5
 80056c8:	4643      	mov	r3, r8
 80056ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80056cc:	f7ff fed6 	bl	800547c <__cvt>
 80056d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056d2:	4680      	mov	r8, r0
 80056d4:	2947      	cmp	r1, #71	; 0x47
 80056d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056d8:	d108      	bne.n	80056ec <_printf_float+0x138>
 80056da:	1cc8      	adds	r0, r1, #3
 80056dc:	db02      	blt.n	80056e4 <_printf_float+0x130>
 80056de:	6863      	ldr	r3, [r4, #4]
 80056e0:	4299      	cmp	r1, r3
 80056e2:	dd40      	ble.n	8005766 <_printf_float+0x1b2>
 80056e4:	f1a9 0902 	sub.w	r9, r9, #2
 80056e8:	fa5f f989 	uxtb.w	r9, r9
 80056ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056f0:	d81f      	bhi.n	8005732 <_printf_float+0x17e>
 80056f2:	464a      	mov	r2, r9
 80056f4:	3901      	subs	r1, #1
 80056f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056fa:	910d      	str	r1, [sp, #52]	; 0x34
 80056fc:	f7ff ff1d 	bl	800553a <__exponent>
 8005700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005702:	4682      	mov	sl, r0
 8005704:	1813      	adds	r3, r2, r0
 8005706:	2a01      	cmp	r2, #1
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	dc02      	bgt.n	8005712 <_printf_float+0x15e>
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	07d2      	lsls	r2, r2, #31
 8005710:	d501      	bpl.n	8005716 <_printf_float+0x162>
 8005712:	3301      	adds	r3, #1
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800571a:	2b00      	cmp	r3, #0
 800571c:	d09b      	beq.n	8005656 <_printf_float+0xa2>
 800571e:	232d      	movs	r3, #45	; 0x2d
 8005720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005724:	e797      	b.n	8005656 <_printf_float+0xa2>
 8005726:	2947      	cmp	r1, #71	; 0x47
 8005728:	d1bc      	bne.n	80056a4 <_printf_float+0xf0>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ba      	bne.n	80056a4 <_printf_float+0xf0>
 800572e:	2301      	movs	r3, #1
 8005730:	e7b7      	b.n	80056a2 <_printf_float+0xee>
 8005732:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005736:	d118      	bne.n	800576a <_printf_float+0x1b6>
 8005738:	2900      	cmp	r1, #0
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	dd0b      	ble.n	8005756 <_printf_float+0x1a2>
 800573e:	6121      	str	r1, [r4, #16]
 8005740:	b913      	cbnz	r3, 8005748 <_printf_float+0x194>
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	07d0      	lsls	r0, r2, #31
 8005746:	d502      	bpl.n	800574e <_printf_float+0x19a>
 8005748:	3301      	adds	r3, #1
 800574a:	440b      	add	r3, r1
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	f04f 0a00 	mov.w	sl, #0
 8005752:	65a1      	str	r1, [r4, #88]	; 0x58
 8005754:	e7df      	b.n	8005716 <_printf_float+0x162>
 8005756:	b913      	cbnz	r3, 800575e <_printf_float+0x1aa>
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	07d2      	lsls	r2, r2, #31
 800575c:	d501      	bpl.n	8005762 <_printf_float+0x1ae>
 800575e:	3302      	adds	r3, #2
 8005760:	e7f4      	b.n	800574c <_printf_float+0x198>
 8005762:	2301      	movs	r3, #1
 8005764:	e7f2      	b.n	800574c <_printf_float+0x198>
 8005766:	f04f 0967 	mov.w	r9, #103	; 0x67
 800576a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576c:	4299      	cmp	r1, r3
 800576e:	db05      	blt.n	800577c <_printf_float+0x1c8>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	6121      	str	r1, [r4, #16]
 8005774:	07d8      	lsls	r0, r3, #31
 8005776:	d5ea      	bpl.n	800574e <_printf_float+0x19a>
 8005778:	1c4b      	adds	r3, r1, #1
 800577a:	e7e7      	b.n	800574c <_printf_float+0x198>
 800577c:	2900      	cmp	r1, #0
 800577e:	bfcc      	ite	gt
 8005780:	2201      	movgt	r2, #1
 8005782:	f1c1 0202 	rsble	r2, r1, #2
 8005786:	4413      	add	r3, r2
 8005788:	e7e0      	b.n	800574c <_printf_float+0x198>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	055a      	lsls	r2, r3, #21
 800578e:	d407      	bmi.n	80057a0 <_printf_float+0x1ec>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	4642      	mov	r2, r8
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	d12b      	bne.n	80057f6 <_printf_float+0x242>
 800579e:	e764      	b.n	800566a <_printf_float+0xb6>
 80057a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057a4:	f240 80dd 	bls.w	8005962 <_printf_float+0x3ae>
 80057a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057ac:	2200      	movs	r2, #0
 80057ae:	2300      	movs	r3, #0
 80057b0:	f7fb f912 	bl	80009d8 <__aeabi_dcmpeq>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d033      	beq.n	8005820 <_printf_float+0x26c>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	4a35      	ldr	r2, [pc, #212]	; (8005894 <_printf_float+0x2e0>)
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f af51 	beq.w	800566a <_printf_float+0xb6>
 80057c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057cc:	429a      	cmp	r2, r3
 80057ce:	db02      	blt.n	80057d6 <_printf_float+0x222>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07d8      	lsls	r0, r3, #31
 80057d4:	d50f      	bpl.n	80057f6 <_printf_float+0x242>
 80057d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f af42 	beq.w	800566a <_printf_float+0xb6>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	f104 091a 	add.w	r9, r4, #26
 80057ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057f0:	3b01      	subs	r3, #1
 80057f2:	4543      	cmp	r3, r8
 80057f4:	dc09      	bgt.n	800580a <_printf_float+0x256>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	079b      	lsls	r3, r3, #30
 80057fa:	f100 8104 	bmi.w	8005a06 <_printf_float+0x452>
 80057fe:	68e0      	ldr	r0, [r4, #12]
 8005800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005802:	4298      	cmp	r0, r3
 8005804:	bfb8      	it	lt
 8005806:	4618      	movlt	r0, r3
 8005808:	e731      	b.n	800566e <_printf_float+0xba>
 800580a:	2301      	movs	r3, #1
 800580c:	464a      	mov	r2, r9
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	f43f af28 	beq.w	800566a <_printf_float+0xb6>
 800581a:	f108 0801 	add.w	r8, r8, #1
 800581e:	e7e6      	b.n	80057ee <_printf_float+0x23a>
 8005820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005822:	2b00      	cmp	r3, #0
 8005824:	dc38      	bgt.n	8005898 <_printf_float+0x2e4>
 8005826:	2301      	movs	r3, #1
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	4a19      	ldr	r2, [pc, #100]	; (8005894 <_printf_float+0x2e0>)
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	f43f af1a 	beq.w	800566a <_printf_float+0xb6>
 8005836:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800583a:	4313      	orrs	r3, r2
 800583c:	d102      	bne.n	8005844 <_printf_float+0x290>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	07d9      	lsls	r1, r3, #31
 8005842:	d5d8      	bpl.n	80057f6 <_printf_float+0x242>
 8005844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005848:	4631      	mov	r1, r6
 800584a:	4628      	mov	r0, r5
 800584c:	47b8      	blx	r7
 800584e:	3001      	adds	r0, #1
 8005850:	f43f af0b 	beq.w	800566a <_printf_float+0xb6>
 8005854:	f04f 0900 	mov.w	r9, #0
 8005858:	f104 0a1a 	add.w	sl, r4, #26
 800585c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800585e:	425b      	negs	r3, r3
 8005860:	454b      	cmp	r3, r9
 8005862:	dc01      	bgt.n	8005868 <_printf_float+0x2b4>
 8005864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005866:	e794      	b.n	8005792 <_printf_float+0x1de>
 8005868:	2301      	movs	r3, #1
 800586a:	4652      	mov	r2, sl
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f aef9 	beq.w	800566a <_printf_float+0xb6>
 8005878:	f109 0901 	add.w	r9, r9, #1
 800587c:	e7ee      	b.n	800585c <_printf_float+0x2a8>
 800587e:	bf00      	nop
 8005880:	7fefffff 	.word	0x7fefffff
 8005884:	08009d00 	.word	0x08009d00
 8005888:	08009d04 	.word	0x08009d04
 800588c:	08009d08 	.word	0x08009d08
 8005890:	08009d0c 	.word	0x08009d0c
 8005894:	08009d10 	.word	0x08009d10
 8005898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800589a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800589c:	429a      	cmp	r2, r3
 800589e:	bfa8      	it	ge
 80058a0:	461a      	movge	r2, r3
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	4691      	mov	r9, r2
 80058a6:	dc37      	bgt.n	8005918 <_printf_float+0x364>
 80058a8:	f04f 0b00 	mov.w	fp, #0
 80058ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b0:	f104 021a 	add.w	r2, r4, #26
 80058b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80058b8:	ebaa 0309 	sub.w	r3, sl, r9
 80058bc:	455b      	cmp	r3, fp
 80058be:	dc33      	bgt.n	8005928 <_printf_float+0x374>
 80058c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058c4:	429a      	cmp	r2, r3
 80058c6:	db3b      	blt.n	8005940 <_printf_float+0x38c>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	07da      	lsls	r2, r3, #31
 80058cc:	d438      	bmi.n	8005940 <_printf_float+0x38c>
 80058ce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80058d2:	eba2 0903 	sub.w	r9, r2, r3
 80058d6:	eba2 020a 	sub.w	r2, r2, sl
 80058da:	4591      	cmp	r9, r2
 80058dc:	bfa8      	it	ge
 80058de:	4691      	movge	r9, r2
 80058e0:	f1b9 0f00 	cmp.w	r9, #0
 80058e4:	dc34      	bgt.n	8005950 <_printf_float+0x39c>
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ee:	f104 0a1a 	add.w	sl, r4, #26
 80058f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	eba3 0309 	sub.w	r3, r3, r9
 80058fc:	4543      	cmp	r3, r8
 80058fe:	f77f af7a 	ble.w	80057f6 <_printf_float+0x242>
 8005902:	2301      	movs	r3, #1
 8005904:	4652      	mov	r2, sl
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	f43f aeac 	beq.w	800566a <_printf_float+0xb6>
 8005912:	f108 0801 	add.w	r8, r8, #1
 8005916:	e7ec      	b.n	80058f2 <_printf_float+0x33e>
 8005918:	4613      	mov	r3, r2
 800591a:	4631      	mov	r1, r6
 800591c:	4642      	mov	r2, r8
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	d1c0      	bne.n	80058a8 <_printf_float+0x2f4>
 8005926:	e6a0      	b.n	800566a <_printf_float+0xb6>
 8005928:	2301      	movs	r3, #1
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f ae99 	beq.w	800566a <_printf_float+0xb6>
 8005938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800593a:	f10b 0b01 	add.w	fp, fp, #1
 800593e:	e7b9      	b.n	80058b4 <_printf_float+0x300>
 8005940:	4631      	mov	r1, r6
 8005942:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	d1bf      	bne.n	80058ce <_printf_float+0x31a>
 800594e:	e68c      	b.n	800566a <_printf_float+0xb6>
 8005950:	464b      	mov	r3, r9
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	eb08 020a 	add.w	r2, r8, sl
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	d1c2      	bne.n	80058e6 <_printf_float+0x332>
 8005960:	e683      	b.n	800566a <_printf_float+0xb6>
 8005962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005964:	2a01      	cmp	r2, #1
 8005966:	dc01      	bgt.n	800596c <_printf_float+0x3b8>
 8005968:	07db      	lsls	r3, r3, #31
 800596a:	d539      	bpl.n	80059e0 <_printf_float+0x42c>
 800596c:	2301      	movs	r3, #1
 800596e:	4642      	mov	r2, r8
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	f43f ae77 	beq.w	800566a <_printf_float+0xb6>
 800597c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f ae6f 	beq.w	800566a <_printf_float+0xb6>
 800598c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005998:	f7fb f81e 	bl	80009d8 <__aeabi_dcmpeq>
 800599c:	b9d8      	cbnz	r0, 80059d6 <_printf_float+0x422>
 800599e:	f109 33ff 	add.w	r3, r9, #4294967295
 80059a2:	f108 0201 	add.w	r2, r8, #1
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d10e      	bne.n	80059ce <_printf_float+0x41a>
 80059b0:	e65b      	b.n	800566a <_printf_float+0xb6>
 80059b2:	2301      	movs	r3, #1
 80059b4:	464a      	mov	r2, r9
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae54 	beq.w	800566a <_printf_float+0xb6>
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4543      	cmp	r3, r8
 80059cc:	dcf1      	bgt.n	80059b2 <_printf_float+0x3fe>
 80059ce:	4653      	mov	r3, sl
 80059d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059d4:	e6de      	b.n	8005794 <_printf_float+0x1e0>
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	f104 091a 	add.w	r9, r4, #26
 80059de:	e7f2      	b.n	80059c6 <_printf_float+0x412>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4642      	mov	r2, r8
 80059e4:	e7df      	b.n	80059a6 <_printf_float+0x3f2>
 80059e6:	2301      	movs	r3, #1
 80059e8:	464a      	mov	r2, r9
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f ae3a 	beq.w	800566a <_printf_float+0xb6>
 80059f6:	f108 0801 	add.w	r8, r8, #1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	4543      	cmp	r3, r8
 8005a02:	dcf0      	bgt.n	80059e6 <_printf_float+0x432>
 8005a04:	e6fb      	b.n	80057fe <_printf_float+0x24a>
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	f104 0919 	add.w	r9, r4, #25
 8005a0e:	e7f4      	b.n	80059fa <_printf_float+0x446>

08005a10 <_printf_common>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	4616      	mov	r6, r2
 8005a16:	4699      	mov	r9, r3
 8005a18:	688a      	ldr	r2, [r1, #8]
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	bfb8      	it	lt
 8005a22:	4613      	movlt	r3, r2
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a30:	b10a      	cbz	r2, 8005a36 <_printf_common+0x26>
 8005a32:	3301      	adds	r3, #1
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	0699      	lsls	r1, r3, #26
 8005a3a:	bf42      	ittt	mi
 8005a3c:	6833      	ldrmi	r3, [r6, #0]
 8005a3e:	3302      	addmi	r3, #2
 8005a40:	6033      	strmi	r3, [r6, #0]
 8005a42:	6825      	ldr	r5, [r4, #0]
 8005a44:	f015 0506 	ands.w	r5, r5, #6
 8005a48:	d106      	bne.n	8005a58 <_printf_common+0x48>
 8005a4a:	f104 0a19 	add.w	sl, r4, #25
 8005a4e:	68e3      	ldr	r3, [r4, #12]
 8005a50:	6832      	ldr	r2, [r6, #0]
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	42ab      	cmp	r3, r5
 8005a56:	dc2b      	bgt.n	8005ab0 <_printf_common+0xa0>
 8005a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a5c:	1e13      	subs	r3, r2, #0
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	bf18      	it	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	0692      	lsls	r2, r2, #26
 8005a66:	d430      	bmi.n	8005aca <_printf_common+0xba>
 8005a68:	4649      	mov	r1, r9
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a70:	47c0      	blx	r8
 8005a72:	3001      	adds	r0, #1
 8005a74:	d023      	beq.n	8005abe <_printf_common+0xae>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	f003 0306 	and.w	r3, r3, #6
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	bf14      	ite	ne
 8005a82:	2500      	movne	r5, #0
 8005a84:	6833      	ldreq	r3, [r6, #0]
 8005a86:	f04f 0600 	mov.w	r6, #0
 8005a8a:	bf08      	it	eq
 8005a8c:	68e5      	ldreq	r5, [r4, #12]
 8005a8e:	f104 041a 	add.w	r4, r4, #26
 8005a92:	bf08      	it	eq
 8005a94:	1aed      	subeq	r5, r5, r3
 8005a96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a9a:	bf08      	it	eq
 8005a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	bfc4      	itt	gt
 8005aa4:	1a9b      	subgt	r3, r3, r2
 8005aa6:	18ed      	addgt	r5, r5, r3
 8005aa8:	42b5      	cmp	r5, r6
 8005aaa:	d11a      	bne.n	8005ae2 <_printf_common+0xd2>
 8005aac:	2000      	movs	r0, #0
 8005aae:	e008      	b.n	8005ac2 <_printf_common+0xb2>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d103      	bne.n	8005ac6 <_printf_common+0xb6>
 8005abe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	e7c1      	b.n	8005a4e <_printf_common+0x3e>
 8005aca:	2030      	movs	r0, #48	; 0x30
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ad8:	4422      	add	r2, r4
 8005ada:	3302      	adds	r3, #2
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae0:	e7c2      	b.n	8005a68 <_printf_common+0x58>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4638      	mov	r0, r7
 8005aea:	47c0      	blx	r8
 8005aec:	3001      	adds	r0, #1
 8005aee:	d0e6      	beq.n	8005abe <_printf_common+0xae>
 8005af0:	3601      	adds	r6, #1
 8005af2:	e7d9      	b.n	8005aa8 <_printf_common+0x98>

08005af4 <_printf_i>:
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	7e0f      	ldrb	r7, [r1, #24]
 8005afa:	4691      	mov	r9, r2
 8005afc:	2f78      	cmp	r7, #120	; 0x78
 8005afe:	4680      	mov	r8, r0
 8005b00:	460c      	mov	r4, r1
 8005b02:	469a      	mov	sl, r3
 8005b04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b0a:	d807      	bhi.n	8005b1c <_printf_i+0x28>
 8005b0c:	2f62      	cmp	r7, #98	; 0x62
 8005b0e:	d80a      	bhi.n	8005b26 <_printf_i+0x32>
 8005b10:	2f00      	cmp	r7, #0
 8005b12:	f000 80d5 	beq.w	8005cc0 <_printf_i+0x1cc>
 8005b16:	2f58      	cmp	r7, #88	; 0x58
 8005b18:	f000 80c1 	beq.w	8005c9e <_printf_i+0x1aa>
 8005b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b24:	e03a      	b.n	8005b9c <_printf_i+0xa8>
 8005b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2a:	2b15      	cmp	r3, #21
 8005b2c:	d8f6      	bhi.n	8005b1c <_printf_i+0x28>
 8005b2e:	a101      	add	r1, pc, #4	; (adr r1, 8005b34 <_printf_i+0x40>)
 8005b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b34:	08005b8d 	.word	0x08005b8d
 8005b38:	08005ba1 	.word	0x08005ba1
 8005b3c:	08005b1d 	.word	0x08005b1d
 8005b40:	08005b1d 	.word	0x08005b1d
 8005b44:	08005b1d 	.word	0x08005b1d
 8005b48:	08005b1d 	.word	0x08005b1d
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005b1d 	.word	0x08005b1d
 8005b54:	08005b1d 	.word	0x08005b1d
 8005b58:	08005b1d 	.word	0x08005b1d
 8005b5c:	08005b1d 	.word	0x08005b1d
 8005b60:	08005ca7 	.word	0x08005ca7
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005c61 	.word	0x08005c61
 8005b6c:	08005b1d 	.word	0x08005b1d
 8005b70:	08005b1d 	.word	0x08005b1d
 8005b74:	08005cc9 	.word	0x08005cc9
 8005b78:	08005b1d 	.word	0x08005b1d
 8005b7c:	08005bcd 	.word	0x08005bcd
 8005b80:	08005b1d 	.word	0x08005b1d
 8005b84:	08005b1d 	.word	0x08005b1d
 8005b88:	08005c69 	.word	0x08005c69
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	602a      	str	r2, [r5, #0]
 8005b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0a0      	b.n	8005ce2 <_printf_i+0x1ee>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	682b      	ldr	r3, [r5, #0]
 8005ba4:	0607      	lsls	r7, r0, #24
 8005ba6:	f103 0104 	add.w	r1, r3, #4
 8005baa:	6029      	str	r1, [r5, #0]
 8005bac:	d501      	bpl.n	8005bb2 <_printf_i+0xbe>
 8005bae:	681e      	ldr	r6, [r3, #0]
 8005bb0:	e003      	b.n	8005bba <_printf_i+0xc6>
 8005bb2:	0646      	lsls	r6, r0, #25
 8005bb4:	d5fb      	bpl.n	8005bae <_printf_i+0xba>
 8005bb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	da03      	bge.n	8005bc6 <_printf_i+0xd2>
 8005bbe:	232d      	movs	r3, #45	; 0x2d
 8005bc0:	4276      	negs	r6, r6
 8005bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	4859      	ldr	r0, [pc, #356]	; (8005d30 <_printf_i+0x23c>)
 8005bca:	e012      	b.n	8005bf2 <_printf_i+0xfe>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1d19      	adds	r1, r3, #4
 8005bd2:	6029      	str	r1, [r5, #0]
 8005bd4:	0605      	lsls	r5, r0, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xe8>
 8005bd8:	681e      	ldr	r6, [r3, #0]
 8005bda:	e002      	b.n	8005be2 <_printf_i+0xee>
 8005bdc:	0641      	lsls	r1, r0, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xe4>
 8005be0:	881e      	ldrh	r6, [r3, #0]
 8005be2:	2f6f      	cmp	r7, #111	; 0x6f
 8005be4:	bf0c      	ite	eq
 8005be6:	2308      	moveq	r3, #8
 8005be8:	230a      	movne	r3, #10
 8005bea:	4851      	ldr	r0, [pc, #324]	; (8005d30 <_printf_i+0x23c>)
 8005bec:	2100      	movs	r1, #0
 8005bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bf2:	6865      	ldr	r5, [r4, #4]
 8005bf4:	2d00      	cmp	r5, #0
 8005bf6:	bfa8      	it	ge
 8005bf8:	6821      	ldrge	r1, [r4, #0]
 8005bfa:	60a5      	str	r5, [r4, #8]
 8005bfc:	bfa4      	itt	ge
 8005bfe:	f021 0104 	bicge.w	r1, r1, #4
 8005c02:	6021      	strge	r1, [r4, #0]
 8005c04:	b90e      	cbnz	r6, 8005c0a <_printf_i+0x116>
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	d04b      	beq.n	8005ca2 <_printf_i+0x1ae>
 8005c0a:	4615      	mov	r5, r2
 8005c0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c10:	fb03 6711 	mls	r7, r3, r1, r6
 8005c14:	5dc7      	ldrb	r7, [r0, r7]
 8005c16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c1a:	4637      	mov	r7, r6
 8005c1c:	42bb      	cmp	r3, r7
 8005c1e:	460e      	mov	r6, r1
 8005c20:	d9f4      	bls.n	8005c0c <_printf_i+0x118>
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d10b      	bne.n	8005c3e <_printf_i+0x14a>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	07de      	lsls	r6, r3, #31
 8005c2a:	d508      	bpl.n	8005c3e <_printf_i+0x14a>
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	6861      	ldr	r1, [r4, #4]
 8005c30:	4299      	cmp	r1, r3
 8005c32:	bfde      	ittt	le
 8005c34:	2330      	movle	r3, #48	; 0x30
 8005c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c3e:	1b52      	subs	r2, r2, r5
 8005c40:	6122      	str	r2, [r4, #16]
 8005c42:	464b      	mov	r3, r9
 8005c44:	4621      	mov	r1, r4
 8005c46:	4640      	mov	r0, r8
 8005c48:	f8cd a000 	str.w	sl, [sp]
 8005c4c:	aa03      	add	r2, sp, #12
 8005c4e:	f7ff fedf 	bl	8005a10 <_printf_common>
 8005c52:	3001      	adds	r0, #1
 8005c54:	d14a      	bne.n	8005cec <_printf_i+0x1f8>
 8005c56:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5a:	b004      	add	sp, #16
 8005c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	f043 0320 	orr.w	r3, r3, #32
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	2778      	movs	r7, #120	; 0x78
 8005c6a:	4832      	ldr	r0, [pc, #200]	; (8005d34 <_printf_i+0x240>)
 8005c6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	6829      	ldr	r1, [r5, #0]
 8005c74:	061f      	lsls	r7, r3, #24
 8005c76:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c7a:	d402      	bmi.n	8005c82 <_printf_i+0x18e>
 8005c7c:	065f      	lsls	r7, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2b6      	uxthmi	r6, r6
 8005c82:	07df      	lsls	r7, r3, #31
 8005c84:	bf48      	it	mi
 8005c86:	f043 0320 	orrmi.w	r3, r3, #32
 8005c8a:	6029      	str	r1, [r5, #0]
 8005c8c:	bf48      	it	mi
 8005c8e:	6023      	strmi	r3, [r4, #0]
 8005c90:	b91e      	cbnz	r6, 8005c9a <_printf_i+0x1a6>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f023 0320 	bic.w	r3, r3, #32
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	e7a6      	b.n	8005bec <_printf_i+0xf8>
 8005c9e:	4824      	ldr	r0, [pc, #144]	; (8005d30 <_printf_i+0x23c>)
 8005ca0:	e7e4      	b.n	8005c6c <_printf_i+0x178>
 8005ca2:	4615      	mov	r5, r2
 8005ca4:	e7bd      	b.n	8005c22 <_printf_i+0x12e>
 8005ca6:	682b      	ldr	r3, [r5, #0]
 8005ca8:	6826      	ldr	r6, [r4, #0]
 8005caa:	1d18      	adds	r0, r3, #4
 8005cac:	6961      	ldr	r1, [r4, #20]
 8005cae:	6028      	str	r0, [r5, #0]
 8005cb0:	0635      	lsls	r5, r6, #24
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	d501      	bpl.n	8005cba <_printf_i+0x1c6>
 8005cb6:	6019      	str	r1, [r3, #0]
 8005cb8:	e002      	b.n	8005cc0 <_printf_i+0x1cc>
 8005cba:	0670      	lsls	r0, r6, #25
 8005cbc:	d5fb      	bpl.n	8005cb6 <_printf_i+0x1c2>
 8005cbe:	8019      	strh	r1, [r3, #0]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4615      	mov	r5, r2
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	e7bc      	b.n	8005c42 <_printf_i+0x14e>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	2100      	movs	r1, #0
 8005ccc:	1d1a      	adds	r2, r3, #4
 8005cce:	602a      	str	r2, [r5, #0]
 8005cd0:	681d      	ldr	r5, [r3, #0]
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 fbe2 	bl	800649e <memchr>
 8005cda:	b108      	cbz	r0, 8005ce0 <_printf_i+0x1ec>
 8005cdc:	1b40      	subs	r0, r0, r5
 8005cde:	6060      	str	r0, [r4, #4]
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cea:	e7aa      	b.n	8005c42 <_printf_i+0x14e>
 8005cec:	462a      	mov	r2, r5
 8005cee:	4649      	mov	r1, r9
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	47d0      	blx	sl
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d0ad      	beq.n	8005c56 <_printf_i+0x162>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	079b      	lsls	r3, r3, #30
 8005cfe:	d413      	bmi.n	8005d28 <_printf_i+0x234>
 8005d00:	68e0      	ldr	r0, [r4, #12]
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	4298      	cmp	r0, r3
 8005d06:	bfb8      	it	lt
 8005d08:	4618      	movlt	r0, r3
 8005d0a:	e7a6      	b.n	8005c5a <_printf_i+0x166>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4632      	mov	r2, r6
 8005d10:	4649      	mov	r1, r9
 8005d12:	4640      	mov	r0, r8
 8005d14:	47d0      	blx	sl
 8005d16:	3001      	adds	r0, #1
 8005d18:	d09d      	beq.n	8005c56 <_printf_i+0x162>
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	68e3      	ldr	r3, [r4, #12]
 8005d1e:	9903      	ldr	r1, [sp, #12]
 8005d20:	1a5b      	subs	r3, r3, r1
 8005d22:	42ab      	cmp	r3, r5
 8005d24:	dcf2      	bgt.n	8005d0c <_printf_i+0x218>
 8005d26:	e7eb      	b.n	8005d00 <_printf_i+0x20c>
 8005d28:	2500      	movs	r5, #0
 8005d2a:	f104 0619 	add.w	r6, r4, #25
 8005d2e:	e7f5      	b.n	8005d1c <_printf_i+0x228>
 8005d30:	08009d12 	.word	0x08009d12
 8005d34:	08009d23 	.word	0x08009d23

08005d38 <_scanf_float>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	9303      	str	r3, [sp, #12]
 8005d40:	688b      	ldr	r3, [r1, #8]
 8005d42:	4617      	mov	r7, r2
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d4a:	bf85      	ittet	hi
 8005d4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d50:	195b      	addhi	r3, r3, r5
 8005d52:	2300      	movls	r3, #0
 8005d54:	9302      	strhi	r3, [sp, #8]
 8005d56:	bf88      	it	hi
 8005d58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d5c:	468b      	mov	fp, r1
 8005d5e:	f04f 0500 	mov.w	r5, #0
 8005d62:	bf8c      	ite	hi
 8005d64:	608b      	strhi	r3, [r1, #8]
 8005d66:	9302      	strls	r3, [sp, #8]
 8005d68:	680b      	ldr	r3, [r1, #0]
 8005d6a:	4680      	mov	r8, r0
 8005d6c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d70:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d74:	460c      	mov	r4, r1
 8005d76:	465e      	mov	r6, fp
 8005d78:	46aa      	mov	sl, r5
 8005d7a:	46a9      	mov	r9, r5
 8005d7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d80:	9501      	str	r5, [sp, #4]
 8005d82:	68a2      	ldr	r2, [r4, #8]
 8005d84:	b152      	cbz	r2, 8005d9c <_scanf_float+0x64>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b4e      	cmp	r3, #78	; 0x4e
 8005d8c:	d864      	bhi.n	8005e58 <_scanf_float+0x120>
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d83c      	bhi.n	8005e0c <_scanf_float+0xd4>
 8005d92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d96:	b2c8      	uxtb	r0, r1
 8005d98:	280e      	cmp	r0, #14
 8005d9a:	d93a      	bls.n	8005e12 <_scanf_float+0xda>
 8005d9c:	f1b9 0f00 	cmp.w	r9, #0
 8005da0:	d003      	beq.n	8005daa <_scanf_float+0x72>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dae:	f1ba 0f01 	cmp.w	sl, #1
 8005db2:	f200 8113 	bhi.w	8005fdc <_scanf_float+0x2a4>
 8005db6:	455e      	cmp	r6, fp
 8005db8:	f200 8105 	bhi.w	8005fc6 <_scanf_float+0x28e>
 8005dbc:	2501      	movs	r5, #1
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	b007      	add	sp, #28
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005dca:	2a0d      	cmp	r2, #13
 8005dcc:	d8e6      	bhi.n	8005d9c <_scanf_float+0x64>
 8005dce:	a101      	add	r1, pc, #4	; (adr r1, 8005dd4 <_scanf_float+0x9c>)
 8005dd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005dd4:	08005f13 	.word	0x08005f13
 8005dd8:	08005d9d 	.word	0x08005d9d
 8005ddc:	08005d9d 	.word	0x08005d9d
 8005de0:	08005d9d 	.word	0x08005d9d
 8005de4:	08005f73 	.word	0x08005f73
 8005de8:	08005f4b 	.word	0x08005f4b
 8005dec:	08005d9d 	.word	0x08005d9d
 8005df0:	08005d9d 	.word	0x08005d9d
 8005df4:	08005f21 	.word	0x08005f21
 8005df8:	08005d9d 	.word	0x08005d9d
 8005dfc:	08005d9d 	.word	0x08005d9d
 8005e00:	08005d9d 	.word	0x08005d9d
 8005e04:	08005d9d 	.word	0x08005d9d
 8005e08:	08005ed9 	.word	0x08005ed9
 8005e0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e10:	e7db      	b.n	8005dca <_scanf_float+0x92>
 8005e12:	290e      	cmp	r1, #14
 8005e14:	d8c2      	bhi.n	8005d9c <_scanf_float+0x64>
 8005e16:	a001      	add	r0, pc, #4	; (adr r0, 8005e1c <_scanf_float+0xe4>)
 8005e18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e1c:	08005ecb 	.word	0x08005ecb
 8005e20:	08005d9d 	.word	0x08005d9d
 8005e24:	08005ecb 	.word	0x08005ecb
 8005e28:	08005f5f 	.word	0x08005f5f
 8005e2c:	08005d9d 	.word	0x08005d9d
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005eb5 	.word	0x08005eb5
 8005e38:	08005eb5 	.word	0x08005eb5
 8005e3c:	08005eb5 	.word	0x08005eb5
 8005e40:	08005eb5 	.word	0x08005eb5
 8005e44:	08005eb5 	.word	0x08005eb5
 8005e48:	08005eb5 	.word	0x08005eb5
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	08005eb5 	.word	0x08005eb5
 8005e58:	2b6e      	cmp	r3, #110	; 0x6e
 8005e5a:	d809      	bhi.n	8005e70 <_scanf_float+0x138>
 8005e5c:	2b60      	cmp	r3, #96	; 0x60
 8005e5e:	d8b2      	bhi.n	8005dc6 <_scanf_float+0x8e>
 8005e60:	2b54      	cmp	r3, #84	; 0x54
 8005e62:	d077      	beq.n	8005f54 <_scanf_float+0x21c>
 8005e64:	2b59      	cmp	r3, #89	; 0x59
 8005e66:	d199      	bne.n	8005d9c <_scanf_float+0x64>
 8005e68:	2d07      	cmp	r5, #7
 8005e6a:	d197      	bne.n	8005d9c <_scanf_float+0x64>
 8005e6c:	2508      	movs	r5, #8
 8005e6e:	e029      	b.n	8005ec4 <_scanf_float+0x18c>
 8005e70:	2b74      	cmp	r3, #116	; 0x74
 8005e72:	d06f      	beq.n	8005f54 <_scanf_float+0x21c>
 8005e74:	2b79      	cmp	r3, #121	; 0x79
 8005e76:	e7f6      	b.n	8005e66 <_scanf_float+0x12e>
 8005e78:	6821      	ldr	r1, [r4, #0]
 8005e7a:	05c8      	lsls	r0, r1, #23
 8005e7c:	d51a      	bpl.n	8005eb4 <_scanf_float+0x17c>
 8005e7e:	9b02      	ldr	r3, [sp, #8]
 8005e80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e84:	6021      	str	r1, [r4, #0]
 8005e86:	f109 0901 	add.w	r9, r9, #1
 8005e8a:	b11b      	cbz	r3, 8005e94 <_scanf_float+0x15c>
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	3201      	adds	r2, #1
 8005e90:	9302      	str	r3, [sp, #8]
 8005e92:	60a2      	str	r2, [r4, #8]
 8005e94:	68a3      	ldr	r3, [r4, #8]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	60a3      	str	r3, [r4, #8]
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	f340 8084 	ble.w	8005fb4 <_scanf_float+0x27c>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	e766      	b.n	8005d82 <_scanf_float+0x4a>
 8005eb4:	eb1a 0f05 	cmn.w	sl, r5
 8005eb8:	f47f af70 	bne.w	8005d9c <_scanf_float+0x64>
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005ec2:	6022      	str	r2, [r4, #0]
 8005ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8005ec8:	e7e4      	b.n	8005e94 <_scanf_float+0x15c>
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	0610      	lsls	r0, r2, #24
 8005ece:	f57f af65 	bpl.w	8005d9c <_scanf_float+0x64>
 8005ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed6:	e7f4      	b.n	8005ec2 <_scanf_float+0x18a>
 8005ed8:	f1ba 0f00 	cmp.w	sl, #0
 8005edc:	d10e      	bne.n	8005efc <_scanf_float+0x1c4>
 8005ede:	f1b9 0f00 	cmp.w	r9, #0
 8005ee2:	d10e      	bne.n	8005f02 <_scanf_float+0x1ca>
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005eea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005eee:	d108      	bne.n	8005f02 <_scanf_float+0x1ca>
 8005ef0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ef4:	f04f 0a01 	mov.w	sl, #1
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	e7e3      	b.n	8005ec4 <_scanf_float+0x18c>
 8005efc:	f1ba 0f02 	cmp.w	sl, #2
 8005f00:	d055      	beq.n	8005fae <_scanf_float+0x276>
 8005f02:	2d01      	cmp	r5, #1
 8005f04:	d002      	beq.n	8005f0c <_scanf_float+0x1d4>
 8005f06:	2d04      	cmp	r5, #4
 8005f08:	f47f af48 	bne.w	8005d9c <_scanf_float+0x64>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	b2ed      	uxtb	r5, r5
 8005f10:	e7d8      	b.n	8005ec4 <_scanf_float+0x18c>
 8005f12:	f1ba 0f01 	cmp.w	sl, #1
 8005f16:	f47f af41 	bne.w	8005d9c <_scanf_float+0x64>
 8005f1a:	f04f 0a02 	mov.w	sl, #2
 8005f1e:	e7d1      	b.n	8005ec4 <_scanf_float+0x18c>
 8005f20:	b97d      	cbnz	r5, 8005f42 <_scanf_float+0x20a>
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	f47f af3c 	bne.w	8005da2 <_scanf_float+0x6a>
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f34:	f47f af39 	bne.w	8005daa <_scanf_float+0x72>
 8005f38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f3c:	2501      	movs	r5, #1
 8005f3e:	6022      	str	r2, [r4, #0]
 8005f40:	e7c0      	b.n	8005ec4 <_scanf_float+0x18c>
 8005f42:	2d03      	cmp	r5, #3
 8005f44:	d0e2      	beq.n	8005f0c <_scanf_float+0x1d4>
 8005f46:	2d05      	cmp	r5, #5
 8005f48:	e7de      	b.n	8005f08 <_scanf_float+0x1d0>
 8005f4a:	2d02      	cmp	r5, #2
 8005f4c:	f47f af26 	bne.w	8005d9c <_scanf_float+0x64>
 8005f50:	2503      	movs	r5, #3
 8005f52:	e7b7      	b.n	8005ec4 <_scanf_float+0x18c>
 8005f54:	2d06      	cmp	r5, #6
 8005f56:	f47f af21 	bne.w	8005d9c <_scanf_float+0x64>
 8005f5a:	2507      	movs	r5, #7
 8005f5c:	e7b2      	b.n	8005ec4 <_scanf_float+0x18c>
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	0591      	lsls	r1, r2, #22
 8005f62:	f57f af1b 	bpl.w	8005d9c <_scanf_float+0x64>
 8005f66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f6a:	6022      	str	r2, [r4, #0]
 8005f6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f70:	e7a8      	b.n	8005ec4 <_scanf_float+0x18c>
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f7c:	d006      	beq.n	8005f8c <_scanf_float+0x254>
 8005f7e:	0550      	lsls	r0, r2, #21
 8005f80:	f57f af0c 	bpl.w	8005d9c <_scanf_float+0x64>
 8005f84:	f1b9 0f00 	cmp.w	r9, #0
 8005f88:	f43f af0f 	beq.w	8005daa <_scanf_float+0x72>
 8005f8c:	0591      	lsls	r1, r2, #22
 8005f8e:	bf58      	it	pl
 8005f90:	9901      	ldrpl	r1, [sp, #4]
 8005f92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f96:	bf58      	it	pl
 8005f98:	eba9 0101 	subpl.w	r1, r9, r1
 8005f9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005fa0:	f04f 0900 	mov.w	r9, #0
 8005fa4:	bf58      	it	pl
 8005fa6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005faa:	6022      	str	r2, [r4, #0]
 8005fac:	e78a      	b.n	8005ec4 <_scanf_float+0x18c>
 8005fae:	f04f 0a03 	mov.w	sl, #3
 8005fb2:	e787      	b.n	8005ec4 <_scanf_float+0x18c>
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fbc:	4798      	blx	r3
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f43f aedf 	beq.w	8005d82 <_scanf_float+0x4a>
 8005fc4:	e6ea      	b.n	8005d9c <_scanf_float+0x64>
 8005fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fca:	463a      	mov	r2, r7
 8005fcc:	4640      	mov	r0, r8
 8005fce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fd2:	4798      	blx	r3
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	e6ec      	b.n	8005db6 <_scanf_float+0x7e>
 8005fdc:	1e6b      	subs	r3, r5, #1
 8005fde:	2b06      	cmp	r3, #6
 8005fe0:	d825      	bhi.n	800602e <_scanf_float+0x2f6>
 8005fe2:	2d02      	cmp	r5, #2
 8005fe4:	d836      	bhi.n	8006054 <_scanf_float+0x31c>
 8005fe6:	455e      	cmp	r6, fp
 8005fe8:	f67f aee8 	bls.w	8005dbc <_scanf_float+0x84>
 8005fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff0:	463a      	mov	r2, r7
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ff8:	4798      	blx	r3
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	6123      	str	r3, [r4, #16]
 8006000:	e7f1      	b.n	8005fe6 <_scanf_float+0x2ae>
 8006002:	9802      	ldr	r0, [sp, #8]
 8006004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006008:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800600c:	463a      	mov	r2, r7
 800600e:	9002      	str	r0, [sp, #8]
 8006010:	4640      	mov	r0, r8
 8006012:	4798      	blx	r3
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	3b01      	subs	r3, #1
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800601e:	fa5f fa8a 	uxtb.w	sl, sl
 8006022:	f1ba 0f02 	cmp.w	sl, #2
 8006026:	d1ec      	bne.n	8006002 <_scanf_float+0x2ca>
 8006028:	3d03      	subs	r5, #3
 800602a:	b2ed      	uxtb	r5, r5
 800602c:	1b76      	subs	r6, r6, r5
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	05da      	lsls	r2, r3, #23
 8006032:	d52f      	bpl.n	8006094 <_scanf_float+0x35c>
 8006034:	055b      	lsls	r3, r3, #21
 8006036:	d510      	bpl.n	800605a <_scanf_float+0x322>
 8006038:	455e      	cmp	r6, fp
 800603a:	f67f aebf 	bls.w	8005dbc <_scanf_float+0x84>
 800603e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006042:	463a      	mov	r2, r7
 8006044:	4640      	mov	r0, r8
 8006046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800604a:	4798      	blx	r3
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	3b01      	subs	r3, #1
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	e7f1      	b.n	8006038 <_scanf_float+0x300>
 8006054:	46aa      	mov	sl, r5
 8006056:	9602      	str	r6, [sp, #8]
 8006058:	e7df      	b.n	800601a <_scanf_float+0x2e2>
 800605a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	2965      	cmp	r1, #101	; 0x65
 8006062:	f103 33ff 	add.w	r3, r3, #4294967295
 8006066:	f106 35ff 	add.w	r5, r6, #4294967295
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	d00c      	beq.n	8006088 <_scanf_float+0x350>
 800606e:	2945      	cmp	r1, #69	; 0x45
 8006070:	d00a      	beq.n	8006088 <_scanf_float+0x350>
 8006072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006076:	463a      	mov	r2, r7
 8006078:	4640      	mov	r0, r8
 800607a:	4798      	blx	r3
 800607c:	6923      	ldr	r3, [r4, #16]
 800607e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006082:	3b01      	subs	r3, #1
 8006084:	1eb5      	subs	r5, r6, #2
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	463a      	mov	r2, r7
 800608a:	4640      	mov	r0, r8
 800608c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006090:	4798      	blx	r3
 8006092:	462e      	mov	r6, r5
 8006094:	6825      	ldr	r5, [r4, #0]
 8006096:	f015 0510 	ands.w	r5, r5, #16
 800609a:	d155      	bne.n	8006148 <_scanf_float+0x410>
 800609c:	7035      	strb	r5, [r6, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d11d      	bne.n	80060e6 <_scanf_float+0x3ae>
 80060aa:	9b01      	ldr	r3, [sp, #4]
 80060ac:	454b      	cmp	r3, r9
 80060ae:	eba3 0209 	sub.w	r2, r3, r9
 80060b2:	d125      	bne.n	8006100 <_scanf_float+0x3c8>
 80060b4:	2200      	movs	r2, #0
 80060b6:	4659      	mov	r1, fp
 80060b8:	4640      	mov	r0, r8
 80060ba:	f002 fc21 	bl	8008900 <_strtod_r>
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	f8d4 c000 	ldr.w	ip, [r4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f01c 0f02 	tst.w	ip, #2
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	f103 0204 	add.w	r2, r3, #4
 80060d2:	d020      	beq.n	8006116 <_scanf_float+0x3de>
 80060d4:	9903      	ldr	r1, [sp, #12]
 80060d6:	600a      	str	r2, [r1, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	e9c3 6700 	strd	r6, r7, [r3]
 80060de:	68e3      	ldr	r3, [r4, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60e3      	str	r3, [r4, #12]
 80060e4:	e66b      	b.n	8005dbe <_scanf_float+0x86>
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0e3      	beq.n	80060b4 <_scanf_float+0x37c>
 80060ec:	9905      	ldr	r1, [sp, #20]
 80060ee:	230a      	movs	r3, #10
 80060f0:	462a      	mov	r2, r5
 80060f2:	4640      	mov	r0, r8
 80060f4:	3101      	adds	r1, #1
 80060f6:	f002 fc87 	bl	8008a08 <_strtol_r>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	9e05      	ldr	r6, [sp, #20]
 80060fe:	1ac2      	subs	r2, r0, r3
 8006100:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006104:	429e      	cmp	r6, r3
 8006106:	bf28      	it	cs
 8006108:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800610c:	4630      	mov	r0, r6
 800610e:	490f      	ldr	r1, [pc, #60]	; (800614c <_scanf_float+0x414>)
 8006110:	f000 f8e2 	bl	80062d8 <siprintf>
 8006114:	e7ce      	b.n	80060b4 <_scanf_float+0x37c>
 8006116:	f01c 0f04 	tst.w	ip, #4
 800611a:	d1db      	bne.n	80060d4 <_scanf_float+0x39c>
 800611c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006120:	f8cc 2000 	str.w	r2, [ip]
 8006124:	f8d3 8000 	ldr.w	r8, [r3]
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	f7fa fc86 	bl	8000a3c <__aeabi_dcmpun>
 8006130:	b128      	cbz	r0, 800613e <_scanf_float+0x406>
 8006132:	4807      	ldr	r0, [pc, #28]	; (8006150 <_scanf_float+0x418>)
 8006134:	f000 f9c2 	bl	80064bc <nanf>
 8006138:	f8c8 0000 	str.w	r0, [r8]
 800613c:	e7cf      	b.n	80060de <_scanf_float+0x3a6>
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa fcd9 	bl	8000af8 <__aeabi_d2f>
 8006146:	e7f7      	b.n	8006138 <_scanf_float+0x400>
 8006148:	2500      	movs	r5, #0
 800614a:	e638      	b.n	8005dbe <_scanf_float+0x86>
 800614c:	08009d34 	.word	0x08009d34
 8006150:	0800a0c5 	.word	0x0800a0c5

08006154 <std>:
 8006154:	2300      	movs	r3, #0
 8006156:	b510      	push	{r4, lr}
 8006158:	4604      	mov	r4, r0
 800615a:	e9c0 3300 	strd	r3, r3, [r0]
 800615e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006162:	6083      	str	r3, [r0, #8]
 8006164:	8181      	strh	r1, [r0, #12]
 8006166:	6643      	str	r3, [r0, #100]	; 0x64
 8006168:	81c2      	strh	r2, [r0, #14]
 800616a:	6183      	str	r3, [r0, #24]
 800616c:	4619      	mov	r1, r3
 800616e:	2208      	movs	r2, #8
 8006170:	305c      	adds	r0, #92	; 0x5c
 8006172:	f000 f914 	bl	800639e <memset>
 8006176:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <std+0x58>)
 8006178:	6224      	str	r4, [r4, #32]
 800617a:	6263      	str	r3, [r4, #36]	; 0x24
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <std+0x5c>)
 800617e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <std+0x60>)
 8006182:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <std+0x64>)
 8006186:	6323      	str	r3, [r4, #48]	; 0x30
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <std+0x68>)
 800618a:	429c      	cmp	r4, r3
 800618c:	d006      	beq.n	800619c <std+0x48>
 800618e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006192:	4294      	cmp	r4, r2
 8006194:	d002      	beq.n	800619c <std+0x48>
 8006196:	33d0      	adds	r3, #208	; 0xd0
 8006198:	429c      	cmp	r4, r3
 800619a:	d105      	bne.n	80061a8 <std+0x54>
 800619c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a4:	f000 b978 	b.w	8006498 <__retarget_lock_init_recursive>
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	08006319 	.word	0x08006319
 80061b0:	0800633b 	.word	0x0800633b
 80061b4:	08006373 	.word	0x08006373
 80061b8:	08006397 	.word	0x08006397
 80061bc:	20000458 	.word	0x20000458

080061c0 <stdio_exit_handler>:
 80061c0:	4a02      	ldr	r2, [pc, #8]	; (80061cc <stdio_exit_handler+0xc>)
 80061c2:	4903      	ldr	r1, [pc, #12]	; (80061d0 <stdio_exit_handler+0x10>)
 80061c4:	4803      	ldr	r0, [pc, #12]	; (80061d4 <stdio_exit_handler+0x14>)
 80061c6:	f000 b869 	b.w	800629c <_fwalk_sglue>
 80061ca:	bf00      	nop
 80061cc:	2000000c 	.word	0x2000000c
 80061d0:	08008dc1 	.word	0x08008dc1
 80061d4:	20000018 	.word	0x20000018

080061d8 <cleanup_stdio>:
 80061d8:	6841      	ldr	r1, [r0, #4]
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <cleanup_stdio+0x34>)
 80061dc:	b510      	push	{r4, lr}
 80061de:	4299      	cmp	r1, r3
 80061e0:	4604      	mov	r4, r0
 80061e2:	d001      	beq.n	80061e8 <cleanup_stdio+0x10>
 80061e4:	f002 fdec 	bl	8008dc0 <_fflush_r>
 80061e8:	68a1      	ldr	r1, [r4, #8]
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <cleanup_stdio+0x38>)
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <cleanup_stdio+0x1e>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f002 fde5 	bl	8008dc0 <_fflush_r>
 80061f6:	68e1      	ldr	r1, [r4, #12]
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <cleanup_stdio+0x3c>)
 80061fa:	4299      	cmp	r1, r3
 80061fc:	d004      	beq.n	8006208 <cleanup_stdio+0x30>
 80061fe:	4620      	mov	r0, r4
 8006200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006204:	f002 bddc 	b.w	8008dc0 <_fflush_r>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	20000458 	.word	0x20000458
 8006210:	200004c0 	.word	0x200004c0
 8006214:	20000528 	.word	0x20000528

08006218 <global_stdio_init.part.0>:
 8006218:	b510      	push	{r4, lr}
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <global_stdio_init.part.0+0x30>)
 800621c:	4c0b      	ldr	r4, [pc, #44]	; (800624c <global_stdio_init.part.0+0x34>)
 800621e:	4a0c      	ldr	r2, [pc, #48]	; (8006250 <global_stdio_init.part.0+0x38>)
 8006220:	4620      	mov	r0, r4
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	2104      	movs	r1, #4
 8006226:	2200      	movs	r2, #0
 8006228:	f7ff ff94 	bl	8006154 <std>
 800622c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006230:	2201      	movs	r2, #1
 8006232:	2109      	movs	r1, #9
 8006234:	f7ff ff8e 	bl	8006154 <std>
 8006238:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800623c:	2202      	movs	r2, #2
 800623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006242:	2112      	movs	r1, #18
 8006244:	f7ff bf86 	b.w	8006154 <std>
 8006248:	20000590 	.word	0x20000590
 800624c:	20000458 	.word	0x20000458
 8006250:	080061c1 	.word	0x080061c1

08006254 <__sfp_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sfp_lock_acquire+0x8>)
 8006256:	f000 b920 	b.w	800649a <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	20000599 	.word	0x20000599

08006260 <__sfp_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sfp_lock_release+0x8>)
 8006262:	f000 b91b 	b.w	800649c <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	20000599 	.word	0x20000599

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sfp_lock_acquire>
 8006274:	6a23      	ldr	r3, [r4, #32]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sfp_lock_release>
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <__sinit+0x28>)
 8006282:	6223      	str	r3, [r4, #32]
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <__sinit+0x2c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f5      	bne.n	8006278 <__sinit+0xc>
 800628c:	f7ff ffc4 	bl	8006218 <global_stdio_init.part.0>
 8006290:	e7f2      	b.n	8006278 <__sinit+0xc>
 8006292:	bf00      	nop
 8006294:	080061d9 	.word	0x080061d9
 8006298:	20000590 	.word	0x20000590

0800629c <_fwalk_sglue>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	4607      	mov	r7, r0
 80062a2:	4688      	mov	r8, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	2600      	movs	r6, #0
 80062a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062ac:	f1b9 0901 	subs.w	r9, r9, #1
 80062b0:	d505      	bpl.n	80062be <_fwalk_sglue+0x22>
 80062b2:	6824      	ldr	r4, [r4, #0]
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	d1f7      	bne.n	80062a8 <_fwalk_sglue+0xc>
 80062b8:	4630      	mov	r0, r6
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d907      	bls.n	80062d4 <_fwalk_sglue+0x38>
 80062c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d003      	beq.n	80062d4 <_fwalk_sglue+0x38>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c0      	blx	r8
 80062d2:	4306      	orrs	r6, r0
 80062d4:	3568      	adds	r5, #104	; 0x68
 80062d6:	e7e9      	b.n	80062ac <_fwalk_sglue+0x10>

080062d8 <siprintf>:
 80062d8:	b40e      	push	{r1, r2, r3}
 80062da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062de:	b500      	push	{lr}
 80062e0:	b09c      	sub	sp, #112	; 0x70
 80062e2:	ab1d      	add	r3, sp, #116	; 0x74
 80062e4:	9002      	str	r0, [sp, #8]
 80062e6:	9006      	str	r0, [sp, #24]
 80062e8:	9107      	str	r1, [sp, #28]
 80062ea:	9104      	str	r1, [sp, #16]
 80062ec:	4808      	ldr	r0, [pc, #32]	; (8006310 <siprintf+0x38>)
 80062ee:	4909      	ldr	r1, [pc, #36]	; (8006314 <siprintf+0x3c>)
 80062f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f4:	9105      	str	r1, [sp, #20]
 80062f6:	6800      	ldr	r0, [r0, #0]
 80062f8:	a902      	add	r1, sp, #8
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	f002 fbe0 	bl	8008ac0 <_svfiprintf_r>
 8006300:	2200      	movs	r2, #0
 8006302:	9b02      	ldr	r3, [sp, #8]
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	b01c      	add	sp, #112	; 0x70
 8006308:	f85d eb04 	ldr.w	lr, [sp], #4
 800630c:	b003      	add	sp, #12
 800630e:	4770      	bx	lr
 8006310:	20000064 	.word	0x20000064
 8006314:	ffff0208 	.word	0xffff0208

08006318 <__sread>:
 8006318:	b510      	push	{r4, lr}
 800631a:	460c      	mov	r4, r1
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	f000 f86c 	bl	80063fc <_read_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	bfab      	itete	ge
 8006328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800632a:	89a3      	ldrhlt	r3, [r4, #12]
 800632c:	181b      	addge	r3, r3, r0
 800632e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006332:	bfac      	ite	ge
 8006334:	6563      	strge	r3, [r4, #84]	; 0x54
 8006336:	81a3      	strhlt	r3, [r4, #12]
 8006338:	bd10      	pop	{r4, pc}

0800633a <__swrite>:
 800633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	461f      	mov	r7, r3
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	4605      	mov	r5, r0
 8006344:	05db      	lsls	r3, r3, #23
 8006346:	460c      	mov	r4, r1
 8006348:	4616      	mov	r6, r2
 800634a:	d505      	bpl.n	8006358 <__swrite+0x1e>
 800634c:	2302      	movs	r3, #2
 800634e:	2200      	movs	r2, #0
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	f000 f840 	bl	80063d8 <_lseek_r>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	4632      	mov	r2, r6
 800635c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	4628      	mov	r0, r5
 8006364:	463b      	mov	r3, r7
 8006366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800636a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	f000 b857 	b.w	8006420 <_write_r>

08006372 <__sseek>:
 8006372:	b510      	push	{r4, lr}
 8006374:	460c      	mov	r4, r1
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 f82d 	bl	80063d8 <_lseek_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	bf15      	itete	ne
 8006384:	6560      	strne	r0, [r4, #84]	; 0x54
 8006386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800638a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800638e:	81a3      	strheq	r3, [r4, #12]
 8006390:	bf18      	it	ne
 8006392:	81a3      	strhne	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__sclose>:
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 b80d 	b.w	80063b8 <_close_r>

0800639e <memset>:
 800639e:	4603      	mov	r3, r0
 80063a0:	4402      	add	r2, r0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d100      	bne.n	80063a8 <memset+0xa>
 80063a6:	4770      	bx	lr
 80063a8:	f803 1b01 	strb.w	r1, [r3], #1
 80063ac:	e7f9      	b.n	80063a2 <memset+0x4>
	...

080063b0 <_localeconv_r>:
 80063b0:	4800      	ldr	r0, [pc, #0]	; (80063b4 <_localeconv_r+0x4>)
 80063b2:	4770      	bx	lr
 80063b4:	20000158 	.word	0x20000158

080063b8 <_close_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	2300      	movs	r3, #0
 80063bc:	4d05      	ldr	r5, [pc, #20]	; (80063d4 <_close_r+0x1c>)
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	f7fb fdbd 	bl	8001f42 <_close>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_close_r+0x1a>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_close_r+0x1a>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000594 	.word	0x20000594

080063d8 <_lseek_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	2200      	movs	r2, #0
 80063e2:	4d05      	ldr	r5, [pc, #20]	; (80063f8 <_lseek_r+0x20>)
 80063e4:	602a      	str	r2, [r5, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f7fb fdcf 	bl	8001f8a <_lseek>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_lseek_r+0x1e>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_lseek_r+0x1e>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	20000594 	.word	0x20000594

080063fc <_read_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	2200      	movs	r2, #0
 8006406:	4d05      	ldr	r5, [pc, #20]	; (800641c <_read_r+0x20>)
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	f7fb fd60 	bl	8001ed0 <_read>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_read_r+0x1e>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_read_r+0x1e>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000594 	.word	0x20000594

08006420 <_write_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	4611      	mov	r1, r2
 8006428:	2200      	movs	r2, #0
 800642a:	4d05      	ldr	r5, [pc, #20]	; (8006440 <_write_r+0x20>)
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f7fb fd6b 	bl	8001f0a <_write>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_write_r+0x1e>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_write_r+0x1e>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20000594 	.word	0x20000594

08006444 <__errno>:
 8006444:	4b01      	ldr	r3, [pc, #4]	; (800644c <__errno+0x8>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000064 	.word	0x20000064

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	2600      	movs	r6, #0
 8006454:	4d0c      	ldr	r5, [pc, #48]	; (8006488 <__libc_init_array+0x38>)
 8006456:	4c0d      	ldr	r4, [pc, #52]	; (800648c <__libc_init_array+0x3c>)
 8006458:	1b64      	subs	r4, r4, r5
 800645a:	10a4      	asrs	r4, r4, #2
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	f003 fbc0 	bl	8009be4 <_init>
 8006464:	2600      	movs	r6, #0
 8006466:	4d0a      	ldr	r5, [pc, #40]	; (8006490 <__libc_init_array+0x40>)
 8006468:	4c0a      	ldr	r4, [pc, #40]	; (8006494 <__libc_init_array+0x44>)
 800646a:	1b64      	subs	r4, r4, r5
 800646c:	10a4      	asrs	r4, r4, #2
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f855 3b04 	ldr.w	r3, [r5], #4
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	0800a130 	.word	0x0800a130
 800648c:	0800a130 	.word	0x0800a130
 8006490:	0800a130 	.word	0x0800a130
 8006494:	0800a134 	.word	0x0800a134

08006498 <__retarget_lock_init_recursive>:
 8006498:	4770      	bx	lr

0800649a <__retarget_lock_acquire_recursive>:
 800649a:	4770      	bx	lr

0800649c <__retarget_lock_release_recursive>:
 800649c:	4770      	bx	lr

0800649e <memchr>:
 800649e:	4603      	mov	r3, r0
 80064a0:	b510      	push	{r4, lr}
 80064a2:	b2c9      	uxtb	r1, r1
 80064a4:	4402      	add	r2, r0
 80064a6:	4293      	cmp	r3, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	d101      	bne.n	80064b0 <memchr+0x12>
 80064ac:	2000      	movs	r0, #0
 80064ae:	e003      	b.n	80064b8 <memchr+0x1a>
 80064b0:	7804      	ldrb	r4, [r0, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	428c      	cmp	r4, r1
 80064b6:	d1f6      	bne.n	80064a6 <memchr+0x8>
 80064b8:	bd10      	pop	{r4, pc}
	...

080064bc <nanf>:
 80064bc:	4800      	ldr	r0, [pc, #0]	; (80064c0 <nanf+0x4>)
 80064be:	4770      	bx	lr
 80064c0:	7fc00000 	.word	0x7fc00000

080064c4 <quorem>:
 80064c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	6903      	ldr	r3, [r0, #16]
 80064ca:	690c      	ldr	r4, [r1, #16]
 80064cc:	4607      	mov	r7, r0
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	db7f      	blt.n	80065d2 <quorem+0x10e>
 80064d2:	3c01      	subs	r4, #1
 80064d4:	f100 0514 	add.w	r5, r0, #20
 80064d8:	f101 0814 	add.w	r8, r1, #20
 80064dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ea:	3301      	adds	r3, #1
 80064ec:	429a      	cmp	r2, r3
 80064ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80064f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064fa:	d331      	bcc.n	8006560 <quorem+0x9c>
 80064fc:	f04f 0e00 	mov.w	lr, #0
 8006500:	4640      	mov	r0, r8
 8006502:	46ac      	mov	ip, r5
 8006504:	46f2      	mov	sl, lr
 8006506:	f850 2b04 	ldr.w	r2, [r0], #4
 800650a:	b293      	uxth	r3, r2
 800650c:	fb06 e303 	mla	r3, r6, r3, lr
 8006510:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006514:	0c1a      	lsrs	r2, r3, #16
 8006516:	b29b      	uxth	r3, r3
 8006518:	fb06 220e 	mla	r2, r6, lr, r2
 800651c:	ebaa 0303 	sub.w	r3, sl, r3
 8006520:	f8dc a000 	ldr.w	sl, [ip]
 8006524:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006528:	fa1f fa8a 	uxth.w	sl, sl
 800652c:	4453      	add	r3, sl
 800652e:	f8dc a000 	ldr.w	sl, [ip]
 8006532:	b292      	uxth	r2, r2
 8006534:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800653c:	b29b      	uxth	r3, r3
 800653e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006542:	4581      	cmp	r9, r0
 8006544:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006548:	f84c 3b04 	str.w	r3, [ip], #4
 800654c:	d2db      	bcs.n	8006506 <quorem+0x42>
 800654e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006552:	b92b      	cbnz	r3, 8006560 <quorem+0x9c>
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	3b04      	subs	r3, #4
 8006558:	429d      	cmp	r5, r3
 800655a:	461a      	mov	r2, r3
 800655c:	d32d      	bcc.n	80065ba <quorem+0xf6>
 800655e:	613c      	str	r4, [r7, #16]
 8006560:	4638      	mov	r0, r7
 8006562:	f001 f9dd 	bl	8007920 <__mcmp>
 8006566:	2800      	cmp	r0, #0
 8006568:	db23      	blt.n	80065b2 <quorem+0xee>
 800656a:	4629      	mov	r1, r5
 800656c:	2000      	movs	r0, #0
 800656e:	3601      	adds	r6, #1
 8006570:	f858 2b04 	ldr.w	r2, [r8], #4
 8006574:	f8d1 c000 	ldr.w	ip, [r1]
 8006578:	b293      	uxth	r3, r2
 800657a:	1ac3      	subs	r3, r0, r3
 800657c:	0c12      	lsrs	r2, r2, #16
 800657e:	fa1f f08c 	uxth.w	r0, ip
 8006582:	4403      	add	r3, r0
 8006584:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800658c:	b29b      	uxth	r3, r3
 800658e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006592:	45c1      	cmp	r9, r8
 8006594:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006598:	f841 3b04 	str.w	r3, [r1], #4
 800659c:	d2e8      	bcs.n	8006570 <quorem+0xac>
 800659e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065a6:	b922      	cbnz	r2, 80065b2 <quorem+0xee>
 80065a8:	3b04      	subs	r3, #4
 80065aa:	429d      	cmp	r5, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	d30a      	bcc.n	80065c6 <quorem+0x102>
 80065b0:	613c      	str	r4, [r7, #16]
 80065b2:	4630      	mov	r0, r6
 80065b4:	b003      	add	sp, #12
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	3b04      	subs	r3, #4
 80065be:	2a00      	cmp	r2, #0
 80065c0:	d1cd      	bne.n	800655e <quorem+0x9a>
 80065c2:	3c01      	subs	r4, #1
 80065c4:	e7c8      	b.n	8006558 <quorem+0x94>
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	d1f0      	bne.n	80065b0 <quorem+0xec>
 80065ce:	3c01      	subs	r4, #1
 80065d0:	e7eb      	b.n	80065aa <quorem+0xe6>
 80065d2:	2000      	movs	r0, #0
 80065d4:	e7ee      	b.n	80065b4 <quorem+0xf0>
	...

080065d8 <_dtoa_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	4616      	mov	r6, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	69c4      	ldr	r4, [r0, #28]
 80065e2:	b099      	sub	sp, #100	; 0x64
 80065e4:	4605      	mov	r5, r0
 80065e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065ee:	b974      	cbnz	r4, 800660e <_dtoa_r+0x36>
 80065f0:	2010      	movs	r0, #16
 80065f2:	f000 fe1d 	bl	8007230 <malloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	61e8      	str	r0, [r5, #28]
 80065fa:	b920      	cbnz	r0, 8006606 <_dtoa_r+0x2e>
 80065fc:	21ef      	movs	r1, #239	; 0xef
 80065fe:	4bac      	ldr	r3, [pc, #688]	; (80068b0 <_dtoa_r+0x2d8>)
 8006600:	48ac      	ldr	r0, [pc, #688]	; (80068b4 <_dtoa_r+0x2dc>)
 8006602:	f002 fc55 	bl	8008eb0 <__assert_func>
 8006606:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800660a:	6004      	str	r4, [r0, #0]
 800660c:	60c4      	str	r4, [r0, #12]
 800660e:	69eb      	ldr	r3, [r5, #28]
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	b151      	cbz	r1, 800662a <_dtoa_r+0x52>
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	2301      	movs	r3, #1
 8006618:	4093      	lsls	r3, r2
 800661a:	604a      	str	r2, [r1, #4]
 800661c:	608b      	str	r3, [r1, #8]
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fefa 	bl	8007418 <_Bfree>
 8006624:	2200      	movs	r2, #0
 8006626:	69eb      	ldr	r3, [r5, #28]
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	1e3b      	subs	r3, r7, #0
 800662c:	bfaf      	iteee	ge
 800662e:	2300      	movge	r3, #0
 8006630:	2201      	movlt	r2, #1
 8006632:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006636:	9305      	strlt	r3, [sp, #20]
 8006638:	bfa8      	it	ge
 800663a:	f8c8 3000 	strge.w	r3, [r8]
 800663e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006642:	4b9d      	ldr	r3, [pc, #628]	; (80068b8 <_dtoa_r+0x2e0>)
 8006644:	bfb8      	it	lt
 8006646:	f8c8 2000 	strlt.w	r2, [r8]
 800664a:	ea33 0309 	bics.w	r3, r3, r9
 800664e:	d119      	bne.n	8006684 <_dtoa_r+0xac>
 8006650:	f242 730f 	movw	r3, #9999	; 0x270f
 8006654:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800665c:	4333      	orrs	r3, r6
 800665e:	f000 8589 	beq.w	8007174 <_dtoa_r+0xb9c>
 8006662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006664:	b953      	cbnz	r3, 800667c <_dtoa_r+0xa4>
 8006666:	4b95      	ldr	r3, [pc, #596]	; (80068bc <_dtoa_r+0x2e4>)
 8006668:	e023      	b.n	80066b2 <_dtoa_r+0xda>
 800666a:	4b95      	ldr	r3, [pc, #596]	; (80068c0 <_dtoa_r+0x2e8>)
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	3308      	adds	r3, #8
 8006670:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	9803      	ldr	r0, [sp, #12]
 8006676:	b019      	add	sp, #100	; 0x64
 8006678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667c:	4b8f      	ldr	r3, [pc, #572]	; (80068bc <_dtoa_r+0x2e4>)
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	3303      	adds	r3, #3
 8006682:	e7f5      	b.n	8006670 <_dtoa_r+0x98>
 8006684:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006688:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800668c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	f7fa f9a0 	bl	80009d8 <__aeabi_dcmpeq>
 8006698:	4680      	mov	r8, r0
 800669a:	b160      	cbz	r0, 80066b6 <_dtoa_r+0xde>
 800669c:	2301      	movs	r3, #1
 800669e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8562 	beq.w	800716e <_dtoa_r+0xb96>
 80066aa:	4b86      	ldr	r3, [pc, #536]	; (80068c4 <_dtoa_r+0x2ec>)
 80066ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	e7de      	b.n	8006674 <_dtoa_r+0x9c>
 80066b6:	ab16      	add	r3, sp, #88	; 0x58
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	ab17      	add	r3, sp, #92	; 0x5c
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4628      	mov	r0, r5
 80066c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066c4:	f001 fa3c 	bl	8007b40 <__d2b>
 80066c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80066cc:	4682      	mov	sl, r0
 80066ce:	2c00      	cmp	r4, #0
 80066d0:	d07e      	beq.n	80067d0 <_dtoa_r+0x1f8>
 80066d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80066dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066ec:	4619      	mov	r1, r3
 80066ee:	2200      	movs	r2, #0
 80066f0:	4b75      	ldr	r3, [pc, #468]	; (80068c8 <_dtoa_r+0x2f0>)
 80066f2:	f7f9 fd51 	bl	8000198 <__aeabi_dsub>
 80066f6:	a368      	add	r3, pc, #416	; (adr r3, 8006898 <_dtoa_r+0x2c0>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f7f9 ff04 	bl	8000508 <__aeabi_dmul>
 8006700:	a367      	add	r3, pc, #412	; (adr r3, 80068a0 <_dtoa_r+0x2c8>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fd49 	bl	800019c <__adddf3>
 800670a:	4606      	mov	r6, r0
 800670c:	4620      	mov	r0, r4
 800670e:	460f      	mov	r7, r1
 8006710:	f7f9 fe90 	bl	8000434 <__aeabi_i2d>
 8006714:	a364      	add	r3, pc, #400	; (adr r3, 80068a8 <_dtoa_r+0x2d0>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fef5 	bl	8000508 <__aeabi_dmul>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4630      	mov	r0, r6
 8006724:	4639      	mov	r1, r7
 8006726:	f7f9 fd39 	bl	800019c <__adddf3>
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	f7fa f99b 	bl	8000a68 <__aeabi_d2iz>
 8006732:	2200      	movs	r2, #0
 8006734:	4683      	mov	fp, r0
 8006736:	2300      	movs	r3, #0
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7fa f956 	bl	80009ec <__aeabi_dcmplt>
 8006740:	b148      	cbz	r0, 8006756 <_dtoa_r+0x17e>
 8006742:	4658      	mov	r0, fp
 8006744:	f7f9 fe76 	bl	8000434 <__aeabi_i2d>
 8006748:	4632      	mov	r2, r6
 800674a:	463b      	mov	r3, r7
 800674c:	f7fa f944 	bl	80009d8 <__aeabi_dcmpeq>
 8006750:	b908      	cbnz	r0, 8006756 <_dtoa_r+0x17e>
 8006752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006756:	f1bb 0f16 	cmp.w	fp, #22
 800675a:	d857      	bhi.n	800680c <_dtoa_r+0x234>
 800675c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006760:	4b5a      	ldr	r3, [pc, #360]	; (80068cc <_dtoa_r+0x2f4>)
 8006762:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7fa f93f 	bl	80009ec <__aeabi_dcmplt>
 800676e:	2800      	cmp	r0, #0
 8006770:	d04e      	beq.n	8006810 <_dtoa_r+0x238>
 8006772:	2300      	movs	r3, #0
 8006774:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006778:	930f      	str	r3, [sp, #60]	; 0x3c
 800677a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800677c:	1b1b      	subs	r3, r3, r4
 800677e:	1e5a      	subs	r2, r3, #1
 8006780:	bf46      	itte	mi
 8006782:	f1c3 0901 	rsbmi	r9, r3, #1
 8006786:	2300      	movmi	r3, #0
 8006788:	f04f 0900 	movpl.w	r9, #0
 800678c:	9209      	str	r2, [sp, #36]	; 0x24
 800678e:	bf48      	it	mi
 8006790:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006792:	f1bb 0f00 	cmp.w	fp, #0
 8006796:	db3d      	blt.n	8006814 <_dtoa_r+0x23c>
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800679e:	445b      	add	r3, fp
 80067a0:	9309      	str	r3, [sp, #36]	; 0x24
 80067a2:	2300      	movs	r3, #0
 80067a4:	930a      	str	r3, [sp, #40]	; 0x28
 80067a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067a8:	2b09      	cmp	r3, #9
 80067aa:	d867      	bhi.n	800687c <_dtoa_r+0x2a4>
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	bfc4      	itt	gt
 80067b0:	3b04      	subgt	r3, #4
 80067b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80067b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b6:	bfc8      	it	gt
 80067b8:	2400      	movgt	r4, #0
 80067ba:	f1a3 0302 	sub.w	r3, r3, #2
 80067be:	bfd8      	it	le
 80067c0:	2401      	movle	r4, #1
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	f200 8086 	bhi.w	80068d4 <_dtoa_r+0x2fc>
 80067c8:	e8df f003 	tbb	[pc, r3]
 80067cc:	5637392c 	.word	0x5637392c
 80067d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80067d4:	441c      	add	r4, r3
 80067d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80067da:	2b20      	cmp	r3, #32
 80067dc:	bfc1      	itttt	gt
 80067de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067e2:	fa09 f903 	lslgt.w	r9, r9, r3
 80067e6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80067ea:	fa26 f303 	lsrgt.w	r3, r6, r3
 80067ee:	bfd6      	itet	le
 80067f0:	f1c3 0320 	rsble	r3, r3, #32
 80067f4:	ea49 0003 	orrgt.w	r0, r9, r3
 80067f8:	fa06 f003 	lslle.w	r0, r6, r3
 80067fc:	f7f9 fe0a 	bl	8000414 <__aeabi_ui2d>
 8006800:	2201      	movs	r2, #1
 8006802:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006806:	3c01      	subs	r4, #1
 8006808:	9213      	str	r2, [sp, #76]	; 0x4c
 800680a:	e76f      	b.n	80066ec <_dtoa_r+0x114>
 800680c:	2301      	movs	r3, #1
 800680e:	e7b3      	b.n	8006778 <_dtoa_r+0x1a0>
 8006810:	900f      	str	r0, [sp, #60]	; 0x3c
 8006812:	e7b2      	b.n	800677a <_dtoa_r+0x1a2>
 8006814:	f1cb 0300 	rsb	r3, fp, #0
 8006818:	930a      	str	r3, [sp, #40]	; 0x28
 800681a:	2300      	movs	r3, #0
 800681c:	eba9 090b 	sub.w	r9, r9, fp
 8006820:	930e      	str	r3, [sp, #56]	; 0x38
 8006822:	e7c0      	b.n	80067a6 <_dtoa_r+0x1ce>
 8006824:	2300      	movs	r3, #0
 8006826:	930b      	str	r3, [sp, #44]	; 0x2c
 8006828:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800682a:	2b00      	cmp	r3, #0
 800682c:	dc55      	bgt.n	80068da <_dtoa_r+0x302>
 800682e:	2301      	movs	r3, #1
 8006830:	461a      	mov	r2, r3
 8006832:	9306      	str	r3, [sp, #24]
 8006834:	9308      	str	r3, [sp, #32]
 8006836:	9223      	str	r2, [sp, #140]	; 0x8c
 8006838:	e00b      	b.n	8006852 <_dtoa_r+0x27a>
 800683a:	2301      	movs	r3, #1
 800683c:	e7f3      	b.n	8006826 <_dtoa_r+0x24e>
 800683e:	2300      	movs	r3, #0
 8006840:	930b      	str	r3, [sp, #44]	; 0x2c
 8006842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006844:	445b      	add	r3, fp
 8006846:	9306      	str	r3, [sp, #24]
 8006848:	3301      	adds	r3, #1
 800684a:	2b01      	cmp	r3, #1
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	bfb8      	it	lt
 8006850:	2301      	movlt	r3, #1
 8006852:	2100      	movs	r1, #0
 8006854:	2204      	movs	r2, #4
 8006856:	69e8      	ldr	r0, [r5, #28]
 8006858:	f102 0614 	add.w	r6, r2, #20
 800685c:	429e      	cmp	r6, r3
 800685e:	d940      	bls.n	80068e2 <_dtoa_r+0x30a>
 8006860:	6041      	str	r1, [r0, #4]
 8006862:	4628      	mov	r0, r5
 8006864:	f000 fd98 	bl	8007398 <_Balloc>
 8006868:	9003      	str	r0, [sp, #12]
 800686a:	2800      	cmp	r0, #0
 800686c:	d13c      	bne.n	80068e8 <_dtoa_r+0x310>
 800686e:	4602      	mov	r2, r0
 8006870:	f240 11af 	movw	r1, #431	; 0x1af
 8006874:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <_dtoa_r+0x2f8>)
 8006876:	e6c3      	b.n	8006600 <_dtoa_r+0x28>
 8006878:	2301      	movs	r3, #1
 800687a:	e7e1      	b.n	8006840 <_dtoa_r+0x268>
 800687c:	2401      	movs	r4, #1
 800687e:	2300      	movs	r3, #0
 8006880:	940b      	str	r4, [sp, #44]	; 0x2c
 8006882:	9322      	str	r3, [sp, #136]	; 0x88
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	2200      	movs	r2, #0
 800688a:	9306      	str	r3, [sp, #24]
 800688c:	9308      	str	r3, [sp, #32]
 800688e:	2312      	movs	r3, #18
 8006890:	e7d1      	b.n	8006836 <_dtoa_r+0x25e>
 8006892:	bf00      	nop
 8006894:	f3af 8000 	nop.w
 8006898:	636f4361 	.word	0x636f4361
 800689c:	3fd287a7 	.word	0x3fd287a7
 80068a0:	8b60c8b3 	.word	0x8b60c8b3
 80068a4:	3fc68a28 	.word	0x3fc68a28
 80068a8:	509f79fb 	.word	0x509f79fb
 80068ac:	3fd34413 	.word	0x3fd34413
 80068b0:	08009d46 	.word	0x08009d46
 80068b4:	08009d5d 	.word	0x08009d5d
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	08009d42 	.word	0x08009d42
 80068c0:	08009d39 	.word	0x08009d39
 80068c4:	08009d11 	.word	0x08009d11
 80068c8:	3ff80000 	.word	0x3ff80000
 80068cc:	08009e48 	.word	0x08009e48
 80068d0:	08009db5 	.word	0x08009db5
 80068d4:	2301      	movs	r3, #1
 80068d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068d8:	e7d4      	b.n	8006884 <_dtoa_r+0x2ac>
 80068da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068dc:	9306      	str	r3, [sp, #24]
 80068de:	9308      	str	r3, [sp, #32]
 80068e0:	e7b7      	b.n	8006852 <_dtoa_r+0x27a>
 80068e2:	3101      	adds	r1, #1
 80068e4:	0052      	lsls	r2, r2, #1
 80068e6:	e7b7      	b.n	8006858 <_dtoa_r+0x280>
 80068e8:	69eb      	ldr	r3, [r5, #28]
 80068ea:	9a03      	ldr	r2, [sp, #12]
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	9b08      	ldr	r3, [sp, #32]
 80068f0:	2b0e      	cmp	r3, #14
 80068f2:	f200 80a8 	bhi.w	8006a46 <_dtoa_r+0x46e>
 80068f6:	2c00      	cmp	r4, #0
 80068f8:	f000 80a5 	beq.w	8006a46 <_dtoa_r+0x46e>
 80068fc:	f1bb 0f00 	cmp.w	fp, #0
 8006900:	dd34      	ble.n	800696c <_dtoa_r+0x394>
 8006902:	4b9a      	ldr	r3, [pc, #616]	; (8006b6c <_dtoa_r+0x594>)
 8006904:	f00b 020f 	and.w	r2, fp, #15
 8006908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800690c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006914:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006918:	ea4f 142b 	mov.w	r4, fp, asr #4
 800691c:	d016      	beq.n	800694c <_dtoa_r+0x374>
 800691e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006922:	4b93      	ldr	r3, [pc, #588]	; (8006b70 <_dtoa_r+0x598>)
 8006924:	2703      	movs	r7, #3
 8006926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800692a:	f7f9 ff17 	bl	800075c <__aeabi_ddiv>
 800692e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006932:	f004 040f 	and.w	r4, r4, #15
 8006936:	4e8e      	ldr	r6, [pc, #568]	; (8006b70 <_dtoa_r+0x598>)
 8006938:	b954      	cbnz	r4, 8006950 <_dtoa_r+0x378>
 800693a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800693e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006942:	f7f9 ff0b 	bl	800075c <__aeabi_ddiv>
 8006946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800694a:	e029      	b.n	80069a0 <_dtoa_r+0x3c8>
 800694c:	2702      	movs	r7, #2
 800694e:	e7f2      	b.n	8006936 <_dtoa_r+0x35e>
 8006950:	07e1      	lsls	r1, r4, #31
 8006952:	d508      	bpl.n	8006966 <_dtoa_r+0x38e>
 8006954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800695c:	f7f9 fdd4 	bl	8000508 <__aeabi_dmul>
 8006960:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006964:	3701      	adds	r7, #1
 8006966:	1064      	asrs	r4, r4, #1
 8006968:	3608      	adds	r6, #8
 800696a:	e7e5      	b.n	8006938 <_dtoa_r+0x360>
 800696c:	f000 80a5 	beq.w	8006aba <_dtoa_r+0x4e2>
 8006970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006974:	f1cb 0400 	rsb	r4, fp, #0
 8006978:	4b7c      	ldr	r3, [pc, #496]	; (8006b6c <_dtoa_r+0x594>)
 800697a:	f004 020f 	and.w	r2, r4, #15
 800697e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f7f9 fdbf 	bl	8000508 <__aeabi_dmul>
 800698a:	2702      	movs	r7, #2
 800698c:	2300      	movs	r3, #0
 800698e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006992:	4e77      	ldr	r6, [pc, #476]	; (8006b70 <_dtoa_r+0x598>)
 8006994:	1124      	asrs	r4, r4, #4
 8006996:	2c00      	cmp	r4, #0
 8006998:	f040 8084 	bne.w	8006aa4 <_dtoa_r+0x4cc>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1d2      	bne.n	8006946 <_dtoa_r+0x36e>
 80069a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80069a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 8087 	beq.w	8006abe <_dtoa_r+0x4e6>
 80069b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069b4:	2200      	movs	r2, #0
 80069b6:	4b6f      	ldr	r3, [pc, #444]	; (8006b74 <_dtoa_r+0x59c>)
 80069b8:	f7fa f818 	bl	80009ec <__aeabi_dcmplt>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d07e      	beq.n	8006abe <_dtoa_r+0x4e6>
 80069c0:	9b08      	ldr	r3, [sp, #32]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d07b      	beq.n	8006abe <_dtoa_r+0x4e6>
 80069c6:	9b06      	ldr	r3, [sp, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dd38      	ble.n	8006a3e <_dtoa_r+0x466>
 80069cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069d0:	2200      	movs	r2, #0
 80069d2:	4b69      	ldr	r3, [pc, #420]	; (8006b78 <_dtoa_r+0x5a0>)
 80069d4:	f7f9 fd98 	bl	8000508 <__aeabi_dmul>
 80069d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069dc:	9c06      	ldr	r4, [sp, #24]
 80069de:	f10b 38ff 	add.w	r8, fp, #4294967295
 80069e2:	3701      	adds	r7, #1
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7f9 fd25 	bl	8000434 <__aeabi_i2d>
 80069ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ee:	f7f9 fd8b 	bl	8000508 <__aeabi_dmul>
 80069f2:	2200      	movs	r2, #0
 80069f4:	4b61      	ldr	r3, [pc, #388]	; (8006b7c <_dtoa_r+0x5a4>)
 80069f6:	f7f9 fbd1 	bl	800019c <__adddf3>
 80069fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a02:	9611      	str	r6, [sp, #68]	; 0x44
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	d15d      	bne.n	8006ac4 <_dtoa_r+0x4ec>
 8006a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <_dtoa_r+0x5a8>)
 8006a10:	f7f9 fbc2 	bl	8000198 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a1c:	4633      	mov	r3, r6
 8006a1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a20:	f7fa f802 	bl	8000a28 <__aeabi_dcmpgt>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f040 8295 	bne.w	8006f54 <_dtoa_r+0x97c>
 8006a2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a34:	f7f9 ffda 	bl	80009ec <__aeabi_dcmplt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	f040 8289 	bne.w	8006f50 <_dtoa_r+0x978>
 8006a3e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f2c0 8151 	blt.w	8006cf0 <_dtoa_r+0x718>
 8006a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8006a52:	f300 814d 	bgt.w	8006cf0 <_dtoa_r+0x718>
 8006a56:	4b45      	ldr	r3, [pc, #276]	; (8006b6c <_dtoa_r+0x594>)
 8006a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f280 80da 	bge.w	8006c20 <_dtoa_r+0x648>
 8006a6c:	9b08      	ldr	r3, [sp, #32]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f300 80d6 	bgt.w	8006c20 <_dtoa_r+0x648>
 8006a74:	f040 826b 	bne.w	8006f4e <_dtoa_r+0x976>
 8006a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4b40      	ldr	r3, [pc, #256]	; (8006b80 <_dtoa_r+0x5a8>)
 8006a80:	f7f9 fd42 	bl	8000508 <__aeabi_dmul>
 8006a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a88:	f7f9 ffc4 	bl	8000a14 <__aeabi_dcmpge>
 8006a8c:	9c08      	ldr	r4, [sp, #32]
 8006a8e:	4626      	mov	r6, r4
 8006a90:	2800      	cmp	r0, #0
 8006a92:	f040 8241 	bne.w	8006f18 <_dtoa_r+0x940>
 8006a96:	2331      	movs	r3, #49	; 0x31
 8006a98:	9f03      	ldr	r7, [sp, #12]
 8006a9a:	f10b 0b01 	add.w	fp, fp, #1
 8006a9e:	f807 3b01 	strb.w	r3, [r7], #1
 8006aa2:	e23d      	b.n	8006f20 <_dtoa_r+0x948>
 8006aa4:	07e2      	lsls	r2, r4, #31
 8006aa6:	d505      	bpl.n	8006ab4 <_dtoa_r+0x4dc>
 8006aa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006aac:	f7f9 fd2c 	bl	8000508 <__aeabi_dmul>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	3701      	adds	r7, #1
 8006ab4:	1064      	asrs	r4, r4, #1
 8006ab6:	3608      	adds	r6, #8
 8006ab8:	e76d      	b.n	8006996 <_dtoa_r+0x3be>
 8006aba:	2702      	movs	r7, #2
 8006abc:	e770      	b.n	80069a0 <_dtoa_r+0x3c8>
 8006abe:	46d8      	mov	r8, fp
 8006ac0:	9c08      	ldr	r4, [sp, #32]
 8006ac2:	e78f      	b.n	80069e4 <_dtoa_r+0x40c>
 8006ac4:	9903      	ldr	r1, [sp, #12]
 8006ac6:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <_dtoa_r+0x594>)
 8006ac8:	4421      	add	r1, r4
 8006aca:	9112      	str	r1, [sp, #72]	; 0x48
 8006acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ace:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ad2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ad6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ada:	2900      	cmp	r1, #0
 8006adc:	d054      	beq.n	8006b88 <_dtoa_r+0x5b0>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4928      	ldr	r1, [pc, #160]	; (8006b84 <_dtoa_r+0x5ac>)
 8006ae2:	f7f9 fe3b 	bl	800075c <__aeabi_ddiv>
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	4632      	mov	r2, r6
 8006aea:	f7f9 fb55 	bl	8000198 <__aeabi_dsub>
 8006aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006af2:	9f03      	ldr	r7, [sp, #12]
 8006af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af8:	f7f9 ffb6 	bl	8000a68 <__aeabi_d2iz>
 8006afc:	4604      	mov	r4, r0
 8006afe:	f7f9 fc99 	bl	8000434 <__aeabi_i2d>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b0a:	f7f9 fb45 	bl	8000198 <__aeabi_dsub>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	3430      	adds	r4, #48	; 0x30
 8006b14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b1c:	f807 4b01 	strb.w	r4, [r7], #1
 8006b20:	f7f9 ff64 	bl	80009ec <__aeabi_dcmplt>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d173      	bne.n	8006c10 <_dtoa_r+0x638>
 8006b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	4911      	ldr	r1, [pc, #68]	; (8006b74 <_dtoa_r+0x59c>)
 8006b30:	f7f9 fb32 	bl	8000198 <__aeabi_dsub>
 8006b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b38:	f7f9 ff58 	bl	80009ec <__aeabi_dcmplt>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	f040 80b6 	bne.w	8006cae <_dtoa_r+0x6d6>
 8006b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b44:	429f      	cmp	r7, r3
 8006b46:	f43f af7a 	beq.w	8006a3e <_dtoa_r+0x466>
 8006b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <_dtoa_r+0x5a0>)
 8006b52:	f7f9 fcd9 	bl	8000508 <__aeabi_dmul>
 8006b56:	2200      	movs	r2, #0
 8006b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <_dtoa_r+0x5a0>)
 8006b62:	f7f9 fcd1 	bl	8000508 <__aeabi_dmul>
 8006b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b6a:	e7c3      	b.n	8006af4 <_dtoa_r+0x51c>
 8006b6c:	08009e48 	.word	0x08009e48
 8006b70:	08009e20 	.word	0x08009e20
 8006b74:	3ff00000 	.word	0x3ff00000
 8006b78:	40240000 	.word	0x40240000
 8006b7c:	401c0000 	.word	0x401c0000
 8006b80:	40140000 	.word	0x40140000
 8006b84:	3fe00000 	.word	0x3fe00000
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 fcbc 	bl	8000508 <__aeabi_dmul>
 8006b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b96:	9c03      	ldr	r4, [sp, #12]
 8006b98:	9314      	str	r3, [sp, #80]	; 0x50
 8006b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b9e:	f7f9 ff63 	bl	8000a68 <__aeabi_d2iz>
 8006ba2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ba4:	f7f9 fc46 	bl	8000434 <__aeabi_i2d>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb0:	f7f9 faf2 	bl	8000198 <__aeabi_dsub>
 8006bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	f804 3b01 	strb.w	r3, [r4], #1
 8006bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	d124      	bne.n	8006c14 <_dtoa_r+0x63c>
 8006bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bce:	4baf      	ldr	r3, [pc, #700]	; (8006e8c <_dtoa_r+0x8b4>)
 8006bd0:	f7f9 fae4 	bl	800019c <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f7f9 ff24 	bl	8000a28 <__aeabi_dcmpgt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d163      	bne.n	8006cac <_dtoa_r+0x6d4>
 8006be4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006be8:	2000      	movs	r0, #0
 8006bea:	49a8      	ldr	r1, [pc, #672]	; (8006e8c <_dtoa_r+0x8b4>)
 8006bec:	f7f9 fad4 	bl	8000198 <__aeabi_dsub>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	f7f9 fef8 	bl	80009ec <__aeabi_dcmplt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f43f af1e 	beq.w	8006a3e <_dtoa_r+0x466>
 8006c02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c04:	1e7b      	subs	r3, r7, #1
 8006c06:	9314      	str	r3, [sp, #80]	; 0x50
 8006c08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	d0f8      	beq.n	8006c02 <_dtoa_r+0x62a>
 8006c10:	46c3      	mov	fp, r8
 8006c12:	e03b      	b.n	8006c8c <_dtoa_r+0x6b4>
 8006c14:	4b9e      	ldr	r3, [pc, #632]	; (8006e90 <_dtoa_r+0x8b8>)
 8006c16:	f7f9 fc77 	bl	8000508 <__aeabi_dmul>
 8006c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c1e:	e7bc      	b.n	8006b9a <_dtoa_r+0x5c2>
 8006c20:	9f03      	ldr	r7, [sp, #12]
 8006c22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 fd95 	bl	800075c <__aeabi_ddiv>
 8006c32:	f7f9 ff19 	bl	8000a68 <__aeabi_d2iz>
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7f9 fbfc 	bl	8000434 <__aeabi_i2d>
 8006c3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c40:	f7f9 fc62 	bl	8000508 <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 faa4 	bl	8000198 <__aeabi_dsub>
 8006c50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c54:	f807 6b01 	strb.w	r6, [r7], #1
 8006c58:	9e03      	ldr	r6, [sp, #12]
 8006c5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c5e:	1bbe      	subs	r6, r7, r6
 8006c60:	45b4      	cmp	ip, r6
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	d136      	bne.n	8006cd6 <_dtoa_r+0x6fe>
 8006c68:	f7f9 fa98 	bl	800019c <__adddf3>
 8006c6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c70:	4680      	mov	r8, r0
 8006c72:	4689      	mov	r9, r1
 8006c74:	f7f9 fed8 	bl	8000a28 <__aeabi_dcmpgt>
 8006c78:	bb58      	cbnz	r0, 8006cd2 <_dtoa_r+0x6fa>
 8006c7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	f7f9 fea9 	bl	80009d8 <__aeabi_dcmpeq>
 8006c86:	b108      	cbz	r0, 8006c8c <_dtoa_r+0x6b4>
 8006c88:	07e3      	lsls	r3, r4, #31
 8006c8a:	d422      	bmi.n	8006cd2 <_dtoa_r+0x6fa>
 8006c8c:	4651      	mov	r1, sl
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fbc2 	bl	8007418 <_Bfree>
 8006c94:	2300      	movs	r3, #0
 8006c96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c98:	703b      	strb	r3, [r7, #0]
 8006c9a:	f10b 0301 	add.w	r3, fp, #1
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f43f ace6 	beq.w	8006674 <_dtoa_r+0x9c>
 8006ca8:	601f      	str	r7, [r3, #0]
 8006caa:	e4e3      	b.n	8006674 <_dtoa_r+0x9c>
 8006cac:	4627      	mov	r7, r4
 8006cae:	463b      	mov	r3, r7
 8006cb0:	461f      	mov	r7, r3
 8006cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cb6:	2a39      	cmp	r2, #57	; 0x39
 8006cb8:	d107      	bne.n	8006cca <_dtoa_r+0x6f2>
 8006cba:	9a03      	ldr	r2, [sp, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d1f7      	bne.n	8006cb0 <_dtoa_r+0x6d8>
 8006cc0:	2230      	movs	r2, #48	; 0x30
 8006cc2:	9903      	ldr	r1, [sp, #12]
 8006cc4:	f108 0801 	add.w	r8, r8, #1
 8006cc8:	700a      	strb	r2, [r1, #0]
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	3201      	adds	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e79e      	b.n	8006c10 <_dtoa_r+0x638>
 8006cd2:	46d8      	mov	r8, fp
 8006cd4:	e7eb      	b.n	8006cae <_dtoa_r+0x6d6>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4b6d      	ldr	r3, [pc, #436]	; (8006e90 <_dtoa_r+0x8b8>)
 8006cda:	f7f9 fc15 	bl	8000508 <__aeabi_dmul>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4689      	mov	r9, r1
 8006ce6:	f7f9 fe77 	bl	80009d8 <__aeabi_dcmpeq>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d09b      	beq.n	8006c26 <_dtoa_r+0x64e>
 8006cee:	e7cd      	b.n	8006c8c <_dtoa_r+0x6b4>
 8006cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	f000 80c4 	beq.w	8006e80 <_dtoa_r+0x8a8>
 8006cf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	f300 80a8 	bgt.w	8006e50 <_dtoa_r+0x878>
 8006d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d02:	2a00      	cmp	r2, #0
 8006d04:	f000 80a0 	beq.w	8006e48 <_dtoa_r+0x870>
 8006d08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d0c:	464f      	mov	r7, r9
 8006d0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d12:	2101      	movs	r1, #1
 8006d14:	441a      	add	r2, r3
 8006d16:	4628      	mov	r0, r5
 8006d18:	4499      	add	r9, r3
 8006d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d1c:	f000 fc7c 	bl	8007618 <__i2b>
 8006d20:	4606      	mov	r6, r0
 8006d22:	b15f      	cbz	r7, 8006d3c <_dtoa_r+0x764>
 8006d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd08      	ble.n	8006d3c <_dtoa_r+0x764>
 8006d2a:	42bb      	cmp	r3, r7
 8006d2c:	bfa8      	it	ge
 8006d2e:	463b      	movge	r3, r7
 8006d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d32:	eba9 0903 	sub.w	r9, r9, r3
 8006d36:	1aff      	subs	r7, r7, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3e:	b1f3      	cbz	r3, 8006d7e <_dtoa_r+0x7a6>
 8006d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80a0 	beq.w	8006e88 <_dtoa_r+0x8b0>
 8006d48:	2c00      	cmp	r4, #0
 8006d4a:	dd10      	ble.n	8006d6e <_dtoa_r+0x796>
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4622      	mov	r2, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 fd1f 	bl	8007794 <__pow5mult>
 8006d56:	4652      	mov	r2, sl
 8006d58:	4601      	mov	r1, r0
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fc71 	bl	8007644 <__multiply>
 8006d62:	4680      	mov	r8, r0
 8006d64:	4651      	mov	r1, sl
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 fb56 	bl	8007418 <_Bfree>
 8006d6c:	46c2      	mov	sl, r8
 8006d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d70:	1b1a      	subs	r2, r3, r4
 8006d72:	d004      	beq.n	8006d7e <_dtoa_r+0x7a6>
 8006d74:	4651      	mov	r1, sl
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 fd0c 	bl	8007794 <__pow5mult>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	2101      	movs	r1, #1
 8006d80:	4628      	mov	r0, r5
 8006d82:	f000 fc49 	bl	8007618 <__i2b>
 8006d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f340 8082 	ble.w	8006e94 <_dtoa_r+0x8bc>
 8006d90:	461a      	mov	r2, r3
 8006d92:	4601      	mov	r1, r0
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 fcfd 	bl	8007794 <__pow5mult>
 8006d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	dd7b      	ble.n	8006e9a <_dtoa_r+0x8c2>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dac:	6918      	ldr	r0, [r3, #16]
 8006dae:	f000 fbe5 	bl	800757c <__hi0bits>
 8006db2:	f1c0 0020 	rsb	r0, r0, #32
 8006db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db8:	4418      	add	r0, r3
 8006dba:	f010 001f 	ands.w	r0, r0, #31
 8006dbe:	f000 8092 	beq.w	8006ee6 <_dtoa_r+0x90e>
 8006dc2:	f1c0 0320 	rsb	r3, r0, #32
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	f340 8085 	ble.w	8006ed6 <_dtoa_r+0x8fe>
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	f1c0 001c 	rsb	r0, r0, #28
 8006dd2:	4403      	add	r3, r0
 8006dd4:	4481      	add	r9, r0
 8006dd6:	4407      	add	r7, r0
 8006dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dda:	f1b9 0f00 	cmp.w	r9, #0
 8006dde:	dd05      	ble.n	8006dec <_dtoa_r+0x814>
 8006de0:	4651      	mov	r1, sl
 8006de2:	464a      	mov	r2, r9
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 fd2f 	bl	8007848 <__lshift>
 8006dea:	4682      	mov	sl, r0
 8006dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd05      	ble.n	8006dfe <_dtoa_r+0x826>
 8006df2:	4621      	mov	r1, r4
 8006df4:	461a      	mov	r2, r3
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fd26 	bl	8007848 <__lshift>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d072      	beq.n	8006eea <_dtoa_r+0x912>
 8006e04:	4621      	mov	r1, r4
 8006e06:	4650      	mov	r0, sl
 8006e08:	f000 fd8a 	bl	8007920 <__mcmp>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	da6c      	bge.n	8006eea <_dtoa_r+0x912>
 8006e10:	2300      	movs	r3, #0
 8006e12:	4651      	mov	r1, sl
 8006e14:	220a      	movs	r2, #10
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fb20 	bl	800745c <__multadd>
 8006e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e1e:	4682      	mov	sl, r0
 8006e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 81ac 	beq.w	8007182 <_dtoa_r+0xbaa>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	220a      	movs	r2, #10
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 fb13 	bl	800745c <__multadd>
 8006e36:	9b06      	ldr	r3, [sp, #24]
 8006e38:	4606      	mov	r6, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f300 8093 	bgt.w	8006f66 <_dtoa_r+0x98e>
 8006e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	dc59      	bgt.n	8006efa <_dtoa_r+0x922>
 8006e46:	e08e      	b.n	8006f66 <_dtoa_r+0x98e>
 8006e48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e4e:	e75d      	b.n	8006d0c <_dtoa_r+0x734>
 8006e50:	9b08      	ldr	r3, [sp, #32]
 8006e52:	1e5c      	subs	r4, r3, #1
 8006e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	bfbf      	itttt	lt
 8006e5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006e5e:	1ae3      	sublt	r3, r4, r3
 8006e60:	18d2      	addlt	r2, r2, r3
 8006e62:	bfa8      	it	ge
 8006e64:	1b1c      	subge	r4, r3, r4
 8006e66:	9b08      	ldr	r3, [sp, #32]
 8006e68:	bfbe      	ittt	lt
 8006e6a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e6c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006e6e:	2400      	movlt	r4, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bfb5      	itete	lt
 8006e74:	eba9 0703 	sublt.w	r7, r9, r3
 8006e78:	464f      	movge	r7, r9
 8006e7a:	2300      	movlt	r3, #0
 8006e7c:	9b08      	ldrge	r3, [sp, #32]
 8006e7e:	e747      	b.n	8006d10 <_dtoa_r+0x738>
 8006e80:	464f      	mov	r7, r9
 8006e82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e86:	e74c      	b.n	8006d22 <_dtoa_r+0x74a>
 8006e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e8a:	e773      	b.n	8006d74 <_dtoa_r+0x79c>
 8006e8c:	3fe00000 	.word	0x3fe00000
 8006e90:	40240000 	.word	0x40240000
 8006e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	dc18      	bgt.n	8006ecc <_dtoa_r+0x8f4>
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	b9b3      	cbnz	r3, 8006ecc <_dtoa_r+0x8f4>
 8006e9e:	9b05      	ldr	r3, [sp, #20]
 8006ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ea4:	b993      	cbnz	r3, 8006ecc <_dtoa_r+0x8f4>
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	0d1b      	lsrs	r3, r3, #20
 8006eae:	051b      	lsls	r3, r3, #20
 8006eb0:	b17b      	cbz	r3, 8006ed2 <_dtoa_r+0x8fa>
 8006eb2:	f04f 0801 	mov.w	r8, #1
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	f109 0901 	add.w	r9, r9, #1
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f47f af6f 	bne.w	8006da6 <_dtoa_r+0x7ce>
 8006ec8:	2001      	movs	r0, #1
 8006eca:	e774      	b.n	8006db6 <_dtoa_r+0x7de>
 8006ecc:	f04f 0800 	mov.w	r8, #0
 8006ed0:	e7f6      	b.n	8006ec0 <_dtoa_r+0x8e8>
 8006ed2:	4698      	mov	r8, r3
 8006ed4:	e7f4      	b.n	8006ec0 <_dtoa_r+0x8e8>
 8006ed6:	d080      	beq.n	8006dda <_dtoa_r+0x802>
 8006ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eda:	331c      	adds	r3, #28
 8006edc:	441a      	add	r2, r3
 8006ede:	4499      	add	r9, r3
 8006ee0:	441f      	add	r7, r3
 8006ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee4:	e779      	b.n	8006dda <_dtoa_r+0x802>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	e7f6      	b.n	8006ed8 <_dtoa_r+0x900>
 8006eea:	9b08      	ldr	r3, [sp, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dc34      	bgt.n	8006f5a <_dtoa_r+0x982>
 8006ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	dd31      	ble.n	8006f5a <_dtoa_r+0x982>
 8006ef6:	9b08      	ldr	r3, [sp, #32]
 8006ef8:	9306      	str	r3, [sp, #24]
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	b963      	cbnz	r3, 8006f18 <_dtoa_r+0x940>
 8006efe:	4621      	mov	r1, r4
 8006f00:	2205      	movs	r2, #5
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 faaa 	bl	800745c <__multadd>
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	f000 fd07 	bl	8007920 <__mcmp>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f73f adbf 	bgt.w	8006a96 <_dtoa_r+0x4be>
 8006f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f1a:	9f03      	ldr	r7, [sp, #12]
 8006f1c:	ea6f 0b03 	mvn.w	fp, r3
 8006f20:	f04f 0800 	mov.w	r8, #0
 8006f24:	4621      	mov	r1, r4
 8006f26:	4628      	mov	r0, r5
 8006f28:	f000 fa76 	bl	8007418 <_Bfree>
 8006f2c:	2e00      	cmp	r6, #0
 8006f2e:	f43f aead 	beq.w	8006c8c <_dtoa_r+0x6b4>
 8006f32:	f1b8 0f00 	cmp.w	r8, #0
 8006f36:	d005      	beq.n	8006f44 <_dtoa_r+0x96c>
 8006f38:	45b0      	cmp	r8, r6
 8006f3a:	d003      	beq.n	8006f44 <_dtoa_r+0x96c>
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 fa6a 	bl	8007418 <_Bfree>
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 fa66 	bl	8007418 <_Bfree>
 8006f4c:	e69e      	b.n	8006c8c <_dtoa_r+0x6b4>
 8006f4e:	2400      	movs	r4, #0
 8006f50:	4626      	mov	r6, r4
 8006f52:	e7e1      	b.n	8006f18 <_dtoa_r+0x940>
 8006f54:	46c3      	mov	fp, r8
 8006f56:	4626      	mov	r6, r4
 8006f58:	e59d      	b.n	8006a96 <_dtoa_r+0x4be>
 8006f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80c8 	beq.w	80070f2 <_dtoa_r+0xb1a>
 8006f62:	9b08      	ldr	r3, [sp, #32]
 8006f64:	9306      	str	r3, [sp, #24]
 8006f66:	2f00      	cmp	r7, #0
 8006f68:	dd05      	ble.n	8006f76 <_dtoa_r+0x99e>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f000 fc6a 	bl	8007848 <__lshift>
 8006f74:	4606      	mov	r6, r0
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	d05b      	beq.n	8007034 <_dtoa_r+0xa5c>
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	6871      	ldr	r1, [r6, #4]
 8006f80:	f000 fa0a 	bl	8007398 <_Balloc>
 8006f84:	4607      	mov	r7, r0
 8006f86:	b928      	cbnz	r0, 8006f94 <_dtoa_r+0x9bc>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f8e:	4b81      	ldr	r3, [pc, #516]	; (8007194 <_dtoa_r+0xbbc>)
 8006f90:	f7ff bb36 	b.w	8006600 <_dtoa_r+0x28>
 8006f94:	6932      	ldr	r2, [r6, #16]
 8006f96:	f106 010c 	add.w	r1, r6, #12
 8006f9a:	3202      	adds	r2, #2
 8006f9c:	0092      	lsls	r2, r2, #2
 8006f9e:	300c      	adds	r0, #12
 8006fa0:	f001 ff72 	bl	8008e88 <memcpy>
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f000 fc4d 	bl	8007848 <__lshift>
 8006fae:	46b0      	mov	r8, r6
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	9a03      	ldr	r2, [sp, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	9308      	str	r3, [sp, #32]
 8006fba:	9b06      	ldr	r3, [sp, #24]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	4621      	mov	r1, r4
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	4650      	mov	r0, sl
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	f7ff fa77 	bl	80064c4 <quorem>
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	9006      	str	r0, [sp, #24]
 8006fda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fde:	4650      	mov	r0, sl
 8006fe0:	f000 fc9e 	bl	8007920 <__mcmp>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 fcb4 	bl	8007958 <__mdiff>
 8006ff0:	68c2      	ldr	r2, [r0, #12]
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	bb02      	cbnz	r2, 8007038 <_dtoa_r+0xa60>
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	f000 fc91 	bl	8007920 <__mcmp>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4639      	mov	r1, r7
 8007002:	4628      	mov	r0, r5
 8007004:	920c      	str	r2, [sp, #48]	; 0x30
 8007006:	f000 fa07 	bl	8007418 <_Bfree>
 800700a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800700c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800700e:	9f08      	ldr	r7, [sp, #32]
 8007010:	ea43 0102 	orr.w	r1, r3, r2
 8007014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007016:	4319      	orrs	r1, r3
 8007018:	d110      	bne.n	800703c <_dtoa_r+0xa64>
 800701a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800701e:	d029      	beq.n	8007074 <_dtoa_r+0xa9c>
 8007020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	dd02      	ble.n	800702c <_dtoa_r+0xa54>
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	f883 9000 	strb.w	r9, [r3]
 8007032:	e777      	b.n	8006f24 <_dtoa_r+0x94c>
 8007034:	4630      	mov	r0, r6
 8007036:	e7ba      	b.n	8006fae <_dtoa_r+0x9d6>
 8007038:	2201      	movs	r2, #1
 800703a:	e7e1      	b.n	8007000 <_dtoa_r+0xa28>
 800703c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	db04      	blt.n	800704c <_dtoa_r+0xa74>
 8007042:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007044:	430b      	orrs	r3, r1
 8007046:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007048:	430b      	orrs	r3, r1
 800704a:	d120      	bne.n	800708e <_dtoa_r+0xab6>
 800704c:	2a00      	cmp	r2, #0
 800704e:	dded      	ble.n	800702c <_dtoa_r+0xa54>
 8007050:	4651      	mov	r1, sl
 8007052:	2201      	movs	r2, #1
 8007054:	4628      	mov	r0, r5
 8007056:	f000 fbf7 	bl	8007848 <__lshift>
 800705a:	4621      	mov	r1, r4
 800705c:	4682      	mov	sl, r0
 800705e:	f000 fc5f 	bl	8007920 <__mcmp>
 8007062:	2800      	cmp	r0, #0
 8007064:	dc03      	bgt.n	800706e <_dtoa_r+0xa96>
 8007066:	d1e1      	bne.n	800702c <_dtoa_r+0xa54>
 8007068:	f019 0f01 	tst.w	r9, #1
 800706c:	d0de      	beq.n	800702c <_dtoa_r+0xa54>
 800706e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007072:	d1d8      	bne.n	8007026 <_dtoa_r+0xa4e>
 8007074:	2339      	movs	r3, #57	; 0x39
 8007076:	9a04      	ldr	r2, [sp, #16]
 8007078:	7013      	strb	r3, [r2, #0]
 800707a:	463b      	mov	r3, r7
 800707c:	461f      	mov	r7, r3
 800707e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007082:	3b01      	subs	r3, #1
 8007084:	2a39      	cmp	r2, #57	; 0x39
 8007086:	d06b      	beq.n	8007160 <_dtoa_r+0xb88>
 8007088:	3201      	adds	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e74a      	b.n	8006f24 <_dtoa_r+0x94c>
 800708e:	2a00      	cmp	r2, #0
 8007090:	dd07      	ble.n	80070a2 <_dtoa_r+0xaca>
 8007092:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007096:	d0ed      	beq.n	8007074 <_dtoa_r+0xa9c>
 8007098:	9a04      	ldr	r2, [sp, #16]
 800709a:	f109 0301 	add.w	r3, r9, #1
 800709e:	7013      	strb	r3, [r2, #0]
 80070a0:	e740      	b.n	8006f24 <_dtoa_r+0x94c>
 80070a2:	9b08      	ldr	r3, [sp, #32]
 80070a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d042      	beq.n	8007134 <_dtoa_r+0xb5c>
 80070ae:	4651      	mov	r1, sl
 80070b0:	2300      	movs	r3, #0
 80070b2:	220a      	movs	r2, #10
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 f9d1 	bl	800745c <__multadd>
 80070ba:	45b0      	cmp	r8, r6
 80070bc:	4682      	mov	sl, r0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	f04f 020a 	mov.w	r2, #10
 80070c6:	4641      	mov	r1, r8
 80070c8:	4628      	mov	r0, r5
 80070ca:	d107      	bne.n	80070dc <_dtoa_r+0xb04>
 80070cc:	f000 f9c6 	bl	800745c <__multadd>
 80070d0:	4680      	mov	r8, r0
 80070d2:	4606      	mov	r6, r0
 80070d4:	9b08      	ldr	r3, [sp, #32]
 80070d6:	3301      	adds	r3, #1
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	e775      	b.n	8006fc8 <_dtoa_r+0x9f0>
 80070dc:	f000 f9be 	bl	800745c <__multadd>
 80070e0:	4631      	mov	r1, r6
 80070e2:	4680      	mov	r8, r0
 80070e4:	2300      	movs	r3, #0
 80070e6:	220a      	movs	r2, #10
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 f9b7 	bl	800745c <__multadd>
 80070ee:	4606      	mov	r6, r0
 80070f0:	e7f0      	b.n	80070d4 <_dtoa_r+0xafc>
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	9306      	str	r3, [sp, #24]
 80070f6:	9f03      	ldr	r7, [sp, #12]
 80070f8:	4621      	mov	r1, r4
 80070fa:	4650      	mov	r0, sl
 80070fc:	f7ff f9e2 	bl	80064c4 <quorem>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007106:	f807 9b01 	strb.w	r9, [r7], #1
 800710a:	1afa      	subs	r2, r7, r3
 800710c:	9b06      	ldr	r3, [sp, #24]
 800710e:	4293      	cmp	r3, r2
 8007110:	dd07      	ble.n	8007122 <_dtoa_r+0xb4a>
 8007112:	4651      	mov	r1, sl
 8007114:	2300      	movs	r3, #0
 8007116:	220a      	movs	r2, #10
 8007118:	4628      	mov	r0, r5
 800711a:	f000 f99f 	bl	800745c <__multadd>
 800711e:	4682      	mov	sl, r0
 8007120:	e7ea      	b.n	80070f8 <_dtoa_r+0xb20>
 8007122:	9b06      	ldr	r3, [sp, #24]
 8007124:	f04f 0800 	mov.w	r8, #0
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfcc      	ite	gt
 800712c:	461f      	movgt	r7, r3
 800712e:	2701      	movle	r7, #1
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	441f      	add	r7, r3
 8007134:	4651      	mov	r1, sl
 8007136:	2201      	movs	r2, #1
 8007138:	4628      	mov	r0, r5
 800713a:	f000 fb85 	bl	8007848 <__lshift>
 800713e:	4621      	mov	r1, r4
 8007140:	4682      	mov	sl, r0
 8007142:	f000 fbed 	bl	8007920 <__mcmp>
 8007146:	2800      	cmp	r0, #0
 8007148:	dc97      	bgt.n	800707a <_dtoa_r+0xaa2>
 800714a:	d102      	bne.n	8007152 <_dtoa_r+0xb7a>
 800714c:	f019 0f01 	tst.w	r9, #1
 8007150:	d193      	bne.n	800707a <_dtoa_r+0xaa2>
 8007152:	463b      	mov	r3, r7
 8007154:	461f      	mov	r7, r3
 8007156:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800715a:	2a30      	cmp	r2, #48	; 0x30
 800715c:	d0fa      	beq.n	8007154 <_dtoa_r+0xb7c>
 800715e:	e6e1      	b.n	8006f24 <_dtoa_r+0x94c>
 8007160:	9a03      	ldr	r2, [sp, #12]
 8007162:	429a      	cmp	r2, r3
 8007164:	d18a      	bne.n	800707c <_dtoa_r+0xaa4>
 8007166:	2331      	movs	r3, #49	; 0x31
 8007168:	f10b 0b01 	add.w	fp, fp, #1
 800716c:	e797      	b.n	800709e <_dtoa_r+0xac6>
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <_dtoa_r+0xbc0>)
 8007170:	f7ff ba9f 	b.w	80066b2 <_dtoa_r+0xda>
 8007174:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007176:	2b00      	cmp	r3, #0
 8007178:	f47f aa77 	bne.w	800666a <_dtoa_r+0x92>
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <_dtoa_r+0xbc4>)
 800717e:	f7ff ba98 	b.w	80066b2 <_dtoa_r+0xda>
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dcb6      	bgt.n	80070f6 <_dtoa_r+0xb1e>
 8007188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800718a:	2b02      	cmp	r3, #2
 800718c:	f73f aeb5 	bgt.w	8006efa <_dtoa_r+0x922>
 8007190:	e7b1      	b.n	80070f6 <_dtoa_r+0xb1e>
 8007192:	bf00      	nop
 8007194:	08009db5 	.word	0x08009db5
 8007198:	08009d10 	.word	0x08009d10
 800719c:	08009d39 	.word	0x08009d39

080071a0 <_free_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4605      	mov	r5, r0
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d040      	beq.n	800722a <_free_r+0x8a>
 80071a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ac:	1f0c      	subs	r4, r1, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bfb8      	it	lt
 80071b2:	18e4      	addlt	r4, r4, r3
 80071b4:	f000 f8e4 	bl	8007380 <__malloc_lock>
 80071b8:	4a1c      	ldr	r2, [pc, #112]	; (800722c <_free_r+0x8c>)
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	b933      	cbnz	r3, 80071cc <_free_r+0x2c>
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	6014      	str	r4, [r2, #0]
 80071c2:	4628      	mov	r0, r5
 80071c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c8:	f000 b8e0 	b.w	800738c <__malloc_unlock>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d908      	bls.n	80071e2 <_free_r+0x42>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	1821      	adds	r1, r4, r0
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf01      	itttt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	1809      	addeq	r1, r1, r0
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	e7ed      	b.n	80071be <_free_r+0x1e>
 80071e2:	461a      	mov	r2, r3
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b10b      	cbz	r3, 80071ec <_free_r+0x4c>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d9fa      	bls.n	80071e2 <_free_r+0x42>
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	1850      	adds	r0, r2, r1
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d10b      	bne.n	800720c <_free_r+0x6c>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	4401      	add	r1, r0
 80071f8:	1850      	adds	r0, r2, r1
 80071fa:	4283      	cmp	r3, r0
 80071fc:	6011      	str	r1, [r2, #0]
 80071fe:	d1e0      	bne.n	80071c2 <_free_r+0x22>
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4408      	add	r0, r1
 8007206:	6010      	str	r0, [r2, #0]
 8007208:	6053      	str	r3, [r2, #4]
 800720a:	e7da      	b.n	80071c2 <_free_r+0x22>
 800720c:	d902      	bls.n	8007214 <_free_r+0x74>
 800720e:	230c      	movs	r3, #12
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	e7d6      	b.n	80071c2 <_free_r+0x22>
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	1821      	adds	r1, r4, r0
 8007218:	428b      	cmp	r3, r1
 800721a:	bf01      	itttt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	1809      	addeq	r1, r1, r0
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	6054      	str	r4, [r2, #4]
 8007228:	e7cb      	b.n	80071c2 <_free_r+0x22>
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	2000059c 	.word	0x2000059c

08007230 <malloc>:
 8007230:	4b02      	ldr	r3, [pc, #8]	; (800723c <malloc+0xc>)
 8007232:	4601      	mov	r1, r0
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f000 b823 	b.w	8007280 <_malloc_r>
 800723a:	bf00      	nop
 800723c:	20000064 	.word	0x20000064

08007240 <sbrk_aligned>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4e0e      	ldr	r6, [pc, #56]	; (800727c <sbrk_aligned+0x3c>)
 8007244:	460c      	mov	r4, r1
 8007246:	6831      	ldr	r1, [r6, #0]
 8007248:	4605      	mov	r5, r0
 800724a:	b911      	cbnz	r1, 8007252 <sbrk_aligned+0x12>
 800724c:	f001 fe0c 	bl	8008e68 <_sbrk_r>
 8007250:	6030      	str	r0, [r6, #0]
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f001 fe07 	bl	8008e68 <_sbrk_r>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d00a      	beq.n	8007274 <sbrk_aligned+0x34>
 800725e:	1cc4      	adds	r4, r0, #3
 8007260:	f024 0403 	bic.w	r4, r4, #3
 8007264:	42a0      	cmp	r0, r4
 8007266:	d007      	beq.n	8007278 <sbrk_aligned+0x38>
 8007268:	1a21      	subs	r1, r4, r0
 800726a:	4628      	mov	r0, r5
 800726c:	f001 fdfc 	bl	8008e68 <_sbrk_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d101      	bne.n	8007278 <sbrk_aligned+0x38>
 8007274:	f04f 34ff 	mov.w	r4, #4294967295
 8007278:	4620      	mov	r0, r4
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	200005a0 	.word	0x200005a0

08007280 <_malloc_r>:
 8007280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007284:	1ccd      	adds	r5, r1, #3
 8007286:	f025 0503 	bic.w	r5, r5, #3
 800728a:	3508      	adds	r5, #8
 800728c:	2d0c      	cmp	r5, #12
 800728e:	bf38      	it	cc
 8007290:	250c      	movcc	r5, #12
 8007292:	2d00      	cmp	r5, #0
 8007294:	4607      	mov	r7, r0
 8007296:	db01      	blt.n	800729c <_malloc_r+0x1c>
 8007298:	42a9      	cmp	r1, r5
 800729a:	d905      	bls.n	80072a8 <_malloc_r+0x28>
 800729c:	230c      	movs	r3, #12
 800729e:	2600      	movs	r6, #0
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	4630      	mov	r0, r6
 80072a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800737c <_malloc_r+0xfc>
 80072ac:	f000 f868 	bl	8007380 <__malloc_lock>
 80072b0:	f8d8 3000 	ldr.w	r3, [r8]
 80072b4:	461c      	mov	r4, r3
 80072b6:	bb5c      	cbnz	r4, 8007310 <_malloc_r+0x90>
 80072b8:	4629      	mov	r1, r5
 80072ba:	4638      	mov	r0, r7
 80072bc:	f7ff ffc0 	bl	8007240 <sbrk_aligned>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	4604      	mov	r4, r0
 80072c4:	d155      	bne.n	8007372 <_malloc_r+0xf2>
 80072c6:	f8d8 4000 	ldr.w	r4, [r8]
 80072ca:	4626      	mov	r6, r4
 80072cc:	2e00      	cmp	r6, #0
 80072ce:	d145      	bne.n	800735c <_malloc_r+0xdc>
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	d048      	beq.n	8007366 <_malloc_r+0xe6>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	4631      	mov	r1, r6
 80072d8:	4638      	mov	r0, r7
 80072da:	eb04 0903 	add.w	r9, r4, r3
 80072de:	f001 fdc3 	bl	8008e68 <_sbrk_r>
 80072e2:	4581      	cmp	r9, r0
 80072e4:	d13f      	bne.n	8007366 <_malloc_r+0xe6>
 80072e6:	6821      	ldr	r1, [r4, #0]
 80072e8:	4638      	mov	r0, r7
 80072ea:	1a6d      	subs	r5, r5, r1
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7ff ffa7 	bl	8007240 <sbrk_aligned>
 80072f2:	3001      	adds	r0, #1
 80072f4:	d037      	beq.n	8007366 <_malloc_r+0xe6>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	442b      	add	r3, r5
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d038      	beq.n	8007376 <_malloc_r+0xf6>
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	42a2      	cmp	r2, r4
 8007308:	d12b      	bne.n	8007362 <_malloc_r+0xe2>
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	e00f      	b.n	8007330 <_malloc_r+0xb0>
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	1b52      	subs	r2, r2, r5
 8007314:	d41f      	bmi.n	8007356 <_malloc_r+0xd6>
 8007316:	2a0b      	cmp	r2, #11
 8007318:	d917      	bls.n	800734a <_malloc_r+0xca>
 800731a:	1961      	adds	r1, r4, r5
 800731c:	42a3      	cmp	r3, r4
 800731e:	6025      	str	r5, [r4, #0]
 8007320:	bf18      	it	ne
 8007322:	6059      	strne	r1, [r3, #4]
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	bf08      	it	eq
 8007328:	f8c8 1000 	streq.w	r1, [r8]
 800732c:	5162      	str	r2, [r4, r5]
 800732e:	604b      	str	r3, [r1, #4]
 8007330:	4638      	mov	r0, r7
 8007332:	f104 060b 	add.w	r6, r4, #11
 8007336:	f000 f829 	bl	800738c <__malloc_unlock>
 800733a:	f026 0607 	bic.w	r6, r6, #7
 800733e:	1d23      	adds	r3, r4, #4
 8007340:	1af2      	subs	r2, r6, r3
 8007342:	d0ae      	beq.n	80072a2 <_malloc_r+0x22>
 8007344:	1b9b      	subs	r3, r3, r6
 8007346:	50a3      	str	r3, [r4, r2]
 8007348:	e7ab      	b.n	80072a2 <_malloc_r+0x22>
 800734a:	42a3      	cmp	r3, r4
 800734c:	6862      	ldr	r2, [r4, #4]
 800734e:	d1dd      	bne.n	800730c <_malloc_r+0x8c>
 8007350:	f8c8 2000 	str.w	r2, [r8]
 8007354:	e7ec      	b.n	8007330 <_malloc_r+0xb0>
 8007356:	4623      	mov	r3, r4
 8007358:	6864      	ldr	r4, [r4, #4]
 800735a:	e7ac      	b.n	80072b6 <_malloc_r+0x36>
 800735c:	4634      	mov	r4, r6
 800735e:	6876      	ldr	r6, [r6, #4]
 8007360:	e7b4      	b.n	80072cc <_malloc_r+0x4c>
 8007362:	4613      	mov	r3, r2
 8007364:	e7cc      	b.n	8007300 <_malloc_r+0x80>
 8007366:	230c      	movs	r3, #12
 8007368:	4638      	mov	r0, r7
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	f000 f80e 	bl	800738c <__malloc_unlock>
 8007370:	e797      	b.n	80072a2 <_malloc_r+0x22>
 8007372:	6025      	str	r5, [r4, #0]
 8007374:	e7dc      	b.n	8007330 <_malloc_r+0xb0>
 8007376:	605b      	str	r3, [r3, #4]
 8007378:	deff      	udf	#255	; 0xff
 800737a:	bf00      	nop
 800737c:	2000059c 	.word	0x2000059c

08007380 <__malloc_lock>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__malloc_lock+0x8>)
 8007382:	f7ff b88a 	b.w	800649a <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	20000598 	.word	0x20000598

0800738c <__malloc_unlock>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__malloc_unlock+0x8>)
 800738e:	f7ff b885 	b.w	800649c <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	20000598 	.word	0x20000598

08007398 <_Balloc>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	69c6      	ldr	r6, [r0, #28]
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	b976      	cbnz	r6, 80073c0 <_Balloc+0x28>
 80073a2:	2010      	movs	r0, #16
 80073a4:	f7ff ff44 	bl	8007230 <malloc>
 80073a8:	4602      	mov	r2, r0
 80073aa:	61e0      	str	r0, [r4, #28]
 80073ac:	b920      	cbnz	r0, 80073b8 <_Balloc+0x20>
 80073ae:	216b      	movs	r1, #107	; 0x6b
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <_Balloc+0x78>)
 80073b2:	4818      	ldr	r0, [pc, #96]	; (8007414 <_Balloc+0x7c>)
 80073b4:	f001 fd7c 	bl	8008eb0 <__assert_func>
 80073b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073bc:	6006      	str	r6, [r0, #0]
 80073be:	60c6      	str	r6, [r0, #12]
 80073c0:	69e6      	ldr	r6, [r4, #28]
 80073c2:	68f3      	ldr	r3, [r6, #12]
 80073c4:	b183      	cbz	r3, 80073e8 <_Balloc+0x50>
 80073c6:	69e3      	ldr	r3, [r4, #28]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ce:	b9b8      	cbnz	r0, 8007400 <_Balloc+0x68>
 80073d0:	2101      	movs	r1, #1
 80073d2:	fa01 f605 	lsl.w	r6, r1, r5
 80073d6:	1d72      	adds	r2, r6, #5
 80073d8:	4620      	mov	r0, r4
 80073da:	0092      	lsls	r2, r2, #2
 80073dc:	f001 fd86 	bl	8008eec <_calloc_r>
 80073e0:	b160      	cbz	r0, 80073fc <_Balloc+0x64>
 80073e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073e6:	e00e      	b.n	8007406 <_Balloc+0x6e>
 80073e8:	2221      	movs	r2, #33	; 0x21
 80073ea:	2104      	movs	r1, #4
 80073ec:	4620      	mov	r0, r4
 80073ee:	f001 fd7d 	bl	8008eec <_calloc_r>
 80073f2:	69e3      	ldr	r3, [r4, #28]
 80073f4:	60f0      	str	r0, [r6, #12]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e4      	bne.n	80073c6 <_Balloc+0x2e>
 80073fc:	2000      	movs	r0, #0
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	6802      	ldr	r2, [r0, #0]
 8007402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007406:	2300      	movs	r3, #0
 8007408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800740c:	e7f7      	b.n	80073fe <_Balloc+0x66>
 800740e:	bf00      	nop
 8007410:	08009d46 	.word	0x08009d46
 8007414:	08009dc6 	.word	0x08009dc6

08007418 <_Bfree>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	69c6      	ldr	r6, [r0, #28]
 800741c:	4605      	mov	r5, r0
 800741e:	460c      	mov	r4, r1
 8007420:	b976      	cbnz	r6, 8007440 <_Bfree+0x28>
 8007422:	2010      	movs	r0, #16
 8007424:	f7ff ff04 	bl	8007230 <malloc>
 8007428:	4602      	mov	r2, r0
 800742a:	61e8      	str	r0, [r5, #28]
 800742c:	b920      	cbnz	r0, 8007438 <_Bfree+0x20>
 800742e:	218f      	movs	r1, #143	; 0x8f
 8007430:	4b08      	ldr	r3, [pc, #32]	; (8007454 <_Bfree+0x3c>)
 8007432:	4809      	ldr	r0, [pc, #36]	; (8007458 <_Bfree+0x40>)
 8007434:	f001 fd3c 	bl	8008eb0 <__assert_func>
 8007438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800743c:	6006      	str	r6, [r0, #0]
 800743e:	60c6      	str	r6, [r0, #12]
 8007440:	b13c      	cbz	r4, 8007452 <_Bfree+0x3a>
 8007442:	69eb      	ldr	r3, [r5, #28]
 8007444:	6862      	ldr	r2, [r4, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800744c:	6021      	str	r1, [r4, #0]
 800744e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	08009d46 	.word	0x08009d46
 8007458:	08009dc6 	.word	0x08009dc6

0800745c <__multadd>:
 800745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007460:	4607      	mov	r7, r0
 8007462:	460c      	mov	r4, r1
 8007464:	461e      	mov	r6, r3
 8007466:	2000      	movs	r0, #0
 8007468:	690d      	ldr	r5, [r1, #16]
 800746a:	f101 0c14 	add.w	ip, r1, #20
 800746e:	f8dc 3000 	ldr.w	r3, [ip]
 8007472:	3001      	adds	r0, #1
 8007474:	b299      	uxth	r1, r3
 8007476:	fb02 6101 	mla	r1, r2, r1, r6
 800747a:	0c1e      	lsrs	r6, r3, #16
 800747c:	0c0b      	lsrs	r3, r1, #16
 800747e:	fb02 3306 	mla	r3, r2, r6, r3
 8007482:	b289      	uxth	r1, r1
 8007484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007488:	4285      	cmp	r5, r0
 800748a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800748e:	f84c 1b04 	str.w	r1, [ip], #4
 8007492:	dcec      	bgt.n	800746e <__multadd+0x12>
 8007494:	b30e      	cbz	r6, 80074da <__multadd+0x7e>
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	42ab      	cmp	r3, r5
 800749a:	dc19      	bgt.n	80074d0 <__multadd+0x74>
 800749c:	6861      	ldr	r1, [r4, #4]
 800749e:	4638      	mov	r0, r7
 80074a0:	3101      	adds	r1, #1
 80074a2:	f7ff ff79 	bl	8007398 <_Balloc>
 80074a6:	4680      	mov	r8, r0
 80074a8:	b928      	cbnz	r0, 80074b6 <__multadd+0x5a>
 80074aa:	4602      	mov	r2, r0
 80074ac:	21ba      	movs	r1, #186	; 0xba
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <__multadd+0x84>)
 80074b0:	480c      	ldr	r0, [pc, #48]	; (80074e4 <__multadd+0x88>)
 80074b2:	f001 fcfd 	bl	8008eb0 <__assert_func>
 80074b6:	6922      	ldr	r2, [r4, #16]
 80074b8:	f104 010c 	add.w	r1, r4, #12
 80074bc:	3202      	adds	r2, #2
 80074be:	0092      	lsls	r2, r2, #2
 80074c0:	300c      	adds	r0, #12
 80074c2:	f001 fce1 	bl	8008e88 <memcpy>
 80074c6:	4621      	mov	r1, r4
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff ffa5 	bl	8007418 <_Bfree>
 80074ce:	4644      	mov	r4, r8
 80074d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074d4:	3501      	adds	r5, #1
 80074d6:	615e      	str	r6, [r3, #20]
 80074d8:	6125      	str	r5, [r4, #16]
 80074da:	4620      	mov	r0, r4
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e0:	08009db5 	.word	0x08009db5
 80074e4:	08009dc6 	.word	0x08009dc6

080074e8 <__s2b>:
 80074e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ec:	4615      	mov	r5, r2
 80074ee:	2209      	movs	r2, #9
 80074f0:	461f      	mov	r7, r3
 80074f2:	3308      	adds	r3, #8
 80074f4:	460c      	mov	r4, r1
 80074f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fa:	4606      	mov	r6, r0
 80074fc:	2201      	movs	r2, #1
 80074fe:	2100      	movs	r1, #0
 8007500:	429a      	cmp	r2, r3
 8007502:	db09      	blt.n	8007518 <__s2b+0x30>
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff ff47 	bl	8007398 <_Balloc>
 800750a:	b940      	cbnz	r0, 800751e <__s2b+0x36>
 800750c:	4602      	mov	r2, r0
 800750e:	21d3      	movs	r1, #211	; 0xd3
 8007510:	4b18      	ldr	r3, [pc, #96]	; (8007574 <__s2b+0x8c>)
 8007512:	4819      	ldr	r0, [pc, #100]	; (8007578 <__s2b+0x90>)
 8007514:	f001 fccc 	bl	8008eb0 <__assert_func>
 8007518:	0052      	lsls	r2, r2, #1
 800751a:	3101      	adds	r1, #1
 800751c:	e7f0      	b.n	8007500 <__s2b+0x18>
 800751e:	9b08      	ldr	r3, [sp, #32]
 8007520:	2d09      	cmp	r5, #9
 8007522:	6143      	str	r3, [r0, #20]
 8007524:	f04f 0301 	mov.w	r3, #1
 8007528:	6103      	str	r3, [r0, #16]
 800752a:	dd16      	ble.n	800755a <__s2b+0x72>
 800752c:	f104 0909 	add.w	r9, r4, #9
 8007530:	46c8      	mov	r8, r9
 8007532:	442c      	add	r4, r5
 8007534:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007538:	4601      	mov	r1, r0
 800753a:	220a      	movs	r2, #10
 800753c:	4630      	mov	r0, r6
 800753e:	3b30      	subs	r3, #48	; 0x30
 8007540:	f7ff ff8c 	bl	800745c <__multadd>
 8007544:	45a0      	cmp	r8, r4
 8007546:	d1f5      	bne.n	8007534 <__s2b+0x4c>
 8007548:	f1a5 0408 	sub.w	r4, r5, #8
 800754c:	444c      	add	r4, r9
 800754e:	1b2d      	subs	r5, r5, r4
 8007550:	1963      	adds	r3, r4, r5
 8007552:	42bb      	cmp	r3, r7
 8007554:	db04      	blt.n	8007560 <__s2b+0x78>
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	2509      	movs	r5, #9
 800755c:	340a      	adds	r4, #10
 800755e:	e7f6      	b.n	800754e <__s2b+0x66>
 8007560:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007564:	4601      	mov	r1, r0
 8007566:	220a      	movs	r2, #10
 8007568:	4630      	mov	r0, r6
 800756a:	3b30      	subs	r3, #48	; 0x30
 800756c:	f7ff ff76 	bl	800745c <__multadd>
 8007570:	e7ee      	b.n	8007550 <__s2b+0x68>
 8007572:	bf00      	nop
 8007574:	08009db5 	.word	0x08009db5
 8007578:	08009dc6 	.word	0x08009dc6

0800757c <__hi0bits>:
 800757c:	0c02      	lsrs	r2, r0, #16
 800757e:	0412      	lsls	r2, r2, #16
 8007580:	4603      	mov	r3, r0
 8007582:	b9ca      	cbnz	r2, 80075b8 <__hi0bits+0x3c>
 8007584:	0403      	lsls	r3, r0, #16
 8007586:	2010      	movs	r0, #16
 8007588:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800758c:	bf04      	itt	eq
 800758e:	021b      	lsleq	r3, r3, #8
 8007590:	3008      	addeq	r0, #8
 8007592:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007596:	bf04      	itt	eq
 8007598:	011b      	lsleq	r3, r3, #4
 800759a:	3004      	addeq	r0, #4
 800759c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075a0:	bf04      	itt	eq
 80075a2:	009b      	lsleq	r3, r3, #2
 80075a4:	3002      	addeq	r0, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	db05      	blt.n	80075b6 <__hi0bits+0x3a>
 80075aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80075ae:	f100 0001 	add.w	r0, r0, #1
 80075b2:	bf08      	it	eq
 80075b4:	2020      	moveq	r0, #32
 80075b6:	4770      	bx	lr
 80075b8:	2000      	movs	r0, #0
 80075ba:	e7e5      	b.n	8007588 <__hi0bits+0xc>

080075bc <__lo0bits>:
 80075bc:	6803      	ldr	r3, [r0, #0]
 80075be:	4602      	mov	r2, r0
 80075c0:	f013 0007 	ands.w	r0, r3, #7
 80075c4:	d00b      	beq.n	80075de <__lo0bits+0x22>
 80075c6:	07d9      	lsls	r1, r3, #31
 80075c8:	d421      	bmi.n	800760e <__lo0bits+0x52>
 80075ca:	0798      	lsls	r0, r3, #30
 80075cc:	bf49      	itett	mi
 80075ce:	085b      	lsrmi	r3, r3, #1
 80075d0:	089b      	lsrpl	r3, r3, #2
 80075d2:	2001      	movmi	r0, #1
 80075d4:	6013      	strmi	r3, [r2, #0]
 80075d6:	bf5c      	itt	pl
 80075d8:	2002      	movpl	r0, #2
 80075da:	6013      	strpl	r3, [r2, #0]
 80075dc:	4770      	bx	lr
 80075de:	b299      	uxth	r1, r3
 80075e0:	b909      	cbnz	r1, 80075e6 <__lo0bits+0x2a>
 80075e2:	2010      	movs	r0, #16
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2d9      	uxtb	r1, r3
 80075e8:	b909      	cbnz	r1, 80075ee <__lo0bits+0x32>
 80075ea:	3008      	adds	r0, #8
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	0719      	lsls	r1, r3, #28
 80075f0:	bf04      	itt	eq
 80075f2:	091b      	lsreq	r3, r3, #4
 80075f4:	3004      	addeq	r0, #4
 80075f6:	0799      	lsls	r1, r3, #30
 80075f8:	bf04      	itt	eq
 80075fa:	089b      	lsreq	r3, r3, #2
 80075fc:	3002      	addeq	r0, #2
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	d403      	bmi.n	800760a <__lo0bits+0x4e>
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f100 0001 	add.w	r0, r0, #1
 8007608:	d003      	beq.n	8007612 <__lo0bits+0x56>
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	4770      	bx	lr
 800760e:	2000      	movs	r0, #0
 8007610:	4770      	bx	lr
 8007612:	2020      	movs	r0, #32
 8007614:	4770      	bx	lr
	...

08007618 <__i2b>:
 8007618:	b510      	push	{r4, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	2101      	movs	r1, #1
 800761e:	f7ff febb 	bl	8007398 <_Balloc>
 8007622:	4602      	mov	r2, r0
 8007624:	b928      	cbnz	r0, 8007632 <__i2b+0x1a>
 8007626:	f240 1145 	movw	r1, #325	; 0x145
 800762a:	4b04      	ldr	r3, [pc, #16]	; (800763c <__i2b+0x24>)
 800762c:	4804      	ldr	r0, [pc, #16]	; (8007640 <__i2b+0x28>)
 800762e:	f001 fc3f 	bl	8008eb0 <__assert_func>
 8007632:	2301      	movs	r3, #1
 8007634:	6144      	str	r4, [r0, #20]
 8007636:	6103      	str	r3, [r0, #16]
 8007638:	bd10      	pop	{r4, pc}
 800763a:	bf00      	nop
 800763c:	08009db5 	.word	0x08009db5
 8007640:	08009dc6 	.word	0x08009dc6

08007644 <__multiply>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	4691      	mov	r9, r2
 800764a:	690a      	ldr	r2, [r1, #16]
 800764c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007650:	460c      	mov	r4, r1
 8007652:	429a      	cmp	r2, r3
 8007654:	bfbe      	ittt	lt
 8007656:	460b      	movlt	r3, r1
 8007658:	464c      	movlt	r4, r9
 800765a:	4699      	movlt	r9, r3
 800765c:	6927      	ldr	r7, [r4, #16]
 800765e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	6861      	ldr	r1, [r4, #4]
 8007666:	eb07 060a 	add.w	r6, r7, sl
 800766a:	42b3      	cmp	r3, r6
 800766c:	b085      	sub	sp, #20
 800766e:	bfb8      	it	lt
 8007670:	3101      	addlt	r1, #1
 8007672:	f7ff fe91 	bl	8007398 <_Balloc>
 8007676:	b930      	cbnz	r0, 8007686 <__multiply+0x42>
 8007678:	4602      	mov	r2, r0
 800767a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800767e:	4b43      	ldr	r3, [pc, #268]	; (800778c <__multiply+0x148>)
 8007680:	4843      	ldr	r0, [pc, #268]	; (8007790 <__multiply+0x14c>)
 8007682:	f001 fc15 	bl	8008eb0 <__assert_func>
 8007686:	f100 0514 	add.w	r5, r0, #20
 800768a:	462b      	mov	r3, r5
 800768c:	2200      	movs	r2, #0
 800768e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007692:	4543      	cmp	r3, r8
 8007694:	d321      	bcc.n	80076da <__multiply+0x96>
 8007696:	f104 0314 	add.w	r3, r4, #20
 800769a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800769e:	f109 0314 	add.w	r3, r9, #20
 80076a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	1b3a      	subs	r2, r7, r4
 80076aa:	3a15      	subs	r2, #21
 80076ac:	f022 0203 	bic.w	r2, r2, #3
 80076b0:	3204      	adds	r2, #4
 80076b2:	f104 0115 	add.w	r1, r4, #21
 80076b6:	428f      	cmp	r7, r1
 80076b8:	bf38      	it	cc
 80076ba:	2204      	movcc	r2, #4
 80076bc:	9201      	str	r2, [sp, #4]
 80076be:	9a02      	ldr	r2, [sp, #8]
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d80c      	bhi.n	80076e0 <__multiply+0x9c>
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	dd03      	ble.n	80076d2 <__multiply+0x8e>
 80076ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d05a      	beq.n	8007788 <__multiply+0x144>
 80076d2:	6106      	str	r6, [r0, #16]
 80076d4:	b005      	add	sp, #20
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	f843 2b04 	str.w	r2, [r3], #4
 80076de:	e7d8      	b.n	8007692 <__multiply+0x4e>
 80076e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80076e4:	f1ba 0f00 	cmp.w	sl, #0
 80076e8:	d023      	beq.n	8007732 <__multiply+0xee>
 80076ea:	46a9      	mov	r9, r5
 80076ec:	f04f 0c00 	mov.w	ip, #0
 80076f0:	f104 0e14 	add.w	lr, r4, #20
 80076f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076f8:	f8d9 1000 	ldr.w	r1, [r9]
 80076fc:	fa1f fb82 	uxth.w	fp, r2
 8007700:	b289      	uxth	r1, r1
 8007702:	fb0a 110b 	mla	r1, sl, fp, r1
 8007706:	4461      	add	r1, ip
 8007708:	f8d9 c000 	ldr.w	ip, [r9]
 800770c:	0c12      	lsrs	r2, r2, #16
 800770e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007712:	fb0a c202 	mla	r2, sl, r2, ip
 8007716:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800771a:	b289      	uxth	r1, r1
 800771c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007720:	4577      	cmp	r7, lr
 8007722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007726:	f849 1b04 	str.w	r1, [r9], #4
 800772a:	d8e3      	bhi.n	80076f4 <__multiply+0xb0>
 800772c:	9a01      	ldr	r2, [sp, #4]
 800772e:	f845 c002 	str.w	ip, [r5, r2]
 8007732:	9a03      	ldr	r2, [sp, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800773a:	f1b9 0f00 	cmp.w	r9, #0
 800773e:	d021      	beq.n	8007784 <__multiply+0x140>
 8007740:	46ae      	mov	lr, r5
 8007742:	f04f 0a00 	mov.w	sl, #0
 8007746:	6829      	ldr	r1, [r5, #0]
 8007748:	f104 0c14 	add.w	ip, r4, #20
 800774c:	f8bc b000 	ldrh.w	fp, [ip]
 8007750:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007754:	b289      	uxth	r1, r1
 8007756:	fb09 220b 	mla	r2, r9, fp, r2
 800775a:	4452      	add	r2, sl
 800775c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007760:	f84e 1b04 	str.w	r1, [lr], #4
 8007764:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007768:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800776c:	f8be 1000 	ldrh.w	r1, [lr]
 8007770:	4567      	cmp	r7, ip
 8007772:	fb09 110a 	mla	r1, r9, sl, r1
 8007776:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800777a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800777e:	d8e5      	bhi.n	800774c <__multiply+0x108>
 8007780:	9a01      	ldr	r2, [sp, #4]
 8007782:	50a9      	str	r1, [r5, r2]
 8007784:	3504      	adds	r5, #4
 8007786:	e79a      	b.n	80076be <__multiply+0x7a>
 8007788:	3e01      	subs	r6, #1
 800778a:	e79c      	b.n	80076c6 <__multiply+0x82>
 800778c:	08009db5 	.word	0x08009db5
 8007790:	08009dc6 	.word	0x08009dc6

08007794 <__pow5mult>:
 8007794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007798:	4615      	mov	r5, r2
 800779a:	f012 0203 	ands.w	r2, r2, #3
 800779e:	4606      	mov	r6, r0
 80077a0:	460f      	mov	r7, r1
 80077a2:	d007      	beq.n	80077b4 <__pow5mult+0x20>
 80077a4:	4c25      	ldr	r4, [pc, #148]	; (800783c <__pow5mult+0xa8>)
 80077a6:	3a01      	subs	r2, #1
 80077a8:	2300      	movs	r3, #0
 80077aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ae:	f7ff fe55 	bl	800745c <__multadd>
 80077b2:	4607      	mov	r7, r0
 80077b4:	10ad      	asrs	r5, r5, #2
 80077b6:	d03d      	beq.n	8007834 <__pow5mult+0xa0>
 80077b8:	69f4      	ldr	r4, [r6, #28]
 80077ba:	b97c      	cbnz	r4, 80077dc <__pow5mult+0x48>
 80077bc:	2010      	movs	r0, #16
 80077be:	f7ff fd37 	bl	8007230 <malloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	61f0      	str	r0, [r6, #28]
 80077c6:	b928      	cbnz	r0, 80077d4 <__pow5mult+0x40>
 80077c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077cc:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <__pow5mult+0xac>)
 80077ce:	481d      	ldr	r0, [pc, #116]	; (8007844 <__pow5mult+0xb0>)
 80077d0:	f001 fb6e 	bl	8008eb0 <__assert_func>
 80077d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d8:	6004      	str	r4, [r0, #0]
 80077da:	60c4      	str	r4, [r0, #12]
 80077dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e4:	b94c      	cbnz	r4, 80077fa <__pow5mult+0x66>
 80077e6:	f240 2171 	movw	r1, #625	; 0x271
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ff14 	bl	8007618 <__i2b>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	f04f 0900 	mov.w	r9, #0
 80077fe:	07eb      	lsls	r3, r5, #31
 8007800:	d50a      	bpl.n	8007818 <__pow5mult+0x84>
 8007802:	4639      	mov	r1, r7
 8007804:	4622      	mov	r2, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f7ff ff1c 	bl	8007644 <__multiply>
 800780c:	4680      	mov	r8, r0
 800780e:	4639      	mov	r1, r7
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff fe01 	bl	8007418 <_Bfree>
 8007816:	4647      	mov	r7, r8
 8007818:	106d      	asrs	r5, r5, #1
 800781a:	d00b      	beq.n	8007834 <__pow5mult+0xa0>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	b938      	cbnz	r0, 8007830 <__pow5mult+0x9c>
 8007820:	4622      	mov	r2, r4
 8007822:	4621      	mov	r1, r4
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ff0d 	bl	8007644 <__multiply>
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	f8c0 9000 	str.w	r9, [r0]
 8007830:	4604      	mov	r4, r0
 8007832:	e7e4      	b.n	80077fe <__pow5mult+0x6a>
 8007834:	4638      	mov	r0, r7
 8007836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783a:	bf00      	nop
 800783c:	08009f10 	.word	0x08009f10
 8007840:	08009d46 	.word	0x08009d46
 8007844:	08009dc6 	.word	0x08009dc6

08007848 <__lshift>:
 8007848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	4607      	mov	r7, r0
 8007850:	4691      	mov	r9, r2
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	6849      	ldr	r1, [r1, #4]
 8007856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800785a:	68a3      	ldr	r3, [r4, #8]
 800785c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007860:	f108 0601 	add.w	r6, r8, #1
 8007864:	42b3      	cmp	r3, r6
 8007866:	db0b      	blt.n	8007880 <__lshift+0x38>
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff fd95 	bl	8007398 <_Balloc>
 800786e:	4605      	mov	r5, r0
 8007870:	b948      	cbnz	r0, 8007886 <__lshift+0x3e>
 8007872:	4602      	mov	r2, r0
 8007874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007878:	4b27      	ldr	r3, [pc, #156]	; (8007918 <__lshift+0xd0>)
 800787a:	4828      	ldr	r0, [pc, #160]	; (800791c <__lshift+0xd4>)
 800787c:	f001 fb18 	bl	8008eb0 <__assert_func>
 8007880:	3101      	adds	r1, #1
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	e7ee      	b.n	8007864 <__lshift+0x1c>
 8007886:	2300      	movs	r3, #0
 8007888:	f100 0114 	add.w	r1, r0, #20
 800788c:	f100 0210 	add.w	r2, r0, #16
 8007890:	4618      	mov	r0, r3
 8007892:	4553      	cmp	r3, sl
 8007894:	db33      	blt.n	80078fe <__lshift+0xb6>
 8007896:	6920      	ldr	r0, [r4, #16]
 8007898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800789c:	f104 0314 	add.w	r3, r4, #20
 80078a0:	f019 091f 	ands.w	r9, r9, #31
 80078a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078ac:	d02b      	beq.n	8007906 <__lshift+0xbe>
 80078ae:	468a      	mov	sl, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	f1c9 0e20 	rsb	lr, r9, #32
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	fa00 f009 	lsl.w	r0, r0, r9
 80078bc:	4310      	orrs	r0, r2
 80078be:	f84a 0b04 	str.w	r0, [sl], #4
 80078c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c6:	459c      	cmp	ip, r3
 80078c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80078cc:	d8f3      	bhi.n	80078b6 <__lshift+0x6e>
 80078ce:	ebac 0304 	sub.w	r3, ip, r4
 80078d2:	3b15      	subs	r3, #21
 80078d4:	f023 0303 	bic.w	r3, r3, #3
 80078d8:	3304      	adds	r3, #4
 80078da:	f104 0015 	add.w	r0, r4, #21
 80078de:	4584      	cmp	ip, r0
 80078e0:	bf38      	it	cc
 80078e2:	2304      	movcc	r3, #4
 80078e4:	50ca      	str	r2, [r1, r3]
 80078e6:	b10a      	cbz	r2, 80078ec <__lshift+0xa4>
 80078e8:	f108 0602 	add.w	r6, r8, #2
 80078ec:	3e01      	subs	r6, #1
 80078ee:	4638      	mov	r0, r7
 80078f0:	4621      	mov	r1, r4
 80078f2:	612e      	str	r6, [r5, #16]
 80078f4:	f7ff fd90 	bl	8007418 <_Bfree>
 80078f8:	4628      	mov	r0, r5
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007902:	3301      	adds	r3, #1
 8007904:	e7c5      	b.n	8007892 <__lshift+0x4a>
 8007906:	3904      	subs	r1, #4
 8007908:	f853 2b04 	ldr.w	r2, [r3], #4
 800790c:	459c      	cmp	ip, r3
 800790e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007912:	d8f9      	bhi.n	8007908 <__lshift+0xc0>
 8007914:	e7ea      	b.n	80078ec <__lshift+0xa4>
 8007916:	bf00      	nop
 8007918:	08009db5 	.word	0x08009db5
 800791c:	08009dc6 	.word	0x08009dc6

08007920 <__mcmp>:
 8007920:	4603      	mov	r3, r0
 8007922:	690a      	ldr	r2, [r1, #16]
 8007924:	6900      	ldr	r0, [r0, #16]
 8007926:	b530      	push	{r4, r5, lr}
 8007928:	1a80      	subs	r0, r0, r2
 800792a:	d10d      	bne.n	8007948 <__mcmp+0x28>
 800792c:	3314      	adds	r3, #20
 800792e:	3114      	adds	r1, #20
 8007930:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007934:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007938:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800793c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007940:	4295      	cmp	r5, r2
 8007942:	d002      	beq.n	800794a <__mcmp+0x2a>
 8007944:	d304      	bcc.n	8007950 <__mcmp+0x30>
 8007946:	2001      	movs	r0, #1
 8007948:	bd30      	pop	{r4, r5, pc}
 800794a:	42a3      	cmp	r3, r4
 800794c:	d3f4      	bcc.n	8007938 <__mcmp+0x18>
 800794e:	e7fb      	b.n	8007948 <__mcmp+0x28>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	e7f8      	b.n	8007948 <__mcmp+0x28>
	...

08007958 <__mdiff>:
 8007958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460d      	mov	r5, r1
 800795e:	4607      	mov	r7, r0
 8007960:	4611      	mov	r1, r2
 8007962:	4628      	mov	r0, r5
 8007964:	4614      	mov	r4, r2
 8007966:	f7ff ffdb 	bl	8007920 <__mcmp>
 800796a:	1e06      	subs	r6, r0, #0
 800796c:	d111      	bne.n	8007992 <__mdiff+0x3a>
 800796e:	4631      	mov	r1, r6
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff fd11 	bl	8007398 <_Balloc>
 8007976:	4602      	mov	r2, r0
 8007978:	b928      	cbnz	r0, 8007986 <__mdiff+0x2e>
 800797a:	f240 2137 	movw	r1, #567	; 0x237
 800797e:	4b3a      	ldr	r3, [pc, #232]	; (8007a68 <__mdiff+0x110>)
 8007980:	483a      	ldr	r0, [pc, #232]	; (8007a6c <__mdiff+0x114>)
 8007982:	f001 fa95 	bl	8008eb0 <__assert_func>
 8007986:	2301      	movs	r3, #1
 8007988:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800798c:	4610      	mov	r0, r2
 800798e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	bfa4      	itt	ge
 8007994:	4623      	movge	r3, r4
 8007996:	462c      	movge	r4, r5
 8007998:	4638      	mov	r0, r7
 800799a:	6861      	ldr	r1, [r4, #4]
 800799c:	bfa6      	itte	ge
 800799e:	461d      	movge	r5, r3
 80079a0:	2600      	movge	r6, #0
 80079a2:	2601      	movlt	r6, #1
 80079a4:	f7ff fcf8 	bl	8007398 <_Balloc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	b918      	cbnz	r0, 80079b4 <__mdiff+0x5c>
 80079ac:	f240 2145 	movw	r1, #581	; 0x245
 80079b0:	4b2d      	ldr	r3, [pc, #180]	; (8007a68 <__mdiff+0x110>)
 80079b2:	e7e5      	b.n	8007980 <__mdiff+0x28>
 80079b4:	f102 0814 	add.w	r8, r2, #20
 80079b8:	46c2      	mov	sl, r8
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	6927      	ldr	r7, [r4, #16]
 80079c0:	60c6      	str	r6, [r0, #12]
 80079c2:	692e      	ldr	r6, [r5, #16]
 80079c4:	f104 0014 	add.w	r0, r4, #20
 80079c8:	f105 0914 	add.w	r9, r5, #20
 80079cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80079d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079d4:	3410      	adds	r4, #16
 80079d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079da:	f859 3b04 	ldr.w	r3, [r9], #4
 80079de:	fa1f f18b 	uxth.w	r1, fp
 80079e2:	4461      	add	r1, ip
 80079e4:	fa1f fc83 	uxth.w	ip, r3
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	eba1 010c 	sub.w	r1, r1, ip
 80079ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079f6:	b289      	uxth	r1, r1
 80079f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80079fc:	454e      	cmp	r6, r9
 80079fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a02:	f84a 1b04 	str.w	r1, [sl], #4
 8007a06:	d8e6      	bhi.n	80079d6 <__mdiff+0x7e>
 8007a08:	1b73      	subs	r3, r6, r5
 8007a0a:	3b15      	subs	r3, #21
 8007a0c:	f023 0303 	bic.w	r3, r3, #3
 8007a10:	3515      	adds	r5, #21
 8007a12:	3304      	adds	r3, #4
 8007a14:	42ae      	cmp	r6, r5
 8007a16:	bf38      	it	cc
 8007a18:	2304      	movcc	r3, #4
 8007a1a:	4418      	add	r0, r3
 8007a1c:	4443      	add	r3, r8
 8007a1e:	461e      	mov	r6, r3
 8007a20:	4605      	mov	r5, r0
 8007a22:	4575      	cmp	r5, lr
 8007a24:	d30e      	bcc.n	8007a44 <__mdiff+0xec>
 8007a26:	f10e 0103 	add.w	r1, lr, #3
 8007a2a:	1a09      	subs	r1, r1, r0
 8007a2c:	f021 0103 	bic.w	r1, r1, #3
 8007a30:	3803      	subs	r0, #3
 8007a32:	4586      	cmp	lr, r0
 8007a34:	bf38      	it	cc
 8007a36:	2100      	movcc	r1, #0
 8007a38:	440b      	add	r3, r1
 8007a3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a3e:	b189      	cbz	r1, 8007a64 <__mdiff+0x10c>
 8007a40:	6117      	str	r7, [r2, #16]
 8007a42:	e7a3      	b.n	800798c <__mdiff+0x34>
 8007a44:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a48:	fa1f f188 	uxth.w	r1, r8
 8007a4c:	4461      	add	r1, ip
 8007a4e:	140c      	asrs	r4, r1, #16
 8007a50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a54:	b289      	uxth	r1, r1
 8007a56:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a5a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a5e:	f846 1b04 	str.w	r1, [r6], #4
 8007a62:	e7de      	b.n	8007a22 <__mdiff+0xca>
 8007a64:	3f01      	subs	r7, #1
 8007a66:	e7e8      	b.n	8007a3a <__mdiff+0xe2>
 8007a68:	08009db5 	.word	0x08009db5
 8007a6c:	08009dc6 	.word	0x08009dc6

08007a70 <__ulp>:
 8007a70:	4b0e      	ldr	r3, [pc, #56]	; (8007aac <__ulp+0x3c>)
 8007a72:	400b      	ands	r3, r1
 8007a74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc08      	bgt.n	8007a8e <__ulp+0x1e>
 8007a7c:	425b      	negs	r3, r3
 8007a7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a86:	da04      	bge.n	8007a92 <__ulp+0x22>
 8007a88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a8c:	4113      	asrs	r3, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	e008      	b.n	8007aa4 <__ulp+0x34>
 8007a92:	f1a2 0314 	sub.w	r3, r2, #20
 8007a96:	2b1e      	cmp	r3, #30
 8007a98:	bfd6      	itet	le
 8007a9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a9e:	2201      	movgt	r2, #1
 8007aa0:	40da      	lsrle	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	7ff00000 	.word	0x7ff00000

08007ab0 <__b2d>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	6905      	ldr	r5, [r0, #16]
 8007ab4:	f100 0714 	add.w	r7, r0, #20
 8007ab8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007abc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007ac0:	1f2e      	subs	r6, r5, #4
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7ff fd5a 	bl	800757c <__hi0bits>
 8007ac8:	f1c0 0220 	rsb	r2, r0, #32
 8007acc:	280a      	cmp	r0, #10
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007b3c <__b2d+0x8c>
 8007ad4:	600a      	str	r2, [r1, #0]
 8007ad6:	dc12      	bgt.n	8007afe <__b2d+0x4e>
 8007ad8:	f1c0 0e0b 	rsb	lr, r0, #11
 8007adc:	fa24 f20e 	lsr.w	r2, r4, lr
 8007ae0:	42b7      	cmp	r7, r6
 8007ae2:	ea42 010c 	orr.w	r1, r2, ip
 8007ae6:	bf2c      	ite	cs
 8007ae8:	2200      	movcs	r2, #0
 8007aea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007aee:	3315      	adds	r3, #21
 8007af0:	fa04 f303 	lsl.w	r3, r4, r3
 8007af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af8:	431a      	orrs	r2, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afe:	42b7      	cmp	r7, r6
 8007b00:	bf2e      	itee	cs
 8007b02:	2200      	movcs	r2, #0
 8007b04:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007b08:	f1a5 0608 	subcc.w	r6, r5, #8
 8007b0c:	3b0b      	subs	r3, #11
 8007b0e:	d012      	beq.n	8007b36 <__b2d+0x86>
 8007b10:	f1c3 0520 	rsb	r5, r3, #32
 8007b14:	fa22 f105 	lsr.w	r1, r2, r5
 8007b18:	409c      	lsls	r4, r3
 8007b1a:	430c      	orrs	r4, r1
 8007b1c:	42be      	cmp	r6, r7
 8007b1e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007b22:	bf94      	ite	ls
 8007b24:	2400      	movls	r4, #0
 8007b26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007b2a:	409a      	lsls	r2, r3
 8007b2c:	40ec      	lsrs	r4, r5
 8007b2e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b32:	4322      	orrs	r2, r4
 8007b34:	e7e1      	b.n	8007afa <__b2d+0x4a>
 8007b36:	ea44 010c 	orr.w	r1, r4, ip
 8007b3a:	e7de      	b.n	8007afa <__b2d+0x4a>
 8007b3c:	3ff00000 	.word	0x3ff00000

08007b40 <__d2b>:
 8007b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b42:	2101      	movs	r1, #1
 8007b44:	4617      	mov	r7, r2
 8007b46:	461c      	mov	r4, r3
 8007b48:	9e08      	ldr	r6, [sp, #32]
 8007b4a:	f7ff fc25 	bl	8007398 <_Balloc>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b930      	cbnz	r0, 8007b60 <__d2b+0x20>
 8007b52:	4602      	mov	r2, r0
 8007b54:	f240 310f 	movw	r1, #783	; 0x30f
 8007b58:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <__d2b+0xa4>)
 8007b5a:	4823      	ldr	r0, [pc, #140]	; (8007be8 <__d2b+0xa8>)
 8007b5c:	f001 f9a8 	bl	8008eb0 <__assert_func>
 8007b60:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007b64:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b68:	bb24      	cbnz	r4, 8007bb4 <__d2b+0x74>
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	d026      	beq.n	8007bbe <__d2b+0x7e>
 8007b70:	4668      	mov	r0, sp
 8007b72:	9700      	str	r7, [sp, #0]
 8007b74:	f7ff fd22 	bl	80075bc <__lo0bits>
 8007b78:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b7c:	b1e8      	cbz	r0, 8007bba <__d2b+0x7a>
 8007b7e:	f1c0 0320 	rsb	r3, r0, #32
 8007b82:	fa02 f303 	lsl.w	r3, r2, r3
 8007b86:	430b      	orrs	r3, r1
 8007b88:	40c2      	lsrs	r2, r0
 8007b8a:	616b      	str	r3, [r5, #20]
 8007b8c:	9201      	str	r2, [sp, #4]
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf14      	ite	ne
 8007b94:	2102      	movne	r1, #2
 8007b96:	2101      	moveq	r1, #1
 8007b98:	61ab      	str	r3, [r5, #24]
 8007b9a:	6129      	str	r1, [r5, #16]
 8007b9c:	b1bc      	cbz	r4, 8007bce <__d2b+0x8e>
 8007b9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ba2:	4404      	add	r4, r0
 8007ba4:	6034      	str	r4, [r6, #0]
 8007ba6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bac:	6018      	str	r0, [r3, #0]
 8007bae:	4628      	mov	r0, r5
 8007bb0:	b003      	add	sp, #12
 8007bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bb8:	e7d7      	b.n	8007b6a <__d2b+0x2a>
 8007bba:	6169      	str	r1, [r5, #20]
 8007bbc:	e7e7      	b.n	8007b8e <__d2b+0x4e>
 8007bbe:	a801      	add	r0, sp, #4
 8007bc0:	f7ff fcfc 	bl	80075bc <__lo0bits>
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	616b      	str	r3, [r5, #20]
 8007bca:	3020      	adds	r0, #32
 8007bcc:	e7e5      	b.n	8007b9a <__d2b+0x5a>
 8007bce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bd2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007bd6:	6030      	str	r0, [r6, #0]
 8007bd8:	6918      	ldr	r0, [r3, #16]
 8007bda:	f7ff fccf 	bl	800757c <__hi0bits>
 8007bde:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007be2:	e7e2      	b.n	8007baa <__d2b+0x6a>
 8007be4:	08009db5 	.word	0x08009db5
 8007be8:	08009dc6 	.word	0x08009dc6

08007bec <__ratio>:
 8007bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4688      	mov	r8, r1
 8007bf2:	4669      	mov	r1, sp
 8007bf4:	4681      	mov	r9, r0
 8007bf6:	f7ff ff5b 	bl	8007ab0 <__b2d>
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	460d      	mov	r5, r1
 8007c00:	4640      	mov	r0, r8
 8007c02:	a901      	add	r1, sp, #4
 8007c04:	f7ff ff54 	bl	8007ab0 <__b2d>
 8007c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c0c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c10:	468b      	mov	fp, r1
 8007c12:	eba3 0c02 	sub.w	ip, r3, r2
 8007c16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bfd5      	itete	le
 8007c24:	460a      	movle	r2, r1
 8007c26:	462a      	movgt	r2, r5
 8007c28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c2c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c30:	bfd8      	it	le
 8007c32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c36:	465b      	mov	r3, fp
 8007c38:	4602      	mov	r2, r0
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7f8 fd8d 	bl	800075c <__aeabi_ddiv>
 8007c42:	b003      	add	sp, #12
 8007c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c48 <__copybits>:
 8007c48:	3901      	subs	r1, #1
 8007c4a:	b570      	push	{r4, r5, r6, lr}
 8007c4c:	1149      	asrs	r1, r1, #5
 8007c4e:	6914      	ldr	r4, [r2, #16]
 8007c50:	3101      	adds	r1, #1
 8007c52:	f102 0314 	add.w	r3, r2, #20
 8007c56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c5e:	1f05      	subs	r5, r0, #4
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d30c      	bcc.n	8007c7e <__copybits+0x36>
 8007c64:	1aa3      	subs	r3, r4, r2
 8007c66:	3b11      	subs	r3, #17
 8007c68:	f023 0303 	bic.w	r3, r3, #3
 8007c6c:	3211      	adds	r2, #17
 8007c6e:	42a2      	cmp	r2, r4
 8007c70:	bf88      	it	hi
 8007c72:	2300      	movhi	r3, #0
 8007c74:	4418      	add	r0, r3
 8007c76:	2300      	movs	r3, #0
 8007c78:	4288      	cmp	r0, r1
 8007c7a:	d305      	bcc.n	8007c88 <__copybits+0x40>
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c82:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c86:	e7eb      	b.n	8007c60 <__copybits+0x18>
 8007c88:	f840 3b04 	str.w	r3, [r0], #4
 8007c8c:	e7f4      	b.n	8007c78 <__copybits+0x30>

08007c8e <__any_on>:
 8007c8e:	f100 0214 	add.w	r2, r0, #20
 8007c92:	6900      	ldr	r0, [r0, #16]
 8007c94:	114b      	asrs	r3, r1, #5
 8007c96:	4298      	cmp	r0, r3
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	db11      	blt.n	8007cc0 <__any_on+0x32>
 8007c9c:	dd0a      	ble.n	8007cb4 <__any_on+0x26>
 8007c9e:	f011 011f 	ands.w	r1, r1, #31
 8007ca2:	d007      	beq.n	8007cb4 <__any_on+0x26>
 8007ca4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ca8:	fa24 f001 	lsr.w	r0, r4, r1
 8007cac:	fa00 f101 	lsl.w	r1, r0, r1
 8007cb0:	428c      	cmp	r4, r1
 8007cb2:	d10b      	bne.n	8007ccc <__any_on+0x3e>
 8007cb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d803      	bhi.n	8007cc4 <__any_on+0x36>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	bd10      	pop	{r4, pc}
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	e7f7      	b.n	8007cb4 <__any_on+0x26>
 8007cc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d0f5      	beq.n	8007cb8 <__any_on+0x2a>
 8007ccc:	2001      	movs	r0, #1
 8007cce:	e7f6      	b.n	8007cbe <__any_on+0x30>

08007cd0 <sulp>:
 8007cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd4:	460f      	mov	r7, r1
 8007cd6:	4690      	mov	r8, r2
 8007cd8:	f7ff feca 	bl	8007a70 <__ulp>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	460d      	mov	r5, r1
 8007ce0:	f1b8 0f00 	cmp.w	r8, #0
 8007ce4:	d011      	beq.n	8007d0a <sulp+0x3a>
 8007ce6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007cea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dd0b      	ble.n	8007d0a <sulp+0x3a>
 8007cf2:	2400      	movs	r4, #0
 8007cf4:	051b      	lsls	r3, r3, #20
 8007cf6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cfa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	f7f8 fc01 	bl	8000508 <__aeabi_dmul>
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d12:	0000      	movs	r0, r0
 8007d14:	0000      	movs	r0, r0
	...

08007d18 <_strtod_l>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	b09f      	sub	sp, #124	; 0x7c
 8007d1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d20:	2200      	movs	r2, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	921a      	str	r2, [sp, #104]	; 0x68
 8007d26:	460d      	mov	r5, r1
 8007d28:	f04f 0800 	mov.w	r8, #0
 8007d2c:	f04f 0900 	mov.w	r9, #0
 8007d30:	460a      	mov	r2, r1
 8007d32:	9219      	str	r2, [sp, #100]	; 0x64
 8007d34:	7811      	ldrb	r1, [r2, #0]
 8007d36:	292b      	cmp	r1, #43	; 0x2b
 8007d38:	d04a      	beq.n	8007dd0 <_strtod_l+0xb8>
 8007d3a:	d838      	bhi.n	8007dae <_strtod_l+0x96>
 8007d3c:	290d      	cmp	r1, #13
 8007d3e:	d832      	bhi.n	8007da6 <_strtod_l+0x8e>
 8007d40:	2908      	cmp	r1, #8
 8007d42:	d832      	bhi.n	8007daa <_strtod_l+0x92>
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d03b      	beq.n	8007dc0 <_strtod_l+0xa8>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8007d4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007d4e:	7832      	ldrb	r2, [r6, #0]
 8007d50:	2a30      	cmp	r2, #48	; 0x30
 8007d52:	f040 80b2 	bne.w	8007eba <_strtod_l+0x1a2>
 8007d56:	7872      	ldrb	r2, [r6, #1]
 8007d58:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d5c:	2a58      	cmp	r2, #88	; 0x58
 8007d5e:	d16e      	bne.n	8007e3e <_strtod_l+0x126>
 8007d60:	9302      	str	r3, [sp, #8]
 8007d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d64:	4620      	mov	r0, r4
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	ab1a      	add	r3, sp, #104	; 0x68
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4a8c      	ldr	r2, [pc, #560]	; (8007fa0 <_strtod_l+0x288>)
 8007d6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d70:	a919      	add	r1, sp, #100	; 0x64
 8007d72:	f001 f937 	bl	8008fe4 <__gethex>
 8007d76:	f010 070f 	ands.w	r7, r0, #15
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	d005      	beq.n	8007d8a <_strtod_l+0x72>
 8007d7e:	2f06      	cmp	r7, #6
 8007d80:	d128      	bne.n	8007dd4 <_strtod_l+0xbc>
 8007d82:	2300      	movs	r3, #0
 8007d84:	3601      	adds	r6, #1
 8007d86:	9619      	str	r6, [sp, #100]	; 0x64
 8007d88:	930e      	str	r3, [sp, #56]	; 0x38
 8007d8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 85a0 	bne.w	80088d2 <_strtod_l+0xbba>
 8007d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d94:	b1cb      	cbz	r3, 8007dca <_strtod_l+0xb2>
 8007d96:	4642      	mov	r2, r8
 8007d98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	b01f      	add	sp, #124	; 0x7c
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	2920      	cmp	r1, #32
 8007da8:	d1ce      	bne.n	8007d48 <_strtod_l+0x30>
 8007daa:	3201      	adds	r2, #1
 8007dac:	e7c1      	b.n	8007d32 <_strtod_l+0x1a>
 8007dae:	292d      	cmp	r1, #45	; 0x2d
 8007db0:	d1ca      	bne.n	8007d48 <_strtod_l+0x30>
 8007db2:	2101      	movs	r1, #1
 8007db4:	910e      	str	r1, [sp, #56]	; 0x38
 8007db6:	1c51      	adds	r1, r2, #1
 8007db8:	9119      	str	r1, [sp, #100]	; 0x64
 8007dba:	7852      	ldrb	r2, [r2, #1]
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d1c5      	bne.n	8007d4c <_strtod_l+0x34>
 8007dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dc2:	9519      	str	r5, [sp, #100]	; 0x64
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 8582 	bne.w	80088ce <_strtod_l+0xbb6>
 8007dca:	4642      	mov	r2, r8
 8007dcc:	464b      	mov	r3, r9
 8007dce:	e7e5      	b.n	8007d9c <_strtod_l+0x84>
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	e7ef      	b.n	8007db4 <_strtod_l+0x9c>
 8007dd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007dd6:	b13a      	cbz	r2, 8007de8 <_strtod_l+0xd0>
 8007dd8:	2135      	movs	r1, #53	; 0x35
 8007dda:	a81c      	add	r0, sp, #112	; 0x70
 8007ddc:	f7ff ff34 	bl	8007c48 <__copybits>
 8007de0:	4620      	mov	r0, r4
 8007de2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007de4:	f7ff fb18 	bl	8007418 <_Bfree>
 8007de8:	3f01      	subs	r7, #1
 8007dea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007dec:	2f04      	cmp	r7, #4
 8007dee:	d806      	bhi.n	8007dfe <_strtod_l+0xe6>
 8007df0:	e8df f007 	tbb	[pc, r7]
 8007df4:	201d0314 	.word	0x201d0314
 8007df8:	14          	.byte	0x14
 8007df9:	00          	.byte	0x00
 8007dfa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007dfe:	05e9      	lsls	r1, r5, #23
 8007e00:	bf48      	it	mi
 8007e02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007e06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e0a:	0d1b      	lsrs	r3, r3, #20
 8007e0c:	051b      	lsls	r3, r3, #20
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1bb      	bne.n	8007d8a <_strtod_l+0x72>
 8007e12:	f7fe fb17 	bl	8006444 <__errno>
 8007e16:	2322      	movs	r3, #34	; 0x22
 8007e18:	6003      	str	r3, [r0, #0]
 8007e1a:	e7b6      	b.n	8007d8a <_strtod_l+0x72>
 8007e1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e20:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007e24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007e2c:	e7e7      	b.n	8007dfe <_strtod_l+0xe6>
 8007e2e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007fa4 <_strtod_l+0x28c>
 8007e32:	e7e4      	b.n	8007dfe <_strtod_l+0xe6>
 8007e34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007e38:	f04f 38ff 	mov.w	r8, #4294967295
 8007e3c:	e7df      	b.n	8007dfe <_strtod_l+0xe6>
 8007e3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	9219      	str	r2, [sp, #100]	; 0x64
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b30      	cmp	r3, #48	; 0x30
 8007e48:	d0f9      	beq.n	8007e3e <_strtod_l+0x126>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d09d      	beq.n	8007d8a <_strtod_l+0x72>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f04f 0a00 	mov.w	sl, #0
 8007e54:	220a      	movs	r2, #10
 8007e56:	46d3      	mov	fp, sl
 8007e58:	9305      	str	r3, [sp, #20]
 8007e5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e5c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e62:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007e64:	7806      	ldrb	r6, [r0, #0]
 8007e66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e6a:	b2d9      	uxtb	r1, r3
 8007e6c:	2909      	cmp	r1, #9
 8007e6e:	d926      	bls.n	8007ebe <_strtod_l+0x1a6>
 8007e70:	2201      	movs	r2, #1
 8007e72:	494d      	ldr	r1, [pc, #308]	; (8007fa8 <_strtod_l+0x290>)
 8007e74:	f000 ffe6 	bl	8008e44 <strncmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d030      	beq.n	8007ede <_strtod_l+0x1c6>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	4632      	mov	r2, r6
 8007e80:	4603      	mov	r3, r0
 8007e82:	465e      	mov	r6, fp
 8007e84:	9008      	str	r0, [sp, #32]
 8007e86:	2a65      	cmp	r2, #101	; 0x65
 8007e88:	d001      	beq.n	8007e8e <_strtod_l+0x176>
 8007e8a:	2a45      	cmp	r2, #69	; 0x45
 8007e8c:	d113      	bne.n	8007eb6 <_strtod_l+0x19e>
 8007e8e:	b91e      	cbnz	r6, 8007e98 <_strtod_l+0x180>
 8007e90:	9a05      	ldr	r2, [sp, #20]
 8007e92:	4302      	orrs	r2, r0
 8007e94:	d094      	beq.n	8007dc0 <_strtod_l+0xa8>
 8007e96:	2600      	movs	r6, #0
 8007e98:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007e9a:	1c6a      	adds	r2, r5, #1
 8007e9c:	9219      	str	r2, [sp, #100]	; 0x64
 8007e9e:	786a      	ldrb	r2, [r5, #1]
 8007ea0:	2a2b      	cmp	r2, #43	; 0x2b
 8007ea2:	d074      	beq.n	8007f8e <_strtod_l+0x276>
 8007ea4:	2a2d      	cmp	r2, #45	; 0x2d
 8007ea6:	d078      	beq.n	8007f9a <_strtod_l+0x282>
 8007ea8:	f04f 0c00 	mov.w	ip, #0
 8007eac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007eb0:	2909      	cmp	r1, #9
 8007eb2:	d97f      	bls.n	8007fb4 <_strtod_l+0x29c>
 8007eb4:	9519      	str	r5, [sp, #100]	; 0x64
 8007eb6:	2700      	movs	r7, #0
 8007eb8:	e09e      	b.n	8007ff8 <_strtod_l+0x2e0>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e7c8      	b.n	8007e50 <_strtod_l+0x138>
 8007ebe:	f1bb 0f08 	cmp.w	fp, #8
 8007ec2:	bfd8      	it	le
 8007ec4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007ec6:	f100 0001 	add.w	r0, r0, #1
 8007eca:	bfd6      	itet	le
 8007ecc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ed0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007ed4:	930a      	strle	r3, [sp, #40]	; 0x28
 8007ed6:	f10b 0b01 	add.w	fp, fp, #1
 8007eda:	9019      	str	r0, [sp, #100]	; 0x64
 8007edc:	e7c1      	b.n	8007e62 <_strtod_l+0x14a>
 8007ede:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ee4:	785a      	ldrb	r2, [r3, #1]
 8007ee6:	f1bb 0f00 	cmp.w	fp, #0
 8007eea:	d037      	beq.n	8007f5c <_strtod_l+0x244>
 8007eec:	465e      	mov	r6, fp
 8007eee:	9008      	str	r0, [sp, #32]
 8007ef0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ef4:	2b09      	cmp	r3, #9
 8007ef6:	d912      	bls.n	8007f1e <_strtod_l+0x206>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7c4      	b.n	8007e86 <_strtod_l+0x16e>
 8007efc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007efe:	3001      	adds	r0, #1
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	9219      	str	r2, [sp, #100]	; 0x64
 8007f04:	785a      	ldrb	r2, [r3, #1]
 8007f06:	2a30      	cmp	r2, #48	; 0x30
 8007f08:	d0f8      	beq.n	8007efc <_strtod_l+0x1e4>
 8007f0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	f200 84e4 	bhi.w	80088dc <_strtod_l+0xbc4>
 8007f14:	9008      	str	r0, [sp, #32]
 8007f16:	2000      	movs	r0, #0
 8007f18:	4606      	mov	r6, r0
 8007f1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f1e:	3a30      	subs	r2, #48	; 0x30
 8007f20:	f100 0301 	add.w	r3, r0, #1
 8007f24:	d014      	beq.n	8007f50 <_strtod_l+0x238>
 8007f26:	9908      	ldr	r1, [sp, #32]
 8007f28:	eb00 0c06 	add.w	ip, r0, r6
 8007f2c:	4419      	add	r1, r3
 8007f2e:	9108      	str	r1, [sp, #32]
 8007f30:	4633      	mov	r3, r6
 8007f32:	210a      	movs	r1, #10
 8007f34:	4563      	cmp	r3, ip
 8007f36:	d113      	bne.n	8007f60 <_strtod_l+0x248>
 8007f38:	1833      	adds	r3, r6, r0
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	f106 0601 	add.w	r6, r6, #1
 8007f40:	4406      	add	r6, r0
 8007f42:	dc1a      	bgt.n	8007f7a <_strtod_l+0x262>
 8007f44:	230a      	movs	r3, #10
 8007f46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f48:	fb03 2301 	mla	r3, r3, r1, r2
 8007f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f52:	4618      	mov	r0, r3
 8007f54:	1c51      	adds	r1, r2, #1
 8007f56:	9119      	str	r1, [sp, #100]	; 0x64
 8007f58:	7852      	ldrb	r2, [r2, #1]
 8007f5a:	e7c9      	b.n	8007ef0 <_strtod_l+0x1d8>
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	e7d2      	b.n	8007f06 <_strtod_l+0x1ee>
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	f103 0301 	add.w	r3, r3, #1
 8007f66:	dc03      	bgt.n	8007f70 <_strtod_l+0x258>
 8007f68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007f6a:	434f      	muls	r7, r1
 8007f6c:	970a      	str	r7, [sp, #40]	; 0x28
 8007f6e:	e7e1      	b.n	8007f34 <_strtod_l+0x21c>
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	bfd8      	it	le
 8007f74:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007f78:	e7dc      	b.n	8007f34 <_strtod_l+0x21c>
 8007f7a:	2e10      	cmp	r6, #16
 8007f7c:	bfdc      	itt	le
 8007f7e:	230a      	movle	r3, #10
 8007f80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007f84:	e7e3      	b.n	8007f4e <_strtod_l+0x236>
 8007f86:	2300      	movs	r3, #0
 8007f88:	9308      	str	r3, [sp, #32]
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e780      	b.n	8007e90 <_strtod_l+0x178>
 8007f8e:	f04f 0c00 	mov.w	ip, #0
 8007f92:	1caa      	adds	r2, r5, #2
 8007f94:	9219      	str	r2, [sp, #100]	; 0x64
 8007f96:	78aa      	ldrb	r2, [r5, #2]
 8007f98:	e788      	b.n	8007eac <_strtod_l+0x194>
 8007f9a:	f04f 0c01 	mov.w	ip, #1
 8007f9e:	e7f8      	b.n	8007f92 <_strtod_l+0x27a>
 8007fa0:	08009f20 	.word	0x08009f20
 8007fa4:	7ff00000 	.word	0x7ff00000
 8007fa8:	08009f1c 	.word	0x08009f1c
 8007fac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007fae:	1c51      	adds	r1, r2, #1
 8007fb0:	9119      	str	r1, [sp, #100]	; 0x64
 8007fb2:	7852      	ldrb	r2, [r2, #1]
 8007fb4:	2a30      	cmp	r2, #48	; 0x30
 8007fb6:	d0f9      	beq.n	8007fac <_strtod_l+0x294>
 8007fb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007fbc:	2908      	cmp	r1, #8
 8007fbe:	f63f af7a 	bhi.w	8007eb6 <_strtod_l+0x19e>
 8007fc2:	3a30      	subs	r2, #48	; 0x30
 8007fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007fc8:	920c      	str	r2, [sp, #48]	; 0x30
 8007fca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007fcc:	1c57      	adds	r7, r2, #1
 8007fce:	9719      	str	r7, [sp, #100]	; 0x64
 8007fd0:	7852      	ldrb	r2, [r2, #1]
 8007fd2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007fd6:	f1be 0f09 	cmp.w	lr, #9
 8007fda:	d938      	bls.n	800804e <_strtod_l+0x336>
 8007fdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fde:	1a7f      	subs	r7, r7, r1
 8007fe0:	2f08      	cmp	r7, #8
 8007fe2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007fe6:	dc03      	bgt.n	8007ff0 <_strtod_l+0x2d8>
 8007fe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fea:	428f      	cmp	r7, r1
 8007fec:	bfa8      	it	ge
 8007fee:	460f      	movge	r7, r1
 8007ff0:	f1bc 0f00 	cmp.w	ip, #0
 8007ff4:	d000      	beq.n	8007ff8 <_strtod_l+0x2e0>
 8007ff6:	427f      	negs	r7, r7
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	d14f      	bne.n	800809c <_strtod_l+0x384>
 8007ffc:	9905      	ldr	r1, [sp, #20]
 8007ffe:	4301      	orrs	r1, r0
 8008000:	f47f aec3 	bne.w	8007d8a <_strtod_l+0x72>
 8008004:	2b00      	cmp	r3, #0
 8008006:	f47f aedb 	bne.w	8007dc0 <_strtod_l+0xa8>
 800800a:	2a69      	cmp	r2, #105	; 0x69
 800800c:	d029      	beq.n	8008062 <_strtod_l+0x34a>
 800800e:	dc26      	bgt.n	800805e <_strtod_l+0x346>
 8008010:	2a49      	cmp	r2, #73	; 0x49
 8008012:	d026      	beq.n	8008062 <_strtod_l+0x34a>
 8008014:	2a4e      	cmp	r2, #78	; 0x4e
 8008016:	f47f aed3 	bne.w	8007dc0 <_strtod_l+0xa8>
 800801a:	499a      	ldr	r1, [pc, #616]	; (8008284 <_strtod_l+0x56c>)
 800801c:	a819      	add	r0, sp, #100	; 0x64
 800801e:	f001 fa23 	bl	8009468 <__match>
 8008022:	2800      	cmp	r0, #0
 8008024:	f43f aecc 	beq.w	8007dc0 <_strtod_l+0xa8>
 8008028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b28      	cmp	r3, #40	; 0x28
 800802e:	d12f      	bne.n	8008090 <_strtod_l+0x378>
 8008030:	4995      	ldr	r1, [pc, #596]	; (8008288 <_strtod_l+0x570>)
 8008032:	aa1c      	add	r2, sp, #112	; 0x70
 8008034:	a819      	add	r0, sp, #100	; 0x64
 8008036:	f001 fa2b 	bl	8009490 <__hexnan>
 800803a:	2805      	cmp	r0, #5
 800803c:	d128      	bne.n	8008090 <_strtod_l+0x378>
 800803e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008040:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008044:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008048:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800804c:	e69d      	b.n	8007d8a <_strtod_l+0x72>
 800804e:	210a      	movs	r1, #10
 8008050:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008052:	fb01 2107 	mla	r1, r1, r7, r2
 8008056:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800805a:	9209      	str	r2, [sp, #36]	; 0x24
 800805c:	e7b5      	b.n	8007fca <_strtod_l+0x2b2>
 800805e:	2a6e      	cmp	r2, #110	; 0x6e
 8008060:	e7d9      	b.n	8008016 <_strtod_l+0x2fe>
 8008062:	498a      	ldr	r1, [pc, #552]	; (800828c <_strtod_l+0x574>)
 8008064:	a819      	add	r0, sp, #100	; 0x64
 8008066:	f001 f9ff 	bl	8009468 <__match>
 800806a:	2800      	cmp	r0, #0
 800806c:	f43f aea8 	beq.w	8007dc0 <_strtod_l+0xa8>
 8008070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008072:	4987      	ldr	r1, [pc, #540]	; (8008290 <_strtod_l+0x578>)
 8008074:	3b01      	subs	r3, #1
 8008076:	a819      	add	r0, sp, #100	; 0x64
 8008078:	9319      	str	r3, [sp, #100]	; 0x64
 800807a:	f001 f9f5 	bl	8009468 <__match>
 800807e:	b910      	cbnz	r0, 8008086 <_strtod_l+0x36e>
 8008080:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008082:	3301      	adds	r3, #1
 8008084:	9319      	str	r3, [sp, #100]	; 0x64
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008294 <_strtod_l+0x57c>
 800808e:	e67c      	b.n	8007d8a <_strtod_l+0x72>
 8008090:	4881      	ldr	r0, [pc, #516]	; (8008298 <_strtod_l+0x580>)
 8008092:	f000 ff07 	bl	8008ea4 <nan>
 8008096:	4680      	mov	r8, r0
 8008098:	4689      	mov	r9, r1
 800809a:	e676      	b.n	8007d8a <_strtod_l+0x72>
 800809c:	9b08      	ldr	r3, [sp, #32]
 800809e:	f1bb 0f00 	cmp.w	fp, #0
 80080a2:	bf08      	it	eq
 80080a4:	46b3      	moveq	fp, r6
 80080a6:	1afb      	subs	r3, r7, r3
 80080a8:	2e10      	cmp	r6, #16
 80080aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080ac:	4635      	mov	r5, r6
 80080ae:	9309      	str	r3, [sp, #36]	; 0x24
 80080b0:	bfa8      	it	ge
 80080b2:	2510      	movge	r5, #16
 80080b4:	f7f8 f9ae 	bl	8000414 <__aeabi_ui2d>
 80080b8:	2e09      	cmp	r6, #9
 80080ba:	4680      	mov	r8, r0
 80080bc:	4689      	mov	r9, r1
 80080be:	dd13      	ble.n	80080e8 <_strtod_l+0x3d0>
 80080c0:	4b76      	ldr	r3, [pc, #472]	; (800829c <_strtod_l+0x584>)
 80080c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80080c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80080ca:	f7f8 fa1d 	bl	8000508 <__aeabi_dmul>
 80080ce:	4680      	mov	r8, r0
 80080d0:	4650      	mov	r0, sl
 80080d2:	4689      	mov	r9, r1
 80080d4:	f7f8 f99e 	bl	8000414 <__aeabi_ui2d>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4640      	mov	r0, r8
 80080de:	4649      	mov	r1, r9
 80080e0:	f7f8 f85c 	bl	800019c <__adddf3>
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	2e0f      	cmp	r6, #15
 80080ea:	dc36      	bgt.n	800815a <_strtod_l+0x442>
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f43f ae4b 	beq.w	8007d8a <_strtod_l+0x72>
 80080f4:	dd22      	ble.n	800813c <_strtod_l+0x424>
 80080f6:	2b16      	cmp	r3, #22
 80080f8:	dc09      	bgt.n	800810e <_strtod_l+0x3f6>
 80080fa:	4968      	ldr	r1, [pc, #416]	; (800829c <_strtod_l+0x584>)
 80080fc:	4642      	mov	r2, r8
 80080fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008102:	464b      	mov	r3, r9
 8008104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008108:	f7f8 f9fe 	bl	8000508 <__aeabi_dmul>
 800810c:	e7c3      	b.n	8008096 <_strtod_l+0x37e>
 800810e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008110:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008114:	4293      	cmp	r3, r2
 8008116:	db20      	blt.n	800815a <_strtod_l+0x442>
 8008118:	4c60      	ldr	r4, [pc, #384]	; (800829c <_strtod_l+0x584>)
 800811a:	f1c6 060f 	rsb	r6, r6, #15
 800811e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008122:	4642      	mov	r2, r8
 8008124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008128:	464b      	mov	r3, r9
 800812a:	f7f8 f9ed 	bl	8000508 <__aeabi_dmul>
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	1b9e      	subs	r6, r3, r6
 8008132:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008136:	e9d4 2300 	ldrd	r2, r3, [r4]
 800813a:	e7e5      	b.n	8008108 <_strtod_l+0x3f0>
 800813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813e:	3316      	adds	r3, #22
 8008140:	db0b      	blt.n	800815a <_strtod_l+0x442>
 8008142:	9b08      	ldr	r3, [sp, #32]
 8008144:	4640      	mov	r0, r8
 8008146:	1bdf      	subs	r7, r3, r7
 8008148:	4b54      	ldr	r3, [pc, #336]	; (800829c <_strtod_l+0x584>)
 800814a:	4649      	mov	r1, r9
 800814c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008154:	f7f8 fb02 	bl	800075c <__aeabi_ddiv>
 8008158:	e79d      	b.n	8008096 <_strtod_l+0x37e>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	1b75      	subs	r5, r6, r5
 800815e:	441d      	add	r5, r3
 8008160:	2d00      	cmp	r5, #0
 8008162:	dd70      	ble.n	8008246 <_strtod_l+0x52e>
 8008164:	f015 030f 	ands.w	r3, r5, #15
 8008168:	d00a      	beq.n	8008180 <_strtod_l+0x468>
 800816a:	494c      	ldr	r1, [pc, #304]	; (800829c <_strtod_l+0x584>)
 800816c:	4642      	mov	r2, r8
 800816e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008176:	464b      	mov	r3, r9
 8008178:	f7f8 f9c6 	bl	8000508 <__aeabi_dmul>
 800817c:	4680      	mov	r8, r0
 800817e:	4689      	mov	r9, r1
 8008180:	f035 050f 	bics.w	r5, r5, #15
 8008184:	d04d      	beq.n	8008222 <_strtod_l+0x50a>
 8008186:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800818a:	dd22      	ble.n	80081d2 <_strtod_l+0x4ba>
 800818c:	2600      	movs	r6, #0
 800818e:	46b3      	mov	fp, r6
 8008190:	960b      	str	r6, [sp, #44]	; 0x2c
 8008192:	9608      	str	r6, [sp, #32]
 8008194:	2322      	movs	r3, #34	; 0x22
 8008196:	f04f 0800 	mov.w	r8, #0
 800819a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008294 <_strtod_l+0x57c>
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f43f adf1 	beq.w	8007d8a <_strtod_l+0x72>
 80081a8:	4620      	mov	r0, r4
 80081aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081ac:	f7ff f934 	bl	8007418 <_Bfree>
 80081b0:	4620      	mov	r0, r4
 80081b2:	9908      	ldr	r1, [sp, #32]
 80081b4:	f7ff f930 	bl	8007418 <_Bfree>
 80081b8:	4659      	mov	r1, fp
 80081ba:	4620      	mov	r0, r4
 80081bc:	f7ff f92c 	bl	8007418 <_Bfree>
 80081c0:	4620      	mov	r0, r4
 80081c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081c4:	f7ff f928 	bl	8007418 <_Bfree>
 80081c8:	4631      	mov	r1, r6
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff f924 	bl	8007418 <_Bfree>
 80081d0:	e5db      	b.n	8007d8a <_strtod_l+0x72>
 80081d2:	4b33      	ldr	r3, [pc, #204]	; (80082a0 <_strtod_l+0x588>)
 80081d4:	4640      	mov	r0, r8
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	2300      	movs	r3, #0
 80081da:	4649      	mov	r1, r9
 80081dc:	469a      	mov	sl, r3
 80081de:	112d      	asrs	r5, r5, #4
 80081e0:	2d01      	cmp	r5, #1
 80081e2:	dc21      	bgt.n	8008228 <_strtod_l+0x510>
 80081e4:	b10b      	cbz	r3, 80081ea <_strtod_l+0x4d2>
 80081e6:	4680      	mov	r8, r0
 80081e8:	4689      	mov	r9, r1
 80081ea:	492d      	ldr	r1, [pc, #180]	; (80082a0 <_strtod_l+0x588>)
 80081ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80081f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80081f4:	4642      	mov	r2, r8
 80081f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081fa:	464b      	mov	r3, r9
 80081fc:	f7f8 f984 	bl	8000508 <__aeabi_dmul>
 8008200:	4b24      	ldr	r3, [pc, #144]	; (8008294 <_strtod_l+0x57c>)
 8008202:	460a      	mov	r2, r1
 8008204:	400b      	ands	r3, r1
 8008206:	4927      	ldr	r1, [pc, #156]	; (80082a4 <_strtod_l+0x58c>)
 8008208:	4680      	mov	r8, r0
 800820a:	428b      	cmp	r3, r1
 800820c:	d8be      	bhi.n	800818c <_strtod_l+0x474>
 800820e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008212:	428b      	cmp	r3, r1
 8008214:	bf86      	itte	hi
 8008216:	f04f 38ff 	movhi.w	r8, #4294967295
 800821a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80082a8 <_strtod_l+0x590>
 800821e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008222:	2300      	movs	r3, #0
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	e07b      	b.n	8008320 <_strtod_l+0x608>
 8008228:	07ea      	lsls	r2, r5, #31
 800822a:	d505      	bpl.n	8008238 <_strtod_l+0x520>
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f969 	bl	8000508 <__aeabi_dmul>
 8008236:	2301      	movs	r3, #1
 8008238:	9a05      	ldr	r2, [sp, #20]
 800823a:	f10a 0a01 	add.w	sl, sl, #1
 800823e:	3208      	adds	r2, #8
 8008240:	106d      	asrs	r5, r5, #1
 8008242:	9205      	str	r2, [sp, #20]
 8008244:	e7cc      	b.n	80081e0 <_strtod_l+0x4c8>
 8008246:	d0ec      	beq.n	8008222 <_strtod_l+0x50a>
 8008248:	426d      	negs	r5, r5
 800824a:	f015 020f 	ands.w	r2, r5, #15
 800824e:	d00a      	beq.n	8008266 <_strtod_l+0x54e>
 8008250:	4b12      	ldr	r3, [pc, #72]	; (800829c <_strtod_l+0x584>)
 8008252:	4640      	mov	r0, r8
 8008254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008258:	4649      	mov	r1, r9
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f8 fa7d 	bl	800075c <__aeabi_ddiv>
 8008262:	4680      	mov	r8, r0
 8008264:	4689      	mov	r9, r1
 8008266:	112d      	asrs	r5, r5, #4
 8008268:	d0db      	beq.n	8008222 <_strtod_l+0x50a>
 800826a:	2d1f      	cmp	r5, #31
 800826c:	dd1e      	ble.n	80082ac <_strtod_l+0x594>
 800826e:	2600      	movs	r6, #0
 8008270:	46b3      	mov	fp, r6
 8008272:	960b      	str	r6, [sp, #44]	; 0x2c
 8008274:	9608      	str	r6, [sp, #32]
 8008276:	2322      	movs	r3, #34	; 0x22
 8008278:	f04f 0800 	mov.w	r8, #0
 800827c:	f04f 0900 	mov.w	r9, #0
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	e78d      	b.n	80081a0 <_strtod_l+0x488>
 8008284:	08009d0d 	.word	0x08009d0d
 8008288:	08009f34 	.word	0x08009f34
 800828c:	08009d05 	.word	0x08009d05
 8008290:	08009d3c 	.word	0x08009d3c
 8008294:	7ff00000 	.word	0x7ff00000
 8008298:	0800a0c5 	.word	0x0800a0c5
 800829c:	08009e48 	.word	0x08009e48
 80082a0:	08009e20 	.word	0x08009e20
 80082a4:	7ca00000 	.word	0x7ca00000
 80082a8:	7fefffff 	.word	0x7fefffff
 80082ac:	f015 0310 	ands.w	r3, r5, #16
 80082b0:	bf18      	it	ne
 80082b2:	236a      	movne	r3, #106	; 0x6a
 80082b4:	4640      	mov	r0, r8
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	4649      	mov	r1, r9
 80082ba:	2300      	movs	r3, #0
 80082bc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008588 <_strtod_l+0x870>
 80082c0:	07ea      	lsls	r2, r5, #31
 80082c2:	d504      	bpl.n	80082ce <_strtod_l+0x5b6>
 80082c4:	e9da 2300 	ldrd	r2, r3, [sl]
 80082c8:	f7f8 f91e 	bl	8000508 <__aeabi_dmul>
 80082cc:	2301      	movs	r3, #1
 80082ce:	106d      	asrs	r5, r5, #1
 80082d0:	f10a 0a08 	add.w	sl, sl, #8
 80082d4:	d1f4      	bne.n	80082c0 <_strtod_l+0x5a8>
 80082d6:	b10b      	cbz	r3, 80082dc <_strtod_l+0x5c4>
 80082d8:	4680      	mov	r8, r0
 80082da:	4689      	mov	r9, r1
 80082dc:	9b05      	ldr	r3, [sp, #20]
 80082de:	b1bb      	cbz	r3, 8008310 <_strtod_l+0x5f8>
 80082e0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80082e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	4649      	mov	r1, r9
 80082ec:	dd10      	ble.n	8008310 <_strtod_l+0x5f8>
 80082ee:	2b1f      	cmp	r3, #31
 80082f0:	f340 8128 	ble.w	8008544 <_strtod_l+0x82c>
 80082f4:	2b34      	cmp	r3, #52	; 0x34
 80082f6:	bfd8      	it	le
 80082f8:	f04f 33ff 	movle.w	r3, #4294967295
 80082fc:	f04f 0800 	mov.w	r8, #0
 8008300:	bfcf      	iteee	gt
 8008302:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008306:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800830a:	4093      	lslle	r3, r2
 800830c:	ea03 0901 	andle.w	r9, r3, r1
 8008310:	2200      	movs	r2, #0
 8008312:	2300      	movs	r3, #0
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f8 fb5e 	bl	80009d8 <__aeabi_dcmpeq>
 800831c:	2800      	cmp	r0, #0
 800831e:	d1a6      	bne.n	800826e <_strtod_l+0x556>
 8008320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008322:	465a      	mov	r2, fp
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	4620      	mov	r0, r4
 8008328:	4633      	mov	r3, r6
 800832a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800832c:	f7ff f8dc 	bl	80074e8 <__s2b>
 8008330:	900b      	str	r0, [sp, #44]	; 0x2c
 8008332:	2800      	cmp	r0, #0
 8008334:	f43f af2a 	beq.w	800818c <_strtod_l+0x474>
 8008338:	2600      	movs	r6, #0
 800833a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	2a00      	cmp	r2, #0
 8008340:	eba3 0307 	sub.w	r3, r3, r7
 8008344:	bfa8      	it	ge
 8008346:	2300      	movge	r3, #0
 8008348:	46b3      	mov	fp, r6
 800834a:	9312      	str	r3, [sp, #72]	; 0x48
 800834c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008350:	9316      	str	r3, [sp, #88]	; 0x58
 8008352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008354:	4620      	mov	r0, r4
 8008356:	6859      	ldr	r1, [r3, #4]
 8008358:	f7ff f81e 	bl	8007398 <_Balloc>
 800835c:	9008      	str	r0, [sp, #32]
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f af18 	beq.w	8008194 <_strtod_l+0x47c>
 8008364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008366:	300c      	adds	r0, #12
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	f103 010c 	add.w	r1, r3, #12
 800836e:	3202      	adds	r2, #2
 8008370:	0092      	lsls	r2, r2, #2
 8008372:	f000 fd89 	bl	8008e88 <memcpy>
 8008376:	ab1c      	add	r3, sp, #112	; 0x70
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	ab1b      	add	r3, sp, #108	; 0x6c
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	4642      	mov	r2, r8
 8008380:	464b      	mov	r3, r9
 8008382:	4620      	mov	r0, r4
 8008384:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008388:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800838c:	f7ff fbd8 	bl	8007b40 <__d2b>
 8008390:	901a      	str	r0, [sp, #104]	; 0x68
 8008392:	2800      	cmp	r0, #0
 8008394:	f43f aefe 	beq.w	8008194 <_strtod_l+0x47c>
 8008398:	2101      	movs	r1, #1
 800839a:	4620      	mov	r0, r4
 800839c:	f7ff f93c 	bl	8007618 <__i2b>
 80083a0:	4683      	mov	fp, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f43f aef6 	beq.w	8008194 <_strtod_l+0x47c>
 80083a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80083aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80083ac:	2f00      	cmp	r7, #0
 80083ae:	bfab      	itete	ge
 80083b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80083b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80083b4:	eb07 0a03 	addge.w	sl, r7, r3
 80083b8:	1bdd      	sublt	r5, r3, r7
 80083ba:	9b05      	ldr	r3, [sp, #20]
 80083bc:	bfa8      	it	ge
 80083be:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80083c0:	eba7 0703 	sub.w	r7, r7, r3
 80083c4:	4417      	add	r7, r2
 80083c6:	4b71      	ldr	r3, [pc, #452]	; (800858c <_strtod_l+0x874>)
 80083c8:	f107 37ff 	add.w	r7, r7, #4294967295
 80083cc:	bfb8      	it	lt
 80083ce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80083d2:	429f      	cmp	r7, r3
 80083d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083d8:	f280 80c7 	bge.w	800856a <_strtod_l+0x852>
 80083dc:	1bdb      	subs	r3, r3, r7
 80083de:	2b1f      	cmp	r3, #31
 80083e0:	f04f 0101 	mov.w	r1, #1
 80083e4:	eba2 0203 	sub.w	r2, r2, r3
 80083e8:	f300 80b3 	bgt.w	8008552 <_strtod_l+0x83a>
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80083f2:	2300      	movs	r3, #0
 80083f4:	9310      	str	r3, [sp, #64]	; 0x40
 80083f6:	eb0a 0702 	add.w	r7, sl, r2
 80083fa:	9b05      	ldr	r3, [sp, #20]
 80083fc:	45ba      	cmp	sl, r7
 80083fe:	4415      	add	r5, r2
 8008400:	441d      	add	r5, r3
 8008402:	4653      	mov	r3, sl
 8008404:	bfa8      	it	ge
 8008406:	463b      	movge	r3, r7
 8008408:	42ab      	cmp	r3, r5
 800840a:	bfa8      	it	ge
 800840c:	462b      	movge	r3, r5
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfc2      	ittt	gt
 8008412:	1aff      	subgt	r7, r7, r3
 8008414:	1aed      	subgt	r5, r5, r3
 8008416:	ebaa 0a03 	subgt.w	sl, sl, r3
 800841a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd17      	ble.n	8008450 <_strtod_l+0x738>
 8008420:	4659      	mov	r1, fp
 8008422:	461a      	mov	r2, r3
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff f9b5 	bl	8007794 <__pow5mult>
 800842a:	4683      	mov	fp, r0
 800842c:	2800      	cmp	r0, #0
 800842e:	f43f aeb1 	beq.w	8008194 <_strtod_l+0x47c>
 8008432:	4601      	mov	r1, r0
 8008434:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff f904 	bl	8007644 <__multiply>
 800843c:	900a      	str	r0, [sp, #40]	; 0x28
 800843e:	2800      	cmp	r0, #0
 8008440:	f43f aea8 	beq.w	8008194 <_strtod_l+0x47c>
 8008444:	4620      	mov	r0, r4
 8008446:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008448:	f7fe ffe6 	bl	8007418 <_Bfree>
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	931a      	str	r3, [sp, #104]	; 0x68
 8008450:	2f00      	cmp	r7, #0
 8008452:	f300 808f 	bgt.w	8008574 <_strtod_l+0x85c>
 8008456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	dd08      	ble.n	800846e <_strtod_l+0x756>
 800845c:	4620      	mov	r0, r4
 800845e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008460:	9908      	ldr	r1, [sp, #32]
 8008462:	f7ff f997 	bl	8007794 <__pow5mult>
 8008466:	9008      	str	r0, [sp, #32]
 8008468:	2800      	cmp	r0, #0
 800846a:	f43f ae93 	beq.w	8008194 <_strtod_l+0x47c>
 800846e:	2d00      	cmp	r5, #0
 8008470:	dd08      	ble.n	8008484 <_strtod_l+0x76c>
 8008472:	462a      	mov	r2, r5
 8008474:	4620      	mov	r0, r4
 8008476:	9908      	ldr	r1, [sp, #32]
 8008478:	f7ff f9e6 	bl	8007848 <__lshift>
 800847c:	9008      	str	r0, [sp, #32]
 800847e:	2800      	cmp	r0, #0
 8008480:	f43f ae88 	beq.w	8008194 <_strtod_l+0x47c>
 8008484:	f1ba 0f00 	cmp.w	sl, #0
 8008488:	dd08      	ble.n	800849c <_strtod_l+0x784>
 800848a:	4659      	mov	r1, fp
 800848c:	4652      	mov	r2, sl
 800848e:	4620      	mov	r0, r4
 8008490:	f7ff f9da 	bl	8007848 <__lshift>
 8008494:	4683      	mov	fp, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	f43f ae7c 	beq.w	8008194 <_strtod_l+0x47c>
 800849c:	4620      	mov	r0, r4
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084a2:	f7ff fa59 	bl	8007958 <__mdiff>
 80084a6:	4606      	mov	r6, r0
 80084a8:	2800      	cmp	r0, #0
 80084aa:	f43f ae73 	beq.w	8008194 <_strtod_l+0x47c>
 80084ae:	2500      	movs	r5, #0
 80084b0:	68c3      	ldr	r3, [r0, #12]
 80084b2:	4659      	mov	r1, fp
 80084b4:	60c5      	str	r5, [r0, #12]
 80084b6:	930a      	str	r3, [sp, #40]	; 0x28
 80084b8:	f7ff fa32 	bl	8007920 <__mcmp>
 80084bc:	42a8      	cmp	r0, r5
 80084be:	da6b      	bge.n	8008598 <_strtod_l+0x880>
 80084c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c2:	ea53 0308 	orrs.w	r3, r3, r8
 80084c6:	f040 808f 	bne.w	80085e8 <_strtod_l+0x8d0>
 80084ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 808a 	bne.w	80085e8 <_strtod_l+0x8d0>
 80084d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084d8:	0d1b      	lsrs	r3, r3, #20
 80084da:	051b      	lsls	r3, r3, #20
 80084dc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084e0:	f240 8082 	bls.w	80085e8 <_strtod_l+0x8d0>
 80084e4:	6973      	ldr	r3, [r6, #20]
 80084e6:	b913      	cbnz	r3, 80084ee <_strtod_l+0x7d6>
 80084e8:	6933      	ldr	r3, [r6, #16]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	dd7c      	ble.n	80085e8 <_strtod_l+0x8d0>
 80084ee:	4631      	mov	r1, r6
 80084f0:	2201      	movs	r2, #1
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff f9a8 	bl	8007848 <__lshift>
 80084f8:	4659      	mov	r1, fp
 80084fa:	4606      	mov	r6, r0
 80084fc:	f7ff fa10 	bl	8007920 <__mcmp>
 8008500:	2800      	cmp	r0, #0
 8008502:	dd71      	ble.n	80085e8 <_strtod_l+0x8d0>
 8008504:	9905      	ldr	r1, [sp, #20]
 8008506:	464b      	mov	r3, r9
 8008508:	4a21      	ldr	r2, [pc, #132]	; (8008590 <_strtod_l+0x878>)
 800850a:	2900      	cmp	r1, #0
 800850c:	f000 808d 	beq.w	800862a <_strtod_l+0x912>
 8008510:	ea02 0109 	and.w	r1, r2, r9
 8008514:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008518:	f300 8087 	bgt.w	800862a <_strtod_l+0x912>
 800851c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008520:	f77f aea9 	ble.w	8008276 <_strtod_l+0x55e>
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <_strtod_l+0x87c>)
 800852a:	2200      	movs	r2, #0
 800852c:	f7f7 ffec 	bl	8000508 <__aeabi_dmul>
 8008530:	4b17      	ldr	r3, [pc, #92]	; (8008590 <_strtod_l+0x878>)
 8008532:	4680      	mov	r8, r0
 8008534:	400b      	ands	r3, r1
 8008536:	4689      	mov	r9, r1
 8008538:	2b00      	cmp	r3, #0
 800853a:	f47f ae35 	bne.w	80081a8 <_strtod_l+0x490>
 800853e:	2322      	movs	r3, #34	; 0x22
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	e631      	b.n	80081a8 <_strtod_l+0x490>
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	ea03 0808 	and.w	r8, r3, r8
 8008550:	e6de      	b.n	8008310 <_strtod_l+0x5f8>
 8008552:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008556:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800855a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800855e:	37e2      	adds	r7, #226	; 0xe2
 8008560:	fa01 f307 	lsl.w	r3, r1, r7
 8008564:	9310      	str	r3, [sp, #64]	; 0x40
 8008566:	9113      	str	r1, [sp, #76]	; 0x4c
 8008568:	e745      	b.n	80083f6 <_strtod_l+0x6de>
 800856a:	2300      	movs	r3, #0
 800856c:	9310      	str	r3, [sp, #64]	; 0x40
 800856e:	2301      	movs	r3, #1
 8008570:	9313      	str	r3, [sp, #76]	; 0x4c
 8008572:	e740      	b.n	80083f6 <_strtod_l+0x6de>
 8008574:	463a      	mov	r2, r7
 8008576:	4620      	mov	r0, r4
 8008578:	991a      	ldr	r1, [sp, #104]	; 0x68
 800857a:	f7ff f965 	bl	8007848 <__lshift>
 800857e:	901a      	str	r0, [sp, #104]	; 0x68
 8008580:	2800      	cmp	r0, #0
 8008582:	f47f af68 	bne.w	8008456 <_strtod_l+0x73e>
 8008586:	e605      	b.n	8008194 <_strtod_l+0x47c>
 8008588:	08009f48 	.word	0x08009f48
 800858c:	fffffc02 	.word	0xfffffc02
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	39500000 	.word	0x39500000
 8008598:	46ca      	mov	sl, r9
 800859a:	d165      	bne.n	8008668 <_strtod_l+0x950>
 800859c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800859e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a2:	b352      	cbz	r2, 80085fa <_strtod_l+0x8e2>
 80085a4:	4a9e      	ldr	r2, [pc, #632]	; (8008820 <_strtod_l+0xb08>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d12a      	bne.n	8008600 <_strtod_l+0x8e8>
 80085aa:	9b05      	ldr	r3, [sp, #20]
 80085ac:	4641      	mov	r1, r8
 80085ae:	b1fb      	cbz	r3, 80085f0 <_strtod_l+0x8d8>
 80085b0:	4b9c      	ldr	r3, [pc, #624]	; (8008824 <_strtod_l+0xb0c>)
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	ea09 0303 	and.w	r3, r9, r3
 80085ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085be:	d81a      	bhi.n	80085f6 <_strtod_l+0x8de>
 80085c0:	0d1b      	lsrs	r3, r3, #20
 80085c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	4299      	cmp	r1, r3
 80085cc:	d118      	bne.n	8008600 <_strtod_l+0x8e8>
 80085ce:	4b96      	ldr	r3, [pc, #600]	; (8008828 <_strtod_l+0xb10>)
 80085d0:	459a      	cmp	sl, r3
 80085d2:	d102      	bne.n	80085da <_strtod_l+0x8c2>
 80085d4:	3101      	adds	r1, #1
 80085d6:	f43f addd 	beq.w	8008194 <_strtod_l+0x47c>
 80085da:	f04f 0800 	mov.w	r8, #0
 80085de:	4b91      	ldr	r3, [pc, #580]	; (8008824 <_strtod_l+0xb0c>)
 80085e0:	ea0a 0303 	and.w	r3, sl, r3
 80085e4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d19a      	bne.n	8008524 <_strtod_l+0x80c>
 80085ee:	e5db      	b.n	80081a8 <_strtod_l+0x490>
 80085f0:	f04f 33ff 	mov.w	r3, #4294967295
 80085f4:	e7e9      	b.n	80085ca <_strtod_l+0x8b2>
 80085f6:	4613      	mov	r3, r2
 80085f8:	e7e7      	b.n	80085ca <_strtod_l+0x8b2>
 80085fa:	ea53 0308 	orrs.w	r3, r3, r8
 80085fe:	d081      	beq.n	8008504 <_strtod_l+0x7ec>
 8008600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008602:	b1e3      	cbz	r3, 800863e <_strtod_l+0x926>
 8008604:	ea13 0f0a 	tst.w	r3, sl
 8008608:	d0ee      	beq.n	80085e8 <_strtod_l+0x8d0>
 800860a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800860c:	4640      	mov	r0, r8
 800860e:	4649      	mov	r1, r9
 8008610:	9a05      	ldr	r2, [sp, #20]
 8008612:	b1c3      	cbz	r3, 8008646 <_strtod_l+0x92e>
 8008614:	f7ff fb5c 	bl	8007cd0 <sulp>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800861e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008620:	f7f7 fdbc 	bl	800019c <__adddf3>
 8008624:	4680      	mov	r8, r0
 8008626:	4689      	mov	r9, r1
 8008628:	e7de      	b.n	80085e8 <_strtod_l+0x8d0>
 800862a:	4013      	ands	r3, r2
 800862c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008630:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008634:	f04f 38ff 	mov.w	r8, #4294967295
 8008638:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800863c:	e7d4      	b.n	80085e8 <_strtod_l+0x8d0>
 800863e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008640:	ea13 0f08 	tst.w	r3, r8
 8008644:	e7e0      	b.n	8008608 <_strtod_l+0x8f0>
 8008646:	f7ff fb43 	bl	8007cd0 <sulp>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008652:	f7f7 fda1 	bl	8000198 <__aeabi_dsub>
 8008656:	2200      	movs	r2, #0
 8008658:	2300      	movs	r3, #0
 800865a:	4680      	mov	r8, r0
 800865c:	4689      	mov	r9, r1
 800865e:	f7f8 f9bb 	bl	80009d8 <__aeabi_dcmpeq>
 8008662:	2800      	cmp	r0, #0
 8008664:	d0c0      	beq.n	80085e8 <_strtod_l+0x8d0>
 8008666:	e606      	b.n	8008276 <_strtod_l+0x55e>
 8008668:	4659      	mov	r1, fp
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff fabe 	bl	8007bec <__ratio>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008678:	2200      	movs	r2, #0
 800867a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800867e:	f7f8 f9bf 	bl	8000a00 <__aeabi_dcmple>
 8008682:	2800      	cmp	r0, #0
 8008684:	d06f      	beq.n	8008766 <_strtod_l+0xa4e>
 8008686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008688:	2b00      	cmp	r3, #0
 800868a:	d17c      	bne.n	8008786 <_strtod_l+0xa6e>
 800868c:	f1b8 0f00 	cmp.w	r8, #0
 8008690:	d159      	bne.n	8008746 <_strtod_l+0xa2e>
 8008692:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008696:	2b00      	cmp	r3, #0
 8008698:	d17b      	bne.n	8008792 <_strtod_l+0xa7a>
 800869a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800869e:	2200      	movs	r2, #0
 80086a0:	4b62      	ldr	r3, [pc, #392]	; (800882c <_strtod_l+0xb14>)
 80086a2:	f7f8 f9a3 	bl	80009ec <__aeabi_dcmplt>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d15a      	bne.n	8008760 <_strtod_l+0xa48>
 80086aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086ae:	2200      	movs	r2, #0
 80086b0:	4b5f      	ldr	r3, [pc, #380]	; (8008830 <_strtod_l+0xb18>)
 80086b2:	f7f7 ff29 	bl	8000508 <__aeabi_dmul>
 80086b6:	4605      	mov	r5, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80086be:	9506      	str	r5, [sp, #24]
 80086c0:	9307      	str	r3, [sp, #28]
 80086c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80086ca:	4b56      	ldr	r3, [pc, #344]	; (8008824 <_strtod_l+0xb0c>)
 80086cc:	4a55      	ldr	r2, [pc, #340]	; (8008824 <_strtod_l+0xb0c>)
 80086ce:	ea0a 0303 	and.w	r3, sl, r3
 80086d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80086d4:	4b57      	ldr	r3, [pc, #348]	; (8008834 <_strtod_l+0xb1c>)
 80086d6:	ea0a 0202 	and.w	r2, sl, r2
 80086da:	429a      	cmp	r2, r3
 80086dc:	f040 80b0 	bne.w	8008840 <_strtod_l+0xb28>
 80086e0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7ff f9c2 	bl	8007a70 <__ulp>
 80086ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086f0:	f7f7 ff0a 	bl	8000508 <__aeabi_dmul>
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	f7f7 fd50 	bl	800019c <__adddf3>
 80086fc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008824 <_strtod_l+0xb0c>
 8008700:	4a4d      	ldr	r2, [pc, #308]	; (8008838 <_strtod_l+0xb20>)
 8008702:	ea01 0a0a 	and.w	sl, r1, sl
 8008706:	4592      	cmp	sl, r2
 8008708:	4680      	mov	r8, r0
 800870a:	d948      	bls.n	800879e <_strtod_l+0xa86>
 800870c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800870e:	4b46      	ldr	r3, [pc, #280]	; (8008828 <_strtod_l+0xb10>)
 8008710:	429a      	cmp	r2, r3
 8008712:	d103      	bne.n	800871c <_strtod_l+0xa04>
 8008714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008716:	3301      	adds	r3, #1
 8008718:	f43f ad3c 	beq.w	8008194 <_strtod_l+0x47c>
 800871c:	f04f 38ff 	mov.w	r8, #4294967295
 8008720:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008828 <_strtod_l+0xb10>
 8008724:	4620      	mov	r0, r4
 8008726:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008728:	f7fe fe76 	bl	8007418 <_Bfree>
 800872c:	4620      	mov	r0, r4
 800872e:	9908      	ldr	r1, [sp, #32]
 8008730:	f7fe fe72 	bl	8007418 <_Bfree>
 8008734:	4659      	mov	r1, fp
 8008736:	4620      	mov	r0, r4
 8008738:	f7fe fe6e 	bl	8007418 <_Bfree>
 800873c:	4631      	mov	r1, r6
 800873e:	4620      	mov	r0, r4
 8008740:	f7fe fe6a 	bl	8007418 <_Bfree>
 8008744:	e605      	b.n	8008352 <_strtod_l+0x63a>
 8008746:	f1b8 0f01 	cmp.w	r8, #1
 800874a:	d103      	bne.n	8008754 <_strtod_l+0xa3c>
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	f43f ad91 	beq.w	8008276 <_strtod_l+0x55e>
 8008754:	2200      	movs	r2, #0
 8008756:	4b39      	ldr	r3, [pc, #228]	; (800883c <_strtod_l+0xb24>)
 8008758:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800875a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800875e:	e016      	b.n	800878e <_strtod_l+0xa76>
 8008760:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008762:	4f33      	ldr	r7, [pc, #204]	; (8008830 <_strtod_l+0xb18>)
 8008764:	e7a9      	b.n	80086ba <_strtod_l+0x9a2>
 8008766:	4b32      	ldr	r3, [pc, #200]	; (8008830 <_strtod_l+0xb18>)
 8008768:	2200      	movs	r2, #0
 800876a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800876e:	f7f7 fecb 	bl	8000508 <__aeabi_dmul>
 8008772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008774:	4605      	mov	r5, r0
 8008776:	460f      	mov	r7, r1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d09e      	beq.n	80086ba <_strtod_l+0x9a2>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008784:	e79d      	b.n	80086c2 <_strtod_l+0x9aa>
 8008786:	2200      	movs	r2, #0
 8008788:	4b28      	ldr	r3, [pc, #160]	; (800882c <_strtod_l+0xb14>)
 800878a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800878e:	4f27      	ldr	r7, [pc, #156]	; (800882c <_strtod_l+0xb14>)
 8008790:	e797      	b.n	80086c2 <_strtod_l+0x9aa>
 8008792:	2200      	movs	r2, #0
 8008794:	4b29      	ldr	r3, [pc, #164]	; (800883c <_strtod_l+0xb24>)
 8008796:	4645      	mov	r5, r8
 8008798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800879c:	e7f7      	b.n	800878e <_strtod_l+0xa76>
 800879e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	46ca      	mov	sl, r9
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1bc      	bne.n	8008724 <_strtod_l+0xa0c>
 80087aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087b0:	0d1b      	lsrs	r3, r3, #20
 80087b2:	051b      	lsls	r3, r3, #20
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d1b5      	bne.n	8008724 <_strtod_l+0xa0c>
 80087b8:	4628      	mov	r0, r5
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f8 fa04 	bl	8000bc8 <__aeabi_d2lz>
 80087c0:	f7f7 fe74 	bl	80004ac <__aeabi_l2d>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4628      	mov	r0, r5
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f7 fce4 	bl	8000198 <__aeabi_dsub>
 80087d0:	460b      	mov	r3, r1
 80087d2:	4602      	mov	r2, r0
 80087d4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80087d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80087dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087de:	ea4a 0a08 	orr.w	sl, sl, r8
 80087e2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80087e6:	d06c      	beq.n	80088c2 <_strtod_l+0xbaa>
 80087e8:	a309      	add	r3, pc, #36	; (adr r3, 8008810 <_strtod_l+0xaf8>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f8 f8fd 	bl	80009ec <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f47f acd8 	bne.w	80081a8 <_strtod_l+0x490>
 80087f8:	a307      	add	r3, pc, #28	; (adr r3, 8008818 <_strtod_l+0xb00>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008802:	f7f8 f911 	bl	8000a28 <__aeabi_dcmpgt>
 8008806:	2800      	cmp	r0, #0
 8008808:	d08c      	beq.n	8008724 <_strtod_l+0xa0c>
 800880a:	e4cd      	b.n	80081a8 <_strtod_l+0x490>
 800880c:	f3af 8000 	nop.w
 8008810:	94a03595 	.word	0x94a03595
 8008814:	3fdfffff 	.word	0x3fdfffff
 8008818:	35afe535 	.word	0x35afe535
 800881c:	3fe00000 	.word	0x3fe00000
 8008820:	000fffff 	.word	0x000fffff
 8008824:	7ff00000 	.word	0x7ff00000
 8008828:	7fefffff 	.word	0x7fefffff
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	3fe00000 	.word	0x3fe00000
 8008834:	7fe00000 	.word	0x7fe00000
 8008838:	7c9fffff 	.word	0x7c9fffff
 800883c:	bff00000 	.word	0xbff00000
 8008840:	9b05      	ldr	r3, [sp, #20]
 8008842:	b333      	cbz	r3, 8008892 <_strtod_l+0xb7a>
 8008844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008846:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800884a:	d822      	bhi.n	8008892 <_strtod_l+0xb7a>
 800884c:	a328      	add	r3, pc, #160	; (adr r3, 80088f0 <_strtod_l+0xbd8>)
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	4628      	mov	r0, r5
 8008854:	4639      	mov	r1, r7
 8008856:	f7f8 f8d3 	bl	8000a00 <__aeabi_dcmple>
 800885a:	b1a0      	cbz	r0, 8008886 <_strtod_l+0xb6e>
 800885c:	4639      	mov	r1, r7
 800885e:	4628      	mov	r0, r5
 8008860:	f7f8 f92a 	bl	8000ab8 <__aeabi_d2uiz>
 8008864:	2801      	cmp	r0, #1
 8008866:	bf38      	it	cc
 8008868:	2001      	movcc	r0, #1
 800886a:	f7f7 fdd3 	bl	8000414 <__aeabi_ui2d>
 800886e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008870:	4605      	mov	r5, r0
 8008872:	460f      	mov	r7, r1
 8008874:	bb03      	cbnz	r3, 80088b8 <_strtod_l+0xba0>
 8008876:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800887a:	9014      	str	r0, [sp, #80]	; 0x50
 800887c:	9315      	str	r3, [sp, #84]	; 0x54
 800887e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008882:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800888a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	9311      	str	r3, [sp, #68]	; 0x44
 8008892:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008894:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008896:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800889a:	f7ff f8e9 	bl	8007a70 <__ulp>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fe2f 	bl	8000508 <__aeabi_dmul>
 80088aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088ae:	f7f7 fc75 	bl	800019c <__adddf3>
 80088b2:	4680      	mov	r8, r0
 80088b4:	4689      	mov	r9, r1
 80088b6:	e774      	b.n	80087a2 <_strtod_l+0xa8a>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80088c0:	e7dd      	b.n	800887e <_strtod_l+0xb66>
 80088c2:	a30d      	add	r3, pc, #52	; (adr r3, 80088f8 <_strtod_l+0xbe0>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f8 f890 	bl	80009ec <__aeabi_dcmplt>
 80088cc:	e79b      	b.n	8008806 <_strtod_l+0xaee>
 80088ce:	2300      	movs	r3, #0
 80088d0:	930e      	str	r3, [sp, #56]	; 0x38
 80088d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	f7ff ba5b 	b.w	8007d92 <_strtod_l+0x7a>
 80088dc:	2a65      	cmp	r2, #101	; 0x65
 80088de:	f43f ab52 	beq.w	8007f86 <_strtod_l+0x26e>
 80088e2:	2a45      	cmp	r2, #69	; 0x45
 80088e4:	f43f ab4f 	beq.w	8007f86 <_strtod_l+0x26e>
 80088e8:	2301      	movs	r3, #1
 80088ea:	f7ff bb87 	b.w	8007ffc <_strtod_l+0x2e4>
 80088ee:	bf00      	nop
 80088f0:	ffc00000 	.word	0xffc00000
 80088f4:	41dfffff 	.word	0x41dfffff
 80088f8:	94a03595 	.word	0x94a03595
 80088fc:	3fcfffff 	.word	0x3fcfffff

08008900 <_strtod_r>:
 8008900:	4b01      	ldr	r3, [pc, #4]	; (8008908 <_strtod_r+0x8>)
 8008902:	f7ff ba09 	b.w	8007d18 <_strtod_l>
 8008906:	bf00      	nop
 8008908:	20000068 	.word	0x20000068

0800890c <_strtol_l.constprop.0>:
 800890c:	2b01      	cmp	r3, #1
 800890e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008912:	4686      	mov	lr, r0
 8008914:	4690      	mov	r8, r2
 8008916:	d001      	beq.n	800891c <_strtol_l.constprop.0+0x10>
 8008918:	2b24      	cmp	r3, #36	; 0x24
 800891a:	d906      	bls.n	800892a <_strtol_l.constprop.0+0x1e>
 800891c:	f7fd fd92 	bl	8006444 <__errno>
 8008920:	2316      	movs	r3, #22
 8008922:	6003      	str	r3, [r0, #0]
 8008924:	2000      	movs	r0, #0
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	460d      	mov	r5, r1
 800892c:	4835      	ldr	r0, [pc, #212]	; (8008a04 <_strtol_l.constprop.0+0xf8>)
 800892e:	462a      	mov	r2, r5
 8008930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008934:	5d06      	ldrb	r6, [r0, r4]
 8008936:	f016 0608 	ands.w	r6, r6, #8
 800893a:	d1f8      	bne.n	800892e <_strtol_l.constprop.0+0x22>
 800893c:	2c2d      	cmp	r4, #45	; 0x2d
 800893e:	d12e      	bne.n	800899e <_strtol_l.constprop.0+0x92>
 8008940:	2601      	movs	r6, #1
 8008942:	782c      	ldrb	r4, [r5, #0]
 8008944:	1c95      	adds	r5, r2, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d057      	beq.n	80089fa <_strtol_l.constprop.0+0xee>
 800894a:	2b10      	cmp	r3, #16
 800894c:	d109      	bne.n	8008962 <_strtol_l.constprop.0+0x56>
 800894e:	2c30      	cmp	r4, #48	; 0x30
 8008950:	d107      	bne.n	8008962 <_strtol_l.constprop.0+0x56>
 8008952:	782a      	ldrb	r2, [r5, #0]
 8008954:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008958:	2a58      	cmp	r2, #88	; 0x58
 800895a:	d149      	bne.n	80089f0 <_strtol_l.constprop.0+0xe4>
 800895c:	2310      	movs	r3, #16
 800895e:	786c      	ldrb	r4, [r5, #1]
 8008960:	3502      	adds	r5, #2
 8008962:	2200      	movs	r2, #0
 8008964:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008968:	f10c 3cff 	add.w	ip, ip, #4294967295
 800896c:	fbbc f9f3 	udiv	r9, ip, r3
 8008970:	4610      	mov	r0, r2
 8008972:	fb03 ca19 	mls	sl, r3, r9, ip
 8008976:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800897a:	2f09      	cmp	r7, #9
 800897c:	d814      	bhi.n	80089a8 <_strtol_l.constprop.0+0x9c>
 800897e:	463c      	mov	r4, r7
 8008980:	42a3      	cmp	r3, r4
 8008982:	dd20      	ble.n	80089c6 <_strtol_l.constprop.0+0xba>
 8008984:	1c57      	adds	r7, r2, #1
 8008986:	d007      	beq.n	8008998 <_strtol_l.constprop.0+0x8c>
 8008988:	4581      	cmp	r9, r0
 800898a:	d319      	bcc.n	80089c0 <_strtol_l.constprop.0+0xb4>
 800898c:	d101      	bne.n	8008992 <_strtol_l.constprop.0+0x86>
 800898e:	45a2      	cmp	sl, r4
 8008990:	db16      	blt.n	80089c0 <_strtol_l.constprop.0+0xb4>
 8008992:	2201      	movs	r2, #1
 8008994:	fb00 4003 	mla	r0, r0, r3, r4
 8008998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800899c:	e7eb      	b.n	8008976 <_strtol_l.constprop.0+0x6a>
 800899e:	2c2b      	cmp	r4, #43	; 0x2b
 80089a0:	bf04      	itt	eq
 80089a2:	782c      	ldrbeq	r4, [r5, #0]
 80089a4:	1c95      	addeq	r5, r2, #2
 80089a6:	e7ce      	b.n	8008946 <_strtol_l.constprop.0+0x3a>
 80089a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80089ac:	2f19      	cmp	r7, #25
 80089ae:	d801      	bhi.n	80089b4 <_strtol_l.constprop.0+0xa8>
 80089b0:	3c37      	subs	r4, #55	; 0x37
 80089b2:	e7e5      	b.n	8008980 <_strtol_l.constprop.0+0x74>
 80089b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80089b8:	2f19      	cmp	r7, #25
 80089ba:	d804      	bhi.n	80089c6 <_strtol_l.constprop.0+0xba>
 80089bc:	3c57      	subs	r4, #87	; 0x57
 80089be:	e7df      	b.n	8008980 <_strtol_l.constprop.0+0x74>
 80089c0:	f04f 32ff 	mov.w	r2, #4294967295
 80089c4:	e7e8      	b.n	8008998 <_strtol_l.constprop.0+0x8c>
 80089c6:	1c53      	adds	r3, r2, #1
 80089c8:	d108      	bne.n	80089dc <_strtol_l.constprop.0+0xd0>
 80089ca:	2322      	movs	r3, #34	; 0x22
 80089cc:	4660      	mov	r0, ip
 80089ce:	f8ce 3000 	str.w	r3, [lr]
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	d0a6      	beq.n	8008926 <_strtol_l.constprop.0+0x1a>
 80089d8:	1e69      	subs	r1, r5, #1
 80089da:	e006      	b.n	80089ea <_strtol_l.constprop.0+0xde>
 80089dc:	b106      	cbz	r6, 80089e0 <_strtol_l.constprop.0+0xd4>
 80089de:	4240      	negs	r0, r0
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	d09f      	beq.n	8008926 <_strtol_l.constprop.0+0x1a>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d1f6      	bne.n	80089d8 <_strtol_l.constprop.0+0xcc>
 80089ea:	f8c8 1000 	str.w	r1, [r8]
 80089ee:	e79a      	b.n	8008926 <_strtol_l.constprop.0+0x1a>
 80089f0:	2430      	movs	r4, #48	; 0x30
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1b5      	bne.n	8008962 <_strtol_l.constprop.0+0x56>
 80089f6:	2308      	movs	r3, #8
 80089f8:	e7b3      	b.n	8008962 <_strtol_l.constprop.0+0x56>
 80089fa:	2c30      	cmp	r4, #48	; 0x30
 80089fc:	d0a9      	beq.n	8008952 <_strtol_l.constprop.0+0x46>
 80089fe:	230a      	movs	r3, #10
 8008a00:	e7af      	b.n	8008962 <_strtol_l.constprop.0+0x56>
 8008a02:	bf00      	nop
 8008a04:	08009f71 	.word	0x08009f71

08008a08 <_strtol_r>:
 8008a08:	f7ff bf80 	b.w	800890c <_strtol_l.constprop.0>

08008a0c <__ssputs_r>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	461f      	mov	r7, r3
 8008a12:	688e      	ldr	r6, [r1, #8]
 8008a14:	4682      	mov	sl, r0
 8008a16:	42be      	cmp	r6, r7
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4690      	mov	r8, r2
 8008a1c:	680b      	ldr	r3, [r1, #0]
 8008a1e:	d82c      	bhi.n	8008a7a <__ssputs_r+0x6e>
 8008a20:	898a      	ldrh	r2, [r1, #12]
 8008a22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a26:	d026      	beq.n	8008a76 <__ssputs_r+0x6a>
 8008a28:	6965      	ldr	r5, [r4, #20]
 8008a2a:	6909      	ldr	r1, [r1, #16]
 8008a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a30:	eba3 0901 	sub.w	r9, r3, r1
 8008a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a38:	1c7b      	adds	r3, r7, #1
 8008a3a:	444b      	add	r3, r9
 8008a3c:	106d      	asrs	r5, r5, #1
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf38      	it	cc
 8008a42:	461d      	movcc	r5, r3
 8008a44:	0553      	lsls	r3, r2, #21
 8008a46:	d527      	bpl.n	8008a98 <__ssputs_r+0x8c>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7fe fc19 	bl	8007280 <_malloc_r>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	b360      	cbz	r0, 8008aac <__ssputs_r+0xa0>
 8008a52:	464a      	mov	r2, r9
 8008a54:	6921      	ldr	r1, [r4, #16]
 8008a56:	f000 fa17 	bl	8008e88 <memcpy>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6126      	str	r6, [r4, #16]
 8008a68:	444e      	add	r6, r9
 8008a6a:	6026      	str	r6, [r4, #0]
 8008a6c:	463e      	mov	r6, r7
 8008a6e:	6165      	str	r5, [r4, #20]
 8008a70:	eba5 0509 	sub.w	r5, r5, r9
 8008a74:	60a5      	str	r5, [r4, #8]
 8008a76:	42be      	cmp	r6, r7
 8008a78:	d900      	bls.n	8008a7c <__ssputs_r+0x70>
 8008a7a:	463e      	mov	r6, r7
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	4641      	mov	r1, r8
 8008a80:	6820      	ldr	r0, [r4, #0]
 8008a82:	f000 f9c5 	bl	8008e10 <memmove>
 8008a86:	2000      	movs	r0, #0
 8008a88:	68a3      	ldr	r3, [r4, #8]
 8008a8a:	1b9b      	subs	r3, r3, r6
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	4433      	add	r3, r6
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	462a      	mov	r2, r5
 8008a9a:	f000 fda6 	bl	80095ea <_realloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d1e0      	bne.n	8008a66 <__ssputs_r+0x5a>
 8008aa4:	4650      	mov	r0, sl
 8008aa6:	6921      	ldr	r1, [r4, #16]
 8008aa8:	f7fe fb7a 	bl	80071a0 <_free_r>
 8008aac:	230c      	movs	r3, #12
 8008aae:	f8ca 3000 	str.w	r3, [sl]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e7e9      	b.n	8008a94 <__ssputs_r+0x88>

08008ac0 <_svfiprintf_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4698      	mov	r8, r3
 8008ac6:	898b      	ldrh	r3, [r1, #12]
 8008ac8:	4607      	mov	r7, r0
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	460d      	mov	r5, r1
 8008ace:	4614      	mov	r4, r2
 8008ad0:	b09d      	sub	sp, #116	; 0x74
 8008ad2:	d50e      	bpl.n	8008af2 <_svfiprintf_r+0x32>
 8008ad4:	690b      	ldr	r3, [r1, #16]
 8008ad6:	b963      	cbnz	r3, 8008af2 <_svfiprintf_r+0x32>
 8008ad8:	2140      	movs	r1, #64	; 0x40
 8008ada:	f7fe fbd1 	bl	8007280 <_malloc_r>
 8008ade:	6028      	str	r0, [r5, #0]
 8008ae0:	6128      	str	r0, [r5, #16]
 8008ae2:	b920      	cbnz	r0, 8008aee <_svfiprintf_r+0x2e>
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e0d0      	b.n	8008c90 <_svfiprintf_r+0x1d0>
 8008aee:	2340      	movs	r3, #64	; 0x40
 8008af0:	616b      	str	r3, [r5, #20]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9309      	str	r3, [sp, #36]	; 0x24
 8008af6:	2320      	movs	r3, #32
 8008af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afc:	2330      	movs	r3, #48	; 0x30
 8008afe:	f04f 0901 	mov.w	r9, #1
 8008b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b06:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008ca8 <_svfiprintf_r+0x1e8>
 8008b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b0e:	4623      	mov	r3, r4
 8008b10:	469a      	mov	sl, r3
 8008b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b16:	b10a      	cbz	r2, 8008b1c <_svfiprintf_r+0x5c>
 8008b18:	2a25      	cmp	r2, #37	; 0x25
 8008b1a:	d1f9      	bne.n	8008b10 <_svfiprintf_r+0x50>
 8008b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b20:	d00b      	beq.n	8008b3a <_svfiprintf_r+0x7a>
 8008b22:	465b      	mov	r3, fp
 8008b24:	4622      	mov	r2, r4
 8008b26:	4629      	mov	r1, r5
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7ff ff6f 	bl	8008a0c <__ssputs_r>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f000 80a9 	beq.w	8008c86 <_svfiprintf_r+0x1c6>
 8008b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b36:	445a      	add	r2, fp
 8008b38:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80a1 	beq.w	8008c86 <_svfiprintf_r+0x1c6>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b4e:	f10a 0a01 	add.w	sl, sl, #1
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b5c:	4654      	mov	r4, sl
 8008b5e:	2205      	movs	r2, #5
 8008b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b64:	4850      	ldr	r0, [pc, #320]	; (8008ca8 <_svfiprintf_r+0x1e8>)
 8008b66:	f7fd fc9a 	bl	800649e <memchr>
 8008b6a:	9a04      	ldr	r2, [sp, #16]
 8008b6c:	b9d8      	cbnz	r0, 8008ba6 <_svfiprintf_r+0xe6>
 8008b6e:	06d0      	lsls	r0, r2, #27
 8008b70:	bf44      	itt	mi
 8008b72:	2320      	movmi	r3, #32
 8008b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b78:	0711      	lsls	r1, r2, #28
 8008b7a:	bf44      	itt	mi
 8008b7c:	232b      	movmi	r3, #43	; 0x2b
 8008b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b82:	f89a 3000 	ldrb.w	r3, [sl]
 8008b86:	2b2a      	cmp	r3, #42	; 0x2a
 8008b88:	d015      	beq.n	8008bb6 <_svfiprintf_r+0xf6>
 8008b8a:	4654      	mov	r4, sl
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	f04f 0c0a 	mov.w	ip, #10
 8008b92:	9a07      	ldr	r2, [sp, #28]
 8008b94:	4621      	mov	r1, r4
 8008b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b9a:	3b30      	subs	r3, #48	; 0x30
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d94d      	bls.n	8008c3c <_svfiprintf_r+0x17c>
 8008ba0:	b1b0      	cbz	r0, 8008bd0 <_svfiprintf_r+0x110>
 8008ba2:	9207      	str	r2, [sp, #28]
 8008ba4:	e014      	b.n	8008bd0 <_svfiprintf_r+0x110>
 8008ba6:	eba0 0308 	sub.w	r3, r0, r8
 8008baa:	fa09 f303 	lsl.w	r3, r9, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	46a2      	mov	sl, r4
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	e7d2      	b.n	8008b5c <_svfiprintf_r+0x9c>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	1d19      	adds	r1, r3, #4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	9103      	str	r1, [sp, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bfbb      	ittet	lt
 8008bc2:	425b      	neglt	r3, r3
 8008bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc8:	9307      	strge	r3, [sp, #28]
 8008bca:	9307      	strlt	r3, [sp, #28]
 8008bcc:	bfb8      	it	lt
 8008bce:	9204      	strlt	r2, [sp, #16]
 8008bd0:	7823      	ldrb	r3, [r4, #0]
 8008bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd4:	d10c      	bne.n	8008bf0 <_svfiprintf_r+0x130>
 8008bd6:	7863      	ldrb	r3, [r4, #1]
 8008bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bda:	d134      	bne.n	8008c46 <_svfiprintf_r+0x186>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	3402      	adds	r4, #2
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	9203      	str	r2, [sp, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bfb8      	it	lt
 8008bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bee:	9305      	str	r3, [sp, #20]
 8008bf0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008cac <_svfiprintf_r+0x1ec>
 8008bf4:	2203      	movs	r2, #3
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	7821      	ldrb	r1, [r4, #0]
 8008bfa:	f7fd fc50 	bl	800649e <memchr>
 8008bfe:	b138      	cbz	r0, 8008c10 <_svfiprintf_r+0x150>
 8008c00:	2240      	movs	r2, #64	; 0x40
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	eba0 000a 	sub.w	r0, r0, sl
 8008c08:	4082      	lsls	r2, r0
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	3401      	adds	r4, #1
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c14:	2206      	movs	r2, #6
 8008c16:	4826      	ldr	r0, [pc, #152]	; (8008cb0 <_svfiprintf_r+0x1f0>)
 8008c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c1c:	f7fd fc3f 	bl	800649e <memchr>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d038      	beq.n	8008c96 <_svfiprintf_r+0x1d6>
 8008c24:	4b23      	ldr	r3, [pc, #140]	; (8008cb4 <_svfiprintf_r+0x1f4>)
 8008c26:	bb1b      	cbnz	r3, 8008c70 <_svfiprintf_r+0x1b0>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	3307      	adds	r3, #7
 8008c2c:	f023 0307 	bic.w	r3, r3, #7
 8008c30:	3308      	adds	r3, #8
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c36:	4433      	add	r3, r6
 8008c38:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3a:	e768      	b.n	8008b0e <_svfiprintf_r+0x4e>
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	2001      	movs	r0, #1
 8008c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c44:	e7a6      	b.n	8008b94 <_svfiprintf_r+0xd4>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	3401      	adds	r4, #1
 8008c50:	9305      	str	r3, [sp, #20]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c58:	3a30      	subs	r2, #48	; 0x30
 8008c5a:	2a09      	cmp	r2, #9
 8008c5c:	d903      	bls.n	8008c66 <_svfiprintf_r+0x1a6>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0c6      	beq.n	8008bf0 <_svfiprintf_r+0x130>
 8008c62:	9105      	str	r1, [sp, #20]
 8008c64:	e7c4      	b.n	8008bf0 <_svfiprintf_r+0x130>
 8008c66:	4604      	mov	r4, r0
 8008c68:	2301      	movs	r3, #1
 8008c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c6e:	e7f0      	b.n	8008c52 <_svfiprintf_r+0x192>
 8008c70:	ab03      	add	r3, sp, #12
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	462a      	mov	r2, r5
 8008c76:	4638      	mov	r0, r7
 8008c78:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <_svfiprintf_r+0x1f8>)
 8008c7a:	a904      	add	r1, sp, #16
 8008c7c:	f7fc fc9a 	bl	80055b4 <_printf_float>
 8008c80:	1c42      	adds	r2, r0, #1
 8008c82:	4606      	mov	r6, r0
 8008c84:	d1d6      	bne.n	8008c34 <_svfiprintf_r+0x174>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	065b      	lsls	r3, r3, #25
 8008c8a:	f53f af2d 	bmi.w	8008ae8 <_svfiprintf_r+0x28>
 8008c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c90:	b01d      	add	sp, #116	; 0x74
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <_svfiprintf_r+0x1f8>)
 8008ca0:	a904      	add	r1, sp, #16
 8008ca2:	f7fc ff27 	bl	8005af4 <_printf_i>
 8008ca6:	e7eb      	b.n	8008c80 <_svfiprintf_r+0x1c0>
 8008ca8:	0800a071 	.word	0x0800a071
 8008cac:	0800a077 	.word	0x0800a077
 8008cb0:	0800a07b 	.word	0x0800a07b
 8008cb4:	080055b5 	.word	0x080055b5
 8008cb8:	08008a0d 	.word	0x08008a0d

08008cbc <__sflush_r>:
 8008cbc:	898a      	ldrh	r2, [r1, #12]
 8008cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	0710      	lsls	r0, r2, #28
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	d457      	bmi.n	8008d78 <__sflush_r+0xbc>
 8008cc8:	684b      	ldr	r3, [r1, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dc04      	bgt.n	8008cd8 <__sflush_r+0x1c>
 8008cce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	dc01      	bgt.n	8008cd8 <__sflush_r+0x1c>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	d0fa      	beq.n	8008cd4 <__sflush_r+0x18>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ce4:	682f      	ldr	r7, [r5, #0]
 8008ce6:	6a21      	ldr	r1, [r4, #32]
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	d032      	beq.n	8008d52 <__sflush_r+0x96>
 8008cec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	075a      	lsls	r2, r3, #29
 8008cf2:	d505      	bpl.n	8008d00 <__sflush_r+0x44>
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	1ac0      	subs	r0, r0, r3
 8008cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cfa:	b10b      	cbz	r3, 8008d00 <__sflush_r+0x44>
 8008cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cfe:	1ac0      	subs	r0, r0, r3
 8008d00:	2300      	movs	r3, #0
 8008d02:	4602      	mov	r2, r0
 8008d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d06:	4628      	mov	r0, r5
 8008d08:	6a21      	ldr	r1, [r4, #32]
 8008d0a:	47b0      	blx	r6
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	d106      	bne.n	8008d20 <__sflush_r+0x64>
 8008d12:	6829      	ldr	r1, [r5, #0]
 8008d14:	291d      	cmp	r1, #29
 8008d16:	d82b      	bhi.n	8008d70 <__sflush_r+0xb4>
 8008d18:	4a28      	ldr	r2, [pc, #160]	; (8008dbc <__sflush_r+0x100>)
 8008d1a:	410a      	asrs	r2, r1
 8008d1c:	07d6      	lsls	r6, r2, #31
 8008d1e:	d427      	bmi.n	8008d70 <__sflush_r+0xb4>
 8008d20:	2200      	movs	r2, #0
 8008d22:	6062      	str	r2, [r4, #4]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	04d9      	lsls	r1, r3, #19
 8008d28:	6022      	str	r2, [r4, #0]
 8008d2a:	d504      	bpl.n	8008d36 <__sflush_r+0x7a>
 8008d2c:	1c42      	adds	r2, r0, #1
 8008d2e:	d101      	bne.n	8008d34 <__sflush_r+0x78>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b903      	cbnz	r3, 8008d36 <__sflush_r+0x7a>
 8008d34:	6560      	str	r0, [r4, #84]	; 0x54
 8008d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d38:	602f      	str	r7, [r5, #0]
 8008d3a:	2900      	cmp	r1, #0
 8008d3c:	d0ca      	beq.n	8008cd4 <__sflush_r+0x18>
 8008d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d002      	beq.n	8008d4c <__sflush_r+0x90>
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7fe fa2a 	bl	80071a0 <_free_r>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	6360      	str	r0, [r4, #52]	; 0x34
 8008d50:	e7c1      	b.n	8008cd6 <__sflush_r+0x1a>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b0      	blx	r6
 8008d58:	1c41      	adds	r1, r0, #1
 8008d5a:	d1c8      	bne.n	8008cee <__sflush_r+0x32>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c5      	beq.n	8008cee <__sflush_r+0x32>
 8008d62:	2b1d      	cmp	r3, #29
 8008d64:	d001      	beq.n	8008d6a <__sflush_r+0xae>
 8008d66:	2b16      	cmp	r3, #22
 8008d68:	d101      	bne.n	8008d6e <__sflush_r+0xb2>
 8008d6a:	602f      	str	r7, [r5, #0]
 8008d6c:	e7b2      	b.n	8008cd4 <__sflush_r+0x18>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	e7ae      	b.n	8008cd6 <__sflush_r+0x1a>
 8008d78:	690f      	ldr	r7, [r1, #16]
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	d0aa      	beq.n	8008cd4 <__sflush_r+0x18>
 8008d7e:	0793      	lsls	r3, r2, #30
 8008d80:	bf18      	it	ne
 8008d82:	2300      	movne	r3, #0
 8008d84:	680e      	ldr	r6, [r1, #0]
 8008d86:	bf08      	it	eq
 8008d88:	694b      	ldreq	r3, [r1, #20]
 8008d8a:	1bf6      	subs	r6, r6, r7
 8008d8c:	600f      	str	r7, [r1, #0]
 8008d8e:	608b      	str	r3, [r1, #8]
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	dd9f      	ble.n	8008cd4 <__sflush_r+0x18>
 8008d94:	4633      	mov	r3, r6
 8008d96:	463a      	mov	r2, r7
 8008d98:	4628      	mov	r0, r5
 8008d9a:	6a21      	ldr	r1, [r4, #32]
 8008d9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008da0:	47e0      	blx	ip
 8008da2:	2800      	cmp	r0, #0
 8008da4:	dc06      	bgt.n	8008db4 <__sflush_r+0xf8>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	e790      	b.n	8008cd6 <__sflush_r+0x1a>
 8008db4:	4407      	add	r7, r0
 8008db6:	1a36      	subs	r6, r6, r0
 8008db8:	e7ea      	b.n	8008d90 <__sflush_r+0xd4>
 8008dba:	bf00      	nop
 8008dbc:	dfbffffe 	.word	0xdfbffffe

08008dc0 <_fflush_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	690b      	ldr	r3, [r1, #16]
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	b913      	cbnz	r3, 8008dd0 <_fflush_r+0x10>
 8008dca:	2500      	movs	r5, #0
 8008dcc:	4628      	mov	r0, r5
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	b118      	cbz	r0, 8008dda <_fflush_r+0x1a>
 8008dd2:	6a03      	ldr	r3, [r0, #32]
 8008dd4:	b90b      	cbnz	r3, 8008dda <_fflush_r+0x1a>
 8008dd6:	f7fd fa49 	bl	800626c <__sinit>
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f3      	beq.n	8008dca <_fflush_r+0xa>
 8008de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008de4:	07d0      	lsls	r0, r2, #31
 8008de6:	d404      	bmi.n	8008df2 <_fflush_r+0x32>
 8008de8:	0599      	lsls	r1, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_fflush_r+0x32>
 8008dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dee:	f7fd fb54 	bl	800649a <__retarget_lock_acquire_recursive>
 8008df2:	4628      	mov	r0, r5
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff ff61 	bl	8008cbc <__sflush_r>
 8008dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	07da      	lsls	r2, r3, #31
 8008e00:	d4e4      	bmi.n	8008dcc <_fflush_r+0xc>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	d4e1      	bmi.n	8008dcc <_fflush_r+0xc>
 8008e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0a:	f7fd fb47 	bl	800649c <__retarget_lock_release_recursive>
 8008e0e:	e7dd      	b.n	8008dcc <_fflush_r+0xc>

08008e10 <memmove>:
 8008e10:	4288      	cmp	r0, r1
 8008e12:	b510      	push	{r4, lr}
 8008e14:	eb01 0402 	add.w	r4, r1, r2
 8008e18:	d902      	bls.n	8008e20 <memmove+0x10>
 8008e1a:	4284      	cmp	r4, r0
 8008e1c:	4623      	mov	r3, r4
 8008e1e:	d807      	bhi.n	8008e30 <memmove+0x20>
 8008e20:	1e43      	subs	r3, r0, #1
 8008e22:	42a1      	cmp	r1, r4
 8008e24:	d008      	beq.n	8008e38 <memmove+0x28>
 8008e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e2e:	e7f8      	b.n	8008e22 <memmove+0x12>
 8008e30:	4601      	mov	r1, r0
 8008e32:	4402      	add	r2, r0
 8008e34:	428a      	cmp	r2, r1
 8008e36:	d100      	bne.n	8008e3a <memmove+0x2a>
 8008e38:	bd10      	pop	{r4, pc}
 8008e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e42:	e7f7      	b.n	8008e34 <memmove+0x24>

08008e44 <strncmp>:
 8008e44:	b510      	push	{r4, lr}
 8008e46:	b16a      	cbz	r2, 8008e64 <strncmp+0x20>
 8008e48:	3901      	subs	r1, #1
 8008e4a:	1884      	adds	r4, r0, r2
 8008e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d103      	bne.n	8008e60 <strncmp+0x1c>
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d001      	beq.n	8008e60 <strncmp+0x1c>
 8008e5c:	2a00      	cmp	r2, #0
 8008e5e:	d1f5      	bne.n	8008e4c <strncmp+0x8>
 8008e60:	1ad0      	subs	r0, r2, r3
 8008e62:	bd10      	pop	{r4, pc}
 8008e64:	4610      	mov	r0, r2
 8008e66:	e7fc      	b.n	8008e62 <strncmp+0x1e>

08008e68 <_sbrk_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4d05      	ldr	r5, [pc, #20]	; (8008e84 <_sbrk_r+0x1c>)
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7f9 f896 	bl	8001fa4 <_sbrk>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_sbrk_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_sbrk_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000594 	.word	0x20000594

08008e88 <memcpy>:
 8008e88:	440a      	add	r2, r1
 8008e8a:	4291      	cmp	r1, r2
 8008e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e90:	d100      	bne.n	8008e94 <memcpy+0xc>
 8008e92:	4770      	bx	lr
 8008e94:	b510      	push	{r4, lr}
 8008e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e9a:	4291      	cmp	r1, r2
 8008e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ea0:	d1f9      	bne.n	8008e96 <memcpy+0xe>
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <nan>:
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	4901      	ldr	r1, [pc, #4]	; (8008eac <nan+0x8>)
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	7ff80000 	.word	0x7ff80000

08008eb0 <__assert_func>:
 8008eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <__assert_func+0x2c>)
 8008eb8:	4605      	mov	r5, r0
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68d8      	ldr	r0, [r3, #12]
 8008ebe:	b14c      	cbz	r4, 8008ed4 <__assert_func+0x24>
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <__assert_func+0x30>)
 8008ec2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ec6:	9100      	str	r1, [sp, #0]
 8008ec8:	462b      	mov	r3, r5
 8008eca:	4906      	ldr	r1, [pc, #24]	; (8008ee4 <__assert_func+0x34>)
 8008ecc:	f000 fbca 	bl	8009664 <fiprintf>
 8008ed0:	f000 fbda 	bl	8009688 <abort>
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <__assert_func+0x38>)
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	e7f3      	b.n	8008ec2 <__assert_func+0x12>
 8008eda:	bf00      	nop
 8008edc:	20000064 	.word	0x20000064
 8008ee0:	0800a08a 	.word	0x0800a08a
 8008ee4:	0800a097 	.word	0x0800a097
 8008ee8:	0800a0c5 	.word	0x0800a0c5

08008eec <_calloc_r>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	fba1 5402 	umull	r5, r4, r1, r2
 8008ef2:	b934      	cbnz	r4, 8008f02 <_calloc_r+0x16>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7fe f9c3 	bl	8007280 <_malloc_r>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <_calloc_r+0x1e>
 8008efe:	4630      	mov	r0, r6
 8008f00:	bd70      	pop	{r4, r5, r6, pc}
 8008f02:	220c      	movs	r2, #12
 8008f04:	2600      	movs	r6, #0
 8008f06:	6002      	str	r2, [r0, #0]
 8008f08:	e7f9      	b.n	8008efe <_calloc_r+0x12>
 8008f0a:	462a      	mov	r2, r5
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	f7fd fa46 	bl	800639e <memset>
 8008f12:	e7f4      	b.n	8008efe <_calloc_r+0x12>

08008f14 <rshift>:
 8008f14:	6903      	ldr	r3, [r0, #16]
 8008f16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f1e:	f100 0414 	add.w	r4, r0, #20
 8008f22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f26:	dd46      	ble.n	8008fb6 <rshift+0xa2>
 8008f28:	f011 011f 	ands.w	r1, r1, #31
 8008f2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f34:	d10c      	bne.n	8008f50 <rshift+0x3c>
 8008f36:	4629      	mov	r1, r5
 8008f38:	f100 0710 	add.w	r7, r0, #16
 8008f3c:	42b1      	cmp	r1, r6
 8008f3e:	d335      	bcc.n	8008fac <rshift+0x98>
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	1eea      	subs	r2, r5, #3
 8008f46:	4296      	cmp	r6, r2
 8008f48:	bf38      	it	cc
 8008f4a:	2300      	movcc	r3, #0
 8008f4c:	4423      	add	r3, r4
 8008f4e:	e015      	b.n	8008f7c <rshift+0x68>
 8008f50:	46a1      	mov	r9, r4
 8008f52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f56:	f1c1 0820 	rsb	r8, r1, #32
 8008f5a:	40cf      	lsrs	r7, r1
 8008f5c:	f105 0e04 	add.w	lr, r5, #4
 8008f60:	4576      	cmp	r6, lr
 8008f62:	46f4      	mov	ip, lr
 8008f64:	d816      	bhi.n	8008f94 <rshift+0x80>
 8008f66:	1a9a      	subs	r2, r3, r2
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	3a04      	subs	r2, #4
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	42ae      	cmp	r6, r5
 8008f70:	bf38      	it	cc
 8008f72:	2200      	movcc	r2, #0
 8008f74:	18a3      	adds	r3, r4, r2
 8008f76:	50a7      	str	r7, [r4, r2]
 8008f78:	b107      	cbz	r7, 8008f7c <rshift+0x68>
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	eba3 0204 	sub.w	r2, r3, r4
 8008f82:	bf08      	it	eq
 8008f84:	2300      	moveq	r3, #0
 8008f86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f8a:	6102      	str	r2, [r0, #16]
 8008f8c:	bf08      	it	eq
 8008f8e:	6143      	streq	r3, [r0, #20]
 8008f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f94:	f8dc c000 	ldr.w	ip, [ip]
 8008f98:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f9c:	ea4c 0707 	orr.w	r7, ip, r7
 8008fa0:	f849 7b04 	str.w	r7, [r9], #4
 8008fa4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fa8:	40cf      	lsrs	r7, r1
 8008faa:	e7d9      	b.n	8008f60 <rshift+0x4c>
 8008fac:	f851 cb04 	ldr.w	ip, [r1], #4
 8008fb0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008fb4:	e7c2      	b.n	8008f3c <rshift+0x28>
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	e7e0      	b.n	8008f7c <rshift+0x68>

08008fba <__hexdig_fun>:
 8008fba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008fbe:	2b09      	cmp	r3, #9
 8008fc0:	d802      	bhi.n	8008fc8 <__hexdig_fun+0xe>
 8008fc2:	3820      	subs	r0, #32
 8008fc4:	b2c0      	uxtb	r0, r0
 8008fc6:	4770      	bx	lr
 8008fc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008fcc:	2b05      	cmp	r3, #5
 8008fce:	d801      	bhi.n	8008fd4 <__hexdig_fun+0x1a>
 8008fd0:	3847      	subs	r0, #71	; 0x47
 8008fd2:	e7f7      	b.n	8008fc4 <__hexdig_fun+0xa>
 8008fd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	d801      	bhi.n	8008fe0 <__hexdig_fun+0x26>
 8008fdc:	3827      	subs	r0, #39	; 0x27
 8008fde:	e7f1      	b.n	8008fc4 <__hexdig_fun+0xa>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	4770      	bx	lr

08008fe4 <__gethex>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	4681      	mov	r9, r0
 8008fea:	468a      	mov	sl, r1
 8008fec:	4617      	mov	r7, r2
 8008fee:	680a      	ldr	r2, [r1, #0]
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	f102 0b02 	add.w	fp, r2, #2
 8008ff6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ffa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	32fe      	adds	r2, #254	; 0xfe
 8009002:	eb02 030b 	add.w	r3, r2, fp
 8009006:	46d8      	mov	r8, fp
 8009008:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	2830      	cmp	r0, #48	; 0x30
 8009010:	d0f7      	beq.n	8009002 <__gethex+0x1e>
 8009012:	f7ff ffd2 	bl	8008fba <__hexdig_fun>
 8009016:	4604      	mov	r4, r0
 8009018:	2800      	cmp	r0, #0
 800901a:	d138      	bne.n	800908e <__gethex+0xaa>
 800901c:	2201      	movs	r2, #1
 800901e:	4640      	mov	r0, r8
 8009020:	49a7      	ldr	r1, [pc, #668]	; (80092c0 <__gethex+0x2dc>)
 8009022:	f7ff ff0f 	bl	8008e44 <strncmp>
 8009026:	4606      	mov	r6, r0
 8009028:	2800      	cmp	r0, #0
 800902a:	d169      	bne.n	8009100 <__gethex+0x11c>
 800902c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009030:	465d      	mov	r5, fp
 8009032:	f7ff ffc2 	bl	8008fba <__hexdig_fun>
 8009036:	2800      	cmp	r0, #0
 8009038:	d064      	beq.n	8009104 <__gethex+0x120>
 800903a:	465a      	mov	r2, fp
 800903c:	7810      	ldrb	r0, [r2, #0]
 800903e:	4690      	mov	r8, r2
 8009040:	2830      	cmp	r0, #48	; 0x30
 8009042:	f102 0201 	add.w	r2, r2, #1
 8009046:	d0f9      	beq.n	800903c <__gethex+0x58>
 8009048:	f7ff ffb7 	bl	8008fba <__hexdig_fun>
 800904c:	2301      	movs	r3, #1
 800904e:	fab0 f480 	clz	r4, r0
 8009052:	465e      	mov	r6, fp
 8009054:	0964      	lsrs	r4, r4, #5
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	4642      	mov	r2, r8
 800905a:	4615      	mov	r5, r2
 800905c:	7828      	ldrb	r0, [r5, #0]
 800905e:	3201      	adds	r2, #1
 8009060:	f7ff ffab 	bl	8008fba <__hexdig_fun>
 8009064:	2800      	cmp	r0, #0
 8009066:	d1f8      	bne.n	800905a <__gethex+0x76>
 8009068:	2201      	movs	r2, #1
 800906a:	4628      	mov	r0, r5
 800906c:	4994      	ldr	r1, [pc, #592]	; (80092c0 <__gethex+0x2dc>)
 800906e:	f7ff fee9 	bl	8008e44 <strncmp>
 8009072:	b978      	cbnz	r0, 8009094 <__gethex+0xb0>
 8009074:	b946      	cbnz	r6, 8009088 <__gethex+0xa4>
 8009076:	1c6e      	adds	r6, r5, #1
 8009078:	4632      	mov	r2, r6
 800907a:	4615      	mov	r5, r2
 800907c:	7828      	ldrb	r0, [r5, #0]
 800907e:	3201      	adds	r2, #1
 8009080:	f7ff ff9b 	bl	8008fba <__hexdig_fun>
 8009084:	2800      	cmp	r0, #0
 8009086:	d1f8      	bne.n	800907a <__gethex+0x96>
 8009088:	1b73      	subs	r3, r6, r5
 800908a:	009e      	lsls	r6, r3, #2
 800908c:	e004      	b.n	8009098 <__gethex+0xb4>
 800908e:	2400      	movs	r4, #0
 8009090:	4626      	mov	r6, r4
 8009092:	e7e1      	b.n	8009058 <__gethex+0x74>
 8009094:	2e00      	cmp	r6, #0
 8009096:	d1f7      	bne.n	8009088 <__gethex+0xa4>
 8009098:	782b      	ldrb	r3, [r5, #0]
 800909a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800909e:	2b50      	cmp	r3, #80	; 0x50
 80090a0:	d13d      	bne.n	800911e <__gethex+0x13a>
 80090a2:	786b      	ldrb	r3, [r5, #1]
 80090a4:	2b2b      	cmp	r3, #43	; 0x2b
 80090a6:	d02f      	beq.n	8009108 <__gethex+0x124>
 80090a8:	2b2d      	cmp	r3, #45	; 0x2d
 80090aa:	d031      	beq.n	8009110 <__gethex+0x12c>
 80090ac:	f04f 0b00 	mov.w	fp, #0
 80090b0:	1c69      	adds	r1, r5, #1
 80090b2:	7808      	ldrb	r0, [r1, #0]
 80090b4:	f7ff ff81 	bl	8008fba <__hexdig_fun>
 80090b8:	1e42      	subs	r2, r0, #1
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	2a18      	cmp	r2, #24
 80090be:	d82e      	bhi.n	800911e <__gethex+0x13a>
 80090c0:	f1a0 0210 	sub.w	r2, r0, #16
 80090c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090c8:	f7ff ff77 	bl	8008fba <__hexdig_fun>
 80090cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80090d0:	fa5f fc8c 	uxtb.w	ip, ip
 80090d4:	f1bc 0f18 	cmp.w	ip, #24
 80090d8:	d91d      	bls.n	8009116 <__gethex+0x132>
 80090da:	f1bb 0f00 	cmp.w	fp, #0
 80090de:	d000      	beq.n	80090e2 <__gethex+0xfe>
 80090e0:	4252      	negs	r2, r2
 80090e2:	4416      	add	r6, r2
 80090e4:	f8ca 1000 	str.w	r1, [sl]
 80090e8:	b1dc      	cbz	r4, 8009122 <__gethex+0x13e>
 80090ea:	9b01      	ldr	r3, [sp, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf14      	ite	ne
 80090f0:	f04f 0800 	movne.w	r8, #0
 80090f4:	f04f 0806 	moveq.w	r8, #6
 80090f8:	4640      	mov	r0, r8
 80090fa:	b005      	add	sp, #20
 80090fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009100:	4645      	mov	r5, r8
 8009102:	4626      	mov	r6, r4
 8009104:	2401      	movs	r4, #1
 8009106:	e7c7      	b.n	8009098 <__gethex+0xb4>
 8009108:	f04f 0b00 	mov.w	fp, #0
 800910c:	1ca9      	adds	r1, r5, #2
 800910e:	e7d0      	b.n	80090b2 <__gethex+0xce>
 8009110:	f04f 0b01 	mov.w	fp, #1
 8009114:	e7fa      	b.n	800910c <__gethex+0x128>
 8009116:	230a      	movs	r3, #10
 8009118:	fb03 0002 	mla	r0, r3, r2, r0
 800911c:	e7d0      	b.n	80090c0 <__gethex+0xdc>
 800911e:	4629      	mov	r1, r5
 8009120:	e7e0      	b.n	80090e4 <__gethex+0x100>
 8009122:	4621      	mov	r1, r4
 8009124:	eba5 0308 	sub.w	r3, r5, r8
 8009128:	3b01      	subs	r3, #1
 800912a:	2b07      	cmp	r3, #7
 800912c:	dc0a      	bgt.n	8009144 <__gethex+0x160>
 800912e:	4648      	mov	r0, r9
 8009130:	f7fe f932 	bl	8007398 <_Balloc>
 8009134:	4604      	mov	r4, r0
 8009136:	b940      	cbnz	r0, 800914a <__gethex+0x166>
 8009138:	4602      	mov	r2, r0
 800913a:	21e4      	movs	r1, #228	; 0xe4
 800913c:	4b61      	ldr	r3, [pc, #388]	; (80092c4 <__gethex+0x2e0>)
 800913e:	4862      	ldr	r0, [pc, #392]	; (80092c8 <__gethex+0x2e4>)
 8009140:	f7ff feb6 	bl	8008eb0 <__assert_func>
 8009144:	3101      	adds	r1, #1
 8009146:	105b      	asrs	r3, r3, #1
 8009148:	e7ef      	b.n	800912a <__gethex+0x146>
 800914a:	2300      	movs	r3, #0
 800914c:	469b      	mov	fp, r3
 800914e:	f100 0a14 	add.w	sl, r0, #20
 8009152:	f8cd a004 	str.w	sl, [sp, #4]
 8009156:	45a8      	cmp	r8, r5
 8009158:	d344      	bcc.n	80091e4 <__gethex+0x200>
 800915a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800915e:	4658      	mov	r0, fp
 8009160:	f848 bb04 	str.w	fp, [r8], #4
 8009164:	eba8 080a 	sub.w	r8, r8, sl
 8009168:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800916c:	6122      	str	r2, [r4, #16]
 800916e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009172:	f7fe fa03 	bl	800757c <__hi0bits>
 8009176:	683d      	ldr	r5, [r7, #0]
 8009178:	eba8 0800 	sub.w	r8, r8, r0
 800917c:	45a8      	cmp	r8, r5
 800917e:	dd59      	ble.n	8009234 <__gethex+0x250>
 8009180:	eba8 0805 	sub.w	r8, r8, r5
 8009184:	4641      	mov	r1, r8
 8009186:	4620      	mov	r0, r4
 8009188:	f7fe fd81 	bl	8007c8e <__any_on>
 800918c:	4683      	mov	fp, r0
 800918e:	b1b8      	cbz	r0, 80091c0 <__gethex+0x1dc>
 8009190:	f04f 0b01 	mov.w	fp, #1
 8009194:	f108 33ff 	add.w	r3, r8, #4294967295
 8009198:	1159      	asrs	r1, r3, #5
 800919a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800919e:	f003 021f 	and.w	r2, r3, #31
 80091a2:	fa0b f202 	lsl.w	r2, fp, r2
 80091a6:	420a      	tst	r2, r1
 80091a8:	d00a      	beq.n	80091c0 <__gethex+0x1dc>
 80091aa:	455b      	cmp	r3, fp
 80091ac:	dd06      	ble.n	80091bc <__gethex+0x1d8>
 80091ae:	4620      	mov	r0, r4
 80091b0:	f1a8 0102 	sub.w	r1, r8, #2
 80091b4:	f7fe fd6b 	bl	8007c8e <__any_on>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d138      	bne.n	800922e <__gethex+0x24a>
 80091bc:	f04f 0b02 	mov.w	fp, #2
 80091c0:	4641      	mov	r1, r8
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7ff fea6 	bl	8008f14 <rshift>
 80091c8:	4446      	add	r6, r8
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	42b3      	cmp	r3, r6
 80091ce:	da41      	bge.n	8009254 <__gethex+0x270>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4648      	mov	r0, r9
 80091d4:	f7fe f920 	bl	8007418 <_Bfree>
 80091d8:	2300      	movs	r3, #0
 80091da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	e789      	b.n	80090f8 <__gethex+0x114>
 80091e4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80091e8:	2a2e      	cmp	r2, #46	; 0x2e
 80091ea:	d014      	beq.n	8009216 <__gethex+0x232>
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d106      	bne.n	80091fe <__gethex+0x21a>
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	f843 bb04 	str.w	fp, [r3], #4
 80091f6:	f04f 0b00 	mov.w	fp, #0
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	465b      	mov	r3, fp
 80091fe:	7828      	ldrb	r0, [r5, #0]
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	f7ff feda 	bl	8008fba <__hexdig_fun>
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	f000 000f 	and.w	r0, r0, #15
 800920c:	4098      	lsls	r0, r3
 800920e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009212:	3304      	adds	r3, #4
 8009214:	e79f      	b.n	8009156 <__gethex+0x172>
 8009216:	45a8      	cmp	r8, r5
 8009218:	d8e8      	bhi.n	80091ec <__gethex+0x208>
 800921a:	2201      	movs	r2, #1
 800921c:	4628      	mov	r0, r5
 800921e:	4928      	ldr	r1, [pc, #160]	; (80092c0 <__gethex+0x2dc>)
 8009220:	9303      	str	r3, [sp, #12]
 8009222:	f7ff fe0f 	bl	8008e44 <strncmp>
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	2800      	cmp	r0, #0
 800922a:	d1df      	bne.n	80091ec <__gethex+0x208>
 800922c:	e793      	b.n	8009156 <__gethex+0x172>
 800922e:	f04f 0b03 	mov.w	fp, #3
 8009232:	e7c5      	b.n	80091c0 <__gethex+0x1dc>
 8009234:	da0b      	bge.n	800924e <__gethex+0x26a>
 8009236:	eba5 0808 	sub.w	r8, r5, r8
 800923a:	4621      	mov	r1, r4
 800923c:	4642      	mov	r2, r8
 800923e:	4648      	mov	r0, r9
 8009240:	f7fe fb02 	bl	8007848 <__lshift>
 8009244:	4604      	mov	r4, r0
 8009246:	eba6 0608 	sub.w	r6, r6, r8
 800924a:	f100 0a14 	add.w	sl, r0, #20
 800924e:	f04f 0b00 	mov.w	fp, #0
 8009252:	e7ba      	b.n	80091ca <__gethex+0x1e6>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	42b3      	cmp	r3, r6
 8009258:	dd74      	ble.n	8009344 <__gethex+0x360>
 800925a:	1b9e      	subs	r6, r3, r6
 800925c:	42b5      	cmp	r5, r6
 800925e:	dc35      	bgt.n	80092cc <__gethex+0x2e8>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d023      	beq.n	80092ae <__gethex+0x2ca>
 8009266:	2b03      	cmp	r3, #3
 8009268:	d025      	beq.n	80092b6 <__gethex+0x2d2>
 800926a:	2b01      	cmp	r3, #1
 800926c:	d115      	bne.n	800929a <__gethex+0x2b6>
 800926e:	42b5      	cmp	r5, r6
 8009270:	d113      	bne.n	800929a <__gethex+0x2b6>
 8009272:	2d01      	cmp	r5, #1
 8009274:	d10b      	bne.n	800928e <__gethex+0x2aa>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	9a02      	ldr	r2, [sp, #8]
 800927a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	2301      	movs	r3, #1
 8009282:	6123      	str	r3, [r4, #16]
 8009284:	f8ca 3000 	str.w	r3, [sl]
 8009288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800928a:	601c      	str	r4, [r3, #0]
 800928c:	e734      	b.n	80090f8 <__gethex+0x114>
 800928e:	4620      	mov	r0, r4
 8009290:	1e69      	subs	r1, r5, #1
 8009292:	f7fe fcfc 	bl	8007c8e <__any_on>
 8009296:	2800      	cmp	r0, #0
 8009298:	d1ed      	bne.n	8009276 <__gethex+0x292>
 800929a:	4621      	mov	r1, r4
 800929c:	4648      	mov	r0, r9
 800929e:	f7fe f8bb 	bl	8007418 <_Bfree>
 80092a2:	2300      	movs	r3, #0
 80092a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	e724      	b.n	80090f8 <__gethex+0x114>
 80092ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f2      	bne.n	800929a <__gethex+0x2b6>
 80092b4:	e7df      	b.n	8009276 <__gethex+0x292>
 80092b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1dc      	bne.n	8009276 <__gethex+0x292>
 80092bc:	e7ed      	b.n	800929a <__gethex+0x2b6>
 80092be:	bf00      	nop
 80092c0:	08009f1c 	.word	0x08009f1c
 80092c4:	08009db5 	.word	0x08009db5
 80092c8:	0800a0c6 	.word	0x0800a0c6
 80092cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80092d0:	f1bb 0f00 	cmp.w	fp, #0
 80092d4:	d133      	bne.n	800933e <__gethex+0x35a>
 80092d6:	f1b8 0f00 	cmp.w	r8, #0
 80092da:	d004      	beq.n	80092e6 <__gethex+0x302>
 80092dc:	4641      	mov	r1, r8
 80092de:	4620      	mov	r0, r4
 80092e0:	f7fe fcd5 	bl	8007c8e <__any_on>
 80092e4:	4683      	mov	fp, r0
 80092e6:	2301      	movs	r3, #1
 80092e8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80092ec:	f008 081f 	and.w	r8, r8, #31
 80092f0:	fa03 f308 	lsl.w	r3, r3, r8
 80092f4:	f04f 0802 	mov.w	r8, #2
 80092f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4213      	tst	r3, r2
 8009300:	4620      	mov	r0, r4
 8009302:	bf18      	it	ne
 8009304:	f04b 0b02 	orrne.w	fp, fp, #2
 8009308:	1bad      	subs	r5, r5, r6
 800930a:	f7ff fe03 	bl	8008f14 <rshift>
 800930e:	687e      	ldr	r6, [r7, #4]
 8009310:	f1bb 0f00 	cmp.w	fp, #0
 8009314:	d04a      	beq.n	80093ac <__gethex+0x3c8>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d016      	beq.n	800934a <__gethex+0x366>
 800931c:	2b03      	cmp	r3, #3
 800931e:	d018      	beq.n	8009352 <__gethex+0x36e>
 8009320:	2b01      	cmp	r3, #1
 8009322:	d109      	bne.n	8009338 <__gethex+0x354>
 8009324:	f01b 0f02 	tst.w	fp, #2
 8009328:	d006      	beq.n	8009338 <__gethex+0x354>
 800932a:	f8da 3000 	ldr.w	r3, [sl]
 800932e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009332:	f01b 0f01 	tst.w	fp, #1
 8009336:	d10f      	bne.n	8009358 <__gethex+0x374>
 8009338:	f048 0810 	orr.w	r8, r8, #16
 800933c:	e036      	b.n	80093ac <__gethex+0x3c8>
 800933e:	f04f 0b01 	mov.w	fp, #1
 8009342:	e7d0      	b.n	80092e6 <__gethex+0x302>
 8009344:	f04f 0801 	mov.w	r8, #1
 8009348:	e7e2      	b.n	8009310 <__gethex+0x32c>
 800934a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800934c:	f1c3 0301 	rsb	r3, r3, #1
 8009350:	930f      	str	r3, [sp, #60]	; 0x3c
 8009352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0ef      	beq.n	8009338 <__gethex+0x354>
 8009358:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800935c:	f104 0214 	add.w	r2, r4, #20
 8009360:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	2300      	movs	r3, #0
 8009368:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800936c:	4694      	mov	ip, r2
 800936e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009372:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009376:	d01e      	beq.n	80093b6 <__gethex+0x3d2>
 8009378:	3101      	adds	r1, #1
 800937a:	f8cc 1000 	str.w	r1, [ip]
 800937e:	f1b8 0f02 	cmp.w	r8, #2
 8009382:	f104 0214 	add.w	r2, r4, #20
 8009386:	d13d      	bne.n	8009404 <__gethex+0x420>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	3b01      	subs	r3, #1
 800938c:	42ab      	cmp	r3, r5
 800938e:	d10b      	bne.n	80093a8 <__gethex+0x3c4>
 8009390:	2301      	movs	r3, #1
 8009392:	1169      	asrs	r1, r5, #5
 8009394:	f005 051f 	and.w	r5, r5, #31
 8009398:	fa03 f505 	lsl.w	r5, r3, r5
 800939c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093a0:	421d      	tst	r5, r3
 80093a2:	bf18      	it	ne
 80093a4:	f04f 0801 	movne.w	r8, #1
 80093a8:	f048 0820 	orr.w	r8, r8, #32
 80093ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ae:	601c      	str	r4, [r3, #0]
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	601e      	str	r6, [r3, #0]
 80093b4:	e6a0      	b.n	80090f8 <__gethex+0x114>
 80093b6:	4290      	cmp	r0, r2
 80093b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80093bc:	d8d6      	bhi.n	800936c <__gethex+0x388>
 80093be:	68a2      	ldr	r2, [r4, #8]
 80093c0:	4593      	cmp	fp, r2
 80093c2:	db17      	blt.n	80093f4 <__gethex+0x410>
 80093c4:	6861      	ldr	r1, [r4, #4]
 80093c6:	4648      	mov	r0, r9
 80093c8:	3101      	adds	r1, #1
 80093ca:	f7fd ffe5 	bl	8007398 <_Balloc>
 80093ce:	4682      	mov	sl, r0
 80093d0:	b918      	cbnz	r0, 80093da <__gethex+0x3f6>
 80093d2:	4602      	mov	r2, r0
 80093d4:	2184      	movs	r1, #132	; 0x84
 80093d6:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <__gethex+0x45c>)
 80093d8:	e6b1      	b.n	800913e <__gethex+0x15a>
 80093da:	6922      	ldr	r2, [r4, #16]
 80093dc:	f104 010c 	add.w	r1, r4, #12
 80093e0:	3202      	adds	r2, #2
 80093e2:	0092      	lsls	r2, r2, #2
 80093e4:	300c      	adds	r0, #12
 80093e6:	f7ff fd4f 	bl	8008e88 <memcpy>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4648      	mov	r0, r9
 80093ee:	f7fe f813 	bl	8007418 <_Bfree>
 80093f2:	4654      	mov	r4, sl
 80093f4:	6922      	ldr	r2, [r4, #16]
 80093f6:	1c51      	adds	r1, r2, #1
 80093f8:	6121      	str	r1, [r4, #16]
 80093fa:	2101      	movs	r1, #1
 80093fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009400:	6151      	str	r1, [r2, #20]
 8009402:	e7bc      	b.n	800937e <__gethex+0x39a>
 8009404:	6921      	ldr	r1, [r4, #16]
 8009406:	4559      	cmp	r1, fp
 8009408:	dd0b      	ble.n	8009422 <__gethex+0x43e>
 800940a:	2101      	movs	r1, #1
 800940c:	4620      	mov	r0, r4
 800940e:	f7ff fd81 	bl	8008f14 <rshift>
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	3601      	adds	r6, #1
 8009416:	42b3      	cmp	r3, r6
 8009418:	f6ff aeda 	blt.w	80091d0 <__gethex+0x1ec>
 800941c:	f04f 0801 	mov.w	r8, #1
 8009420:	e7c2      	b.n	80093a8 <__gethex+0x3c4>
 8009422:	f015 051f 	ands.w	r5, r5, #31
 8009426:	d0f9      	beq.n	800941c <__gethex+0x438>
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	f1c5 0520 	rsb	r5, r5, #32
 800942e:	441a      	add	r2, r3
 8009430:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009434:	f7fe f8a2 	bl	800757c <__hi0bits>
 8009438:	42a8      	cmp	r0, r5
 800943a:	dbe6      	blt.n	800940a <__gethex+0x426>
 800943c:	e7ee      	b.n	800941c <__gethex+0x438>
 800943e:	bf00      	nop
 8009440:	08009db5 	.word	0x08009db5

08009444 <L_shift>:
 8009444:	f1c2 0208 	rsb	r2, r2, #8
 8009448:	0092      	lsls	r2, r2, #2
 800944a:	b570      	push	{r4, r5, r6, lr}
 800944c:	f1c2 0620 	rsb	r6, r2, #32
 8009450:	6843      	ldr	r3, [r0, #4]
 8009452:	6804      	ldr	r4, [r0, #0]
 8009454:	fa03 f506 	lsl.w	r5, r3, r6
 8009458:	432c      	orrs	r4, r5
 800945a:	40d3      	lsrs	r3, r2
 800945c:	6004      	str	r4, [r0, #0]
 800945e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009462:	4288      	cmp	r0, r1
 8009464:	d3f4      	bcc.n	8009450 <L_shift+0xc>
 8009466:	bd70      	pop	{r4, r5, r6, pc}

08009468 <__match>:
 8009468:	b530      	push	{r4, r5, lr}
 800946a:	6803      	ldr	r3, [r0, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009472:	b914      	cbnz	r4, 800947a <__match+0x12>
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	2001      	movs	r0, #1
 8009478:	bd30      	pop	{r4, r5, pc}
 800947a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800947e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009482:	2d19      	cmp	r5, #25
 8009484:	bf98      	it	ls
 8009486:	3220      	addls	r2, #32
 8009488:	42a2      	cmp	r2, r4
 800948a:	d0f0      	beq.n	800946e <__match+0x6>
 800948c:	2000      	movs	r0, #0
 800948e:	e7f3      	b.n	8009478 <__match+0x10>

08009490 <__hexnan>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	2500      	movs	r5, #0
 8009496:	680b      	ldr	r3, [r1, #0]
 8009498:	4682      	mov	sl, r0
 800949a:	115e      	asrs	r6, r3, #5
 800949c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094a0:	f013 031f 	ands.w	r3, r3, #31
 80094a4:	bf18      	it	ne
 80094a6:	3604      	addne	r6, #4
 80094a8:	1f37      	subs	r7, r6, #4
 80094aa:	4690      	mov	r8, r2
 80094ac:	46b9      	mov	r9, r7
 80094ae:	463c      	mov	r4, r7
 80094b0:	46ab      	mov	fp, r5
 80094b2:	b087      	sub	sp, #28
 80094b4:	6801      	ldr	r1, [r0, #0]
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80094bc:	9502      	str	r5, [sp, #8]
 80094be:	784a      	ldrb	r2, [r1, #1]
 80094c0:	1c4b      	adds	r3, r1, #1
 80094c2:	9303      	str	r3, [sp, #12]
 80094c4:	b342      	cbz	r2, 8009518 <__hexnan+0x88>
 80094c6:	4610      	mov	r0, r2
 80094c8:	9105      	str	r1, [sp, #20]
 80094ca:	9204      	str	r2, [sp, #16]
 80094cc:	f7ff fd75 	bl	8008fba <__hexdig_fun>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d14f      	bne.n	8009574 <__hexnan+0xe4>
 80094d4:	9a04      	ldr	r2, [sp, #16]
 80094d6:	9905      	ldr	r1, [sp, #20]
 80094d8:	2a20      	cmp	r2, #32
 80094da:	d818      	bhi.n	800950e <__hexnan+0x7e>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	459b      	cmp	fp, r3
 80094e0:	dd13      	ble.n	800950a <__hexnan+0x7a>
 80094e2:	454c      	cmp	r4, r9
 80094e4:	d206      	bcs.n	80094f4 <__hexnan+0x64>
 80094e6:	2d07      	cmp	r5, #7
 80094e8:	dc04      	bgt.n	80094f4 <__hexnan+0x64>
 80094ea:	462a      	mov	r2, r5
 80094ec:	4649      	mov	r1, r9
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff ffa8 	bl	8009444 <L_shift>
 80094f4:	4544      	cmp	r4, r8
 80094f6:	d950      	bls.n	800959a <__hexnan+0x10a>
 80094f8:	2300      	movs	r3, #0
 80094fa:	f1a4 0904 	sub.w	r9, r4, #4
 80094fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009502:	461d      	mov	r5, r3
 8009504:	464c      	mov	r4, r9
 8009506:	f8cd b008 	str.w	fp, [sp, #8]
 800950a:	9903      	ldr	r1, [sp, #12]
 800950c:	e7d7      	b.n	80094be <__hexnan+0x2e>
 800950e:	2a29      	cmp	r2, #41	; 0x29
 8009510:	d155      	bne.n	80095be <__hexnan+0x12e>
 8009512:	3102      	adds	r1, #2
 8009514:	f8ca 1000 	str.w	r1, [sl]
 8009518:	f1bb 0f00 	cmp.w	fp, #0
 800951c:	d04f      	beq.n	80095be <__hexnan+0x12e>
 800951e:	454c      	cmp	r4, r9
 8009520:	d206      	bcs.n	8009530 <__hexnan+0xa0>
 8009522:	2d07      	cmp	r5, #7
 8009524:	dc04      	bgt.n	8009530 <__hexnan+0xa0>
 8009526:	462a      	mov	r2, r5
 8009528:	4649      	mov	r1, r9
 800952a:	4620      	mov	r0, r4
 800952c:	f7ff ff8a 	bl	8009444 <L_shift>
 8009530:	4544      	cmp	r4, r8
 8009532:	d934      	bls.n	800959e <__hexnan+0x10e>
 8009534:	4623      	mov	r3, r4
 8009536:	f1a8 0204 	sub.w	r2, r8, #4
 800953a:	f853 1b04 	ldr.w	r1, [r3], #4
 800953e:	429f      	cmp	r7, r3
 8009540:	f842 1f04 	str.w	r1, [r2, #4]!
 8009544:	d2f9      	bcs.n	800953a <__hexnan+0xaa>
 8009546:	1b3b      	subs	r3, r7, r4
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	3304      	adds	r3, #4
 800954e:	3e03      	subs	r6, #3
 8009550:	3401      	adds	r4, #1
 8009552:	42a6      	cmp	r6, r4
 8009554:	bf38      	it	cc
 8009556:	2304      	movcc	r3, #4
 8009558:	2200      	movs	r2, #0
 800955a:	4443      	add	r3, r8
 800955c:	f843 2b04 	str.w	r2, [r3], #4
 8009560:	429f      	cmp	r7, r3
 8009562:	d2fb      	bcs.n	800955c <__hexnan+0xcc>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	b91b      	cbnz	r3, 8009570 <__hexnan+0xe0>
 8009568:	4547      	cmp	r7, r8
 800956a:	d126      	bne.n	80095ba <__hexnan+0x12a>
 800956c:	2301      	movs	r3, #1
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	2005      	movs	r0, #5
 8009572:	e025      	b.n	80095c0 <__hexnan+0x130>
 8009574:	3501      	adds	r5, #1
 8009576:	2d08      	cmp	r5, #8
 8009578:	f10b 0b01 	add.w	fp, fp, #1
 800957c:	dd06      	ble.n	800958c <__hexnan+0xfc>
 800957e:	4544      	cmp	r4, r8
 8009580:	d9c3      	bls.n	800950a <__hexnan+0x7a>
 8009582:	2300      	movs	r3, #0
 8009584:	2501      	movs	r5, #1
 8009586:	f844 3c04 	str.w	r3, [r4, #-4]
 800958a:	3c04      	subs	r4, #4
 800958c:	6822      	ldr	r2, [r4, #0]
 800958e:	f000 000f 	and.w	r0, r0, #15
 8009592:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009596:	6020      	str	r0, [r4, #0]
 8009598:	e7b7      	b.n	800950a <__hexnan+0x7a>
 800959a:	2508      	movs	r5, #8
 800959c:	e7b5      	b.n	800950a <__hexnan+0x7a>
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0df      	beq.n	8009564 <__hexnan+0xd4>
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	f1c3 0320 	rsb	r3, r3, #32
 80095ac:	40da      	lsrs	r2, r3
 80095ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80095b2:	4013      	ands	r3, r2
 80095b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80095b8:	e7d4      	b.n	8009564 <__hexnan+0xd4>
 80095ba:	3f04      	subs	r7, #4
 80095bc:	e7d2      	b.n	8009564 <__hexnan+0xd4>
 80095be:	2004      	movs	r0, #4
 80095c0:	b007      	add	sp, #28
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095c6 <__ascii_mbtowc>:
 80095c6:	b082      	sub	sp, #8
 80095c8:	b901      	cbnz	r1, 80095cc <__ascii_mbtowc+0x6>
 80095ca:	a901      	add	r1, sp, #4
 80095cc:	b142      	cbz	r2, 80095e0 <__ascii_mbtowc+0x1a>
 80095ce:	b14b      	cbz	r3, 80095e4 <__ascii_mbtowc+0x1e>
 80095d0:	7813      	ldrb	r3, [r2, #0]
 80095d2:	600b      	str	r3, [r1, #0]
 80095d4:	7812      	ldrb	r2, [r2, #0]
 80095d6:	1e10      	subs	r0, r2, #0
 80095d8:	bf18      	it	ne
 80095da:	2001      	movne	r0, #1
 80095dc:	b002      	add	sp, #8
 80095de:	4770      	bx	lr
 80095e0:	4610      	mov	r0, r2
 80095e2:	e7fb      	b.n	80095dc <__ascii_mbtowc+0x16>
 80095e4:	f06f 0001 	mvn.w	r0, #1
 80095e8:	e7f8      	b.n	80095dc <__ascii_mbtowc+0x16>

080095ea <_realloc_r>:
 80095ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ee:	4680      	mov	r8, r0
 80095f0:	4614      	mov	r4, r2
 80095f2:	460e      	mov	r6, r1
 80095f4:	b921      	cbnz	r1, 8009600 <_realloc_r+0x16>
 80095f6:	4611      	mov	r1, r2
 80095f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095fc:	f7fd be40 	b.w	8007280 <_malloc_r>
 8009600:	b92a      	cbnz	r2, 800960e <_realloc_r+0x24>
 8009602:	f7fd fdcd 	bl	80071a0 <_free_r>
 8009606:	4625      	mov	r5, r4
 8009608:	4628      	mov	r0, r5
 800960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960e:	f000 f842 	bl	8009696 <_malloc_usable_size_r>
 8009612:	4284      	cmp	r4, r0
 8009614:	4607      	mov	r7, r0
 8009616:	d802      	bhi.n	800961e <_realloc_r+0x34>
 8009618:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800961c:	d812      	bhi.n	8009644 <_realloc_r+0x5a>
 800961e:	4621      	mov	r1, r4
 8009620:	4640      	mov	r0, r8
 8009622:	f7fd fe2d 	bl	8007280 <_malloc_r>
 8009626:	4605      	mov	r5, r0
 8009628:	2800      	cmp	r0, #0
 800962a:	d0ed      	beq.n	8009608 <_realloc_r+0x1e>
 800962c:	42bc      	cmp	r4, r7
 800962e:	4622      	mov	r2, r4
 8009630:	4631      	mov	r1, r6
 8009632:	bf28      	it	cs
 8009634:	463a      	movcs	r2, r7
 8009636:	f7ff fc27 	bl	8008e88 <memcpy>
 800963a:	4631      	mov	r1, r6
 800963c:	4640      	mov	r0, r8
 800963e:	f7fd fdaf 	bl	80071a0 <_free_r>
 8009642:	e7e1      	b.n	8009608 <_realloc_r+0x1e>
 8009644:	4635      	mov	r5, r6
 8009646:	e7df      	b.n	8009608 <_realloc_r+0x1e>

08009648 <__ascii_wctomb>:
 8009648:	4603      	mov	r3, r0
 800964a:	4608      	mov	r0, r1
 800964c:	b141      	cbz	r1, 8009660 <__ascii_wctomb+0x18>
 800964e:	2aff      	cmp	r2, #255	; 0xff
 8009650:	d904      	bls.n	800965c <__ascii_wctomb+0x14>
 8009652:	228a      	movs	r2, #138	; 0x8a
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	4770      	bx	lr
 800965c:	2001      	movs	r0, #1
 800965e:	700a      	strb	r2, [r1, #0]
 8009660:	4770      	bx	lr
	...

08009664 <fiprintf>:
 8009664:	b40e      	push	{r1, r2, r3}
 8009666:	b503      	push	{r0, r1, lr}
 8009668:	4601      	mov	r1, r0
 800966a:	ab03      	add	r3, sp, #12
 800966c:	4805      	ldr	r0, [pc, #20]	; (8009684 <fiprintf+0x20>)
 800966e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009672:	6800      	ldr	r0, [r0, #0]
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	f000 f83d 	bl	80096f4 <_vfiprintf_r>
 800967a:	b002      	add	sp, #8
 800967c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009680:	b003      	add	sp, #12
 8009682:	4770      	bx	lr
 8009684:	20000064 	.word	0x20000064

08009688 <abort>:
 8009688:	2006      	movs	r0, #6
 800968a:	b508      	push	{r3, lr}
 800968c:	f000 fa0a 	bl	8009aa4 <raise>
 8009690:	2001      	movs	r0, #1
 8009692:	f7f8 fc13 	bl	8001ebc <_exit>

08009696 <_malloc_usable_size_r>:
 8009696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969a:	1f18      	subs	r0, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfbc      	itt	lt
 80096a0:	580b      	ldrlt	r3, [r1, r0]
 80096a2:	18c0      	addlt	r0, r0, r3
 80096a4:	4770      	bx	lr

080096a6 <__sfputc_r>:
 80096a6:	6893      	ldr	r3, [r2, #8]
 80096a8:	b410      	push	{r4}
 80096aa:	3b01      	subs	r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	6093      	str	r3, [r2, #8]
 80096b0:	da07      	bge.n	80096c2 <__sfputc_r+0x1c>
 80096b2:	6994      	ldr	r4, [r2, #24]
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	db01      	blt.n	80096bc <__sfputc_r+0x16>
 80096b8:	290a      	cmp	r1, #10
 80096ba:	d102      	bne.n	80096c2 <__sfputc_r+0x1c>
 80096bc:	bc10      	pop	{r4}
 80096be:	f000 b933 	b.w	8009928 <__swbuf_r>
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	1c58      	adds	r0, r3, #1
 80096c6:	6010      	str	r0, [r2, #0]
 80096c8:	7019      	strb	r1, [r3, #0]
 80096ca:	4608      	mov	r0, r1
 80096cc:	bc10      	pop	{r4}
 80096ce:	4770      	bx	lr

080096d0 <__sfputs_r>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	4614      	mov	r4, r2
 80096d8:	18d5      	adds	r5, r2, r3
 80096da:	42ac      	cmp	r4, r5
 80096dc:	d101      	bne.n	80096e2 <__sfputs_r+0x12>
 80096de:	2000      	movs	r0, #0
 80096e0:	e007      	b.n	80096f2 <__sfputs_r+0x22>
 80096e2:	463a      	mov	r2, r7
 80096e4:	4630      	mov	r0, r6
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	f7ff ffdc 	bl	80096a6 <__sfputc_r>
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d1f3      	bne.n	80096da <__sfputs_r+0xa>
 80096f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096f4 <_vfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	460d      	mov	r5, r1
 80096fa:	4614      	mov	r4, r2
 80096fc:	4698      	mov	r8, r3
 80096fe:	4606      	mov	r6, r0
 8009700:	b09d      	sub	sp, #116	; 0x74
 8009702:	b118      	cbz	r0, 800970c <_vfiprintf_r+0x18>
 8009704:	6a03      	ldr	r3, [r0, #32]
 8009706:	b90b      	cbnz	r3, 800970c <_vfiprintf_r+0x18>
 8009708:	f7fc fdb0 	bl	800626c <__sinit>
 800970c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800970e:	07d9      	lsls	r1, r3, #31
 8009710:	d405      	bmi.n	800971e <_vfiprintf_r+0x2a>
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	059a      	lsls	r2, r3, #22
 8009716:	d402      	bmi.n	800971e <_vfiprintf_r+0x2a>
 8009718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971a:	f7fc febe 	bl	800649a <__retarget_lock_acquire_recursive>
 800971e:	89ab      	ldrh	r3, [r5, #12]
 8009720:	071b      	lsls	r3, r3, #28
 8009722:	d501      	bpl.n	8009728 <_vfiprintf_r+0x34>
 8009724:	692b      	ldr	r3, [r5, #16]
 8009726:	b99b      	cbnz	r3, 8009750 <_vfiprintf_r+0x5c>
 8009728:	4629      	mov	r1, r5
 800972a:	4630      	mov	r0, r6
 800972c:	f000 f93a 	bl	80099a4 <__swsetup_r>
 8009730:	b170      	cbz	r0, 8009750 <_vfiprintf_r+0x5c>
 8009732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009734:	07dc      	lsls	r4, r3, #31
 8009736:	d504      	bpl.n	8009742 <_vfiprintf_r+0x4e>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	b01d      	add	sp, #116	; 0x74
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	0598      	lsls	r0, r3, #22
 8009746:	d4f7      	bmi.n	8009738 <_vfiprintf_r+0x44>
 8009748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800974a:	f7fc fea7 	bl	800649c <__retarget_lock_release_recursive>
 800974e:	e7f3      	b.n	8009738 <_vfiprintf_r+0x44>
 8009750:	2300      	movs	r3, #0
 8009752:	9309      	str	r3, [sp, #36]	; 0x24
 8009754:	2320      	movs	r3, #32
 8009756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800975a:	2330      	movs	r3, #48	; 0x30
 800975c:	f04f 0901 	mov.w	r9, #1
 8009760:	f8cd 800c 	str.w	r8, [sp, #12]
 8009764:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009914 <_vfiprintf_r+0x220>
 8009768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800976c:	4623      	mov	r3, r4
 800976e:	469a      	mov	sl, r3
 8009770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009774:	b10a      	cbz	r2, 800977a <_vfiprintf_r+0x86>
 8009776:	2a25      	cmp	r2, #37	; 0x25
 8009778:	d1f9      	bne.n	800976e <_vfiprintf_r+0x7a>
 800977a:	ebba 0b04 	subs.w	fp, sl, r4
 800977e:	d00b      	beq.n	8009798 <_vfiprintf_r+0xa4>
 8009780:	465b      	mov	r3, fp
 8009782:	4622      	mov	r2, r4
 8009784:	4629      	mov	r1, r5
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff ffa2 	bl	80096d0 <__sfputs_r>
 800978c:	3001      	adds	r0, #1
 800978e:	f000 80a9 	beq.w	80098e4 <_vfiprintf_r+0x1f0>
 8009792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009794:	445a      	add	r2, fp
 8009796:	9209      	str	r2, [sp, #36]	; 0x24
 8009798:	f89a 3000 	ldrb.w	r3, [sl]
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80a1 	beq.w	80098e4 <_vfiprintf_r+0x1f0>
 80097a2:	2300      	movs	r3, #0
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ac:	f10a 0a01 	add.w	sl, sl, #1
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097b8:	931a      	str	r3, [sp, #104]	; 0x68
 80097ba:	4654      	mov	r4, sl
 80097bc:	2205      	movs	r2, #5
 80097be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c2:	4854      	ldr	r0, [pc, #336]	; (8009914 <_vfiprintf_r+0x220>)
 80097c4:	f7fc fe6b 	bl	800649e <memchr>
 80097c8:	9a04      	ldr	r2, [sp, #16]
 80097ca:	b9d8      	cbnz	r0, 8009804 <_vfiprintf_r+0x110>
 80097cc:	06d1      	lsls	r1, r2, #27
 80097ce:	bf44      	itt	mi
 80097d0:	2320      	movmi	r3, #32
 80097d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d6:	0713      	lsls	r3, r2, #28
 80097d8:	bf44      	itt	mi
 80097da:	232b      	movmi	r3, #43	; 0x2b
 80097dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e0:	f89a 3000 	ldrb.w	r3, [sl]
 80097e4:	2b2a      	cmp	r3, #42	; 0x2a
 80097e6:	d015      	beq.n	8009814 <_vfiprintf_r+0x120>
 80097e8:	4654      	mov	r4, sl
 80097ea:	2000      	movs	r0, #0
 80097ec:	f04f 0c0a 	mov.w	ip, #10
 80097f0:	9a07      	ldr	r2, [sp, #28]
 80097f2:	4621      	mov	r1, r4
 80097f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f8:	3b30      	subs	r3, #48	; 0x30
 80097fa:	2b09      	cmp	r3, #9
 80097fc:	d94d      	bls.n	800989a <_vfiprintf_r+0x1a6>
 80097fe:	b1b0      	cbz	r0, 800982e <_vfiprintf_r+0x13a>
 8009800:	9207      	str	r2, [sp, #28]
 8009802:	e014      	b.n	800982e <_vfiprintf_r+0x13a>
 8009804:	eba0 0308 	sub.w	r3, r0, r8
 8009808:	fa09 f303 	lsl.w	r3, r9, r3
 800980c:	4313      	orrs	r3, r2
 800980e:	46a2      	mov	sl, r4
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	e7d2      	b.n	80097ba <_vfiprintf_r+0xc6>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	1d19      	adds	r1, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	9103      	str	r1, [sp, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfbb      	ittet	lt
 8009820:	425b      	neglt	r3, r3
 8009822:	f042 0202 	orrlt.w	r2, r2, #2
 8009826:	9307      	strge	r3, [sp, #28]
 8009828:	9307      	strlt	r3, [sp, #28]
 800982a:	bfb8      	it	lt
 800982c:	9204      	strlt	r2, [sp, #16]
 800982e:	7823      	ldrb	r3, [r4, #0]
 8009830:	2b2e      	cmp	r3, #46	; 0x2e
 8009832:	d10c      	bne.n	800984e <_vfiprintf_r+0x15a>
 8009834:	7863      	ldrb	r3, [r4, #1]
 8009836:	2b2a      	cmp	r3, #42	; 0x2a
 8009838:	d134      	bne.n	80098a4 <_vfiprintf_r+0x1b0>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	3402      	adds	r4, #2
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9203      	str	r2, [sp, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfb8      	it	lt
 8009848:	f04f 33ff 	movlt.w	r3, #4294967295
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009918 <_vfiprintf_r+0x224>
 8009852:	2203      	movs	r2, #3
 8009854:	4650      	mov	r0, sl
 8009856:	7821      	ldrb	r1, [r4, #0]
 8009858:	f7fc fe21 	bl	800649e <memchr>
 800985c:	b138      	cbz	r0, 800986e <_vfiprintf_r+0x17a>
 800985e:	2240      	movs	r2, #64	; 0x40
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	eba0 000a 	sub.w	r0, r0, sl
 8009866:	4082      	lsls	r2, r0
 8009868:	4313      	orrs	r3, r2
 800986a:	3401      	adds	r4, #1
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009872:	2206      	movs	r2, #6
 8009874:	4829      	ldr	r0, [pc, #164]	; (800991c <_vfiprintf_r+0x228>)
 8009876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800987a:	f7fc fe10 	bl	800649e <memchr>
 800987e:	2800      	cmp	r0, #0
 8009880:	d03f      	beq.n	8009902 <_vfiprintf_r+0x20e>
 8009882:	4b27      	ldr	r3, [pc, #156]	; (8009920 <_vfiprintf_r+0x22c>)
 8009884:	bb1b      	cbnz	r3, 80098ce <_vfiprintf_r+0x1da>
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	3307      	adds	r3, #7
 800988a:	f023 0307 	bic.w	r3, r3, #7
 800988e:	3308      	adds	r3, #8
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009894:	443b      	add	r3, r7
 8009896:	9309      	str	r3, [sp, #36]	; 0x24
 8009898:	e768      	b.n	800976c <_vfiprintf_r+0x78>
 800989a:	460c      	mov	r4, r1
 800989c:	2001      	movs	r0, #1
 800989e:	fb0c 3202 	mla	r2, ip, r2, r3
 80098a2:	e7a6      	b.n	80097f2 <_vfiprintf_r+0xfe>
 80098a4:	2300      	movs	r3, #0
 80098a6:	f04f 0c0a 	mov.w	ip, #10
 80098aa:	4619      	mov	r1, r3
 80098ac:	3401      	adds	r4, #1
 80098ae:	9305      	str	r3, [sp, #20]
 80098b0:	4620      	mov	r0, r4
 80098b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b6:	3a30      	subs	r2, #48	; 0x30
 80098b8:	2a09      	cmp	r2, #9
 80098ba:	d903      	bls.n	80098c4 <_vfiprintf_r+0x1d0>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d0c6      	beq.n	800984e <_vfiprintf_r+0x15a>
 80098c0:	9105      	str	r1, [sp, #20]
 80098c2:	e7c4      	b.n	800984e <_vfiprintf_r+0x15a>
 80098c4:	4604      	mov	r4, r0
 80098c6:	2301      	movs	r3, #1
 80098c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098cc:	e7f0      	b.n	80098b0 <_vfiprintf_r+0x1bc>
 80098ce:	ab03      	add	r3, sp, #12
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	462a      	mov	r2, r5
 80098d4:	4630      	mov	r0, r6
 80098d6:	4b13      	ldr	r3, [pc, #76]	; (8009924 <_vfiprintf_r+0x230>)
 80098d8:	a904      	add	r1, sp, #16
 80098da:	f7fb fe6b 	bl	80055b4 <_printf_float>
 80098de:	4607      	mov	r7, r0
 80098e0:	1c78      	adds	r0, r7, #1
 80098e2:	d1d6      	bne.n	8009892 <_vfiprintf_r+0x19e>
 80098e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e6:	07d9      	lsls	r1, r3, #31
 80098e8:	d405      	bmi.n	80098f6 <_vfiprintf_r+0x202>
 80098ea:	89ab      	ldrh	r3, [r5, #12]
 80098ec:	059a      	lsls	r2, r3, #22
 80098ee:	d402      	bmi.n	80098f6 <_vfiprintf_r+0x202>
 80098f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098f2:	f7fc fdd3 	bl	800649c <__retarget_lock_release_recursive>
 80098f6:	89ab      	ldrh	r3, [r5, #12]
 80098f8:	065b      	lsls	r3, r3, #25
 80098fa:	f53f af1d 	bmi.w	8009738 <_vfiprintf_r+0x44>
 80098fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009900:	e71c      	b.n	800973c <_vfiprintf_r+0x48>
 8009902:	ab03      	add	r3, sp, #12
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	462a      	mov	r2, r5
 8009908:	4630      	mov	r0, r6
 800990a:	4b06      	ldr	r3, [pc, #24]	; (8009924 <_vfiprintf_r+0x230>)
 800990c:	a904      	add	r1, sp, #16
 800990e:	f7fc f8f1 	bl	8005af4 <_printf_i>
 8009912:	e7e4      	b.n	80098de <_vfiprintf_r+0x1ea>
 8009914:	0800a071 	.word	0x0800a071
 8009918:	0800a077 	.word	0x0800a077
 800991c:	0800a07b 	.word	0x0800a07b
 8009920:	080055b5 	.word	0x080055b5
 8009924:	080096d1 	.word	0x080096d1

08009928 <__swbuf_r>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	460e      	mov	r6, r1
 800992c:	4614      	mov	r4, r2
 800992e:	4605      	mov	r5, r0
 8009930:	b118      	cbz	r0, 800993a <__swbuf_r+0x12>
 8009932:	6a03      	ldr	r3, [r0, #32]
 8009934:	b90b      	cbnz	r3, 800993a <__swbuf_r+0x12>
 8009936:	f7fc fc99 	bl	800626c <__sinit>
 800993a:	69a3      	ldr	r3, [r4, #24]
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	071a      	lsls	r2, r3, #28
 8009942:	d525      	bpl.n	8009990 <__swbuf_r+0x68>
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	b31b      	cbz	r3, 8009990 <__swbuf_r+0x68>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	b2f6      	uxtb	r6, r6
 800994e:	1a98      	subs	r0, r3, r2
 8009950:	6963      	ldr	r3, [r4, #20]
 8009952:	4637      	mov	r7, r6
 8009954:	4283      	cmp	r3, r0
 8009956:	dc04      	bgt.n	8009962 <__swbuf_r+0x3a>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f7ff fa30 	bl	8008dc0 <_fflush_r>
 8009960:	b9e0      	cbnz	r0, 800999c <__swbuf_r+0x74>
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	3b01      	subs	r3, #1
 8009966:	60a3      	str	r3, [r4, #8]
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	6022      	str	r2, [r4, #0]
 800996e:	701e      	strb	r6, [r3, #0]
 8009970:	6962      	ldr	r2, [r4, #20]
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	429a      	cmp	r2, r3
 8009976:	d004      	beq.n	8009982 <__swbuf_r+0x5a>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	07db      	lsls	r3, r3, #31
 800997c:	d506      	bpl.n	800998c <__swbuf_r+0x64>
 800997e:	2e0a      	cmp	r6, #10
 8009980:	d104      	bne.n	800998c <__swbuf_r+0x64>
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f7ff fa1b 	bl	8008dc0 <_fflush_r>
 800998a:	b938      	cbnz	r0, 800999c <__swbuf_r+0x74>
 800998c:	4638      	mov	r0, r7
 800998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009990:	4621      	mov	r1, r4
 8009992:	4628      	mov	r0, r5
 8009994:	f000 f806 	bl	80099a4 <__swsetup_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	d0d5      	beq.n	8009948 <__swbuf_r+0x20>
 800999c:	f04f 37ff 	mov.w	r7, #4294967295
 80099a0:	e7f4      	b.n	800998c <__swbuf_r+0x64>
	...

080099a4 <__swsetup_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <__swsetup_r+0xac>)
 80099a8:	4605      	mov	r5, r0
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	460c      	mov	r4, r1
 80099ae:	b118      	cbz	r0, 80099b8 <__swsetup_r+0x14>
 80099b0:	6a03      	ldr	r3, [r0, #32]
 80099b2:	b90b      	cbnz	r3, 80099b8 <__swsetup_r+0x14>
 80099b4:	f7fc fc5a 	bl	800626c <__sinit>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099be:	0718      	lsls	r0, r3, #28
 80099c0:	d422      	bmi.n	8009a08 <__swsetup_r+0x64>
 80099c2:	06d9      	lsls	r1, r3, #27
 80099c4:	d407      	bmi.n	80099d6 <__swsetup_r+0x32>
 80099c6:	2309      	movs	r3, #9
 80099c8:	602b      	str	r3, [r5, #0]
 80099ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099ce:	f04f 30ff 	mov.w	r0, #4294967295
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	e034      	b.n	8009a40 <__swsetup_r+0x9c>
 80099d6:	0758      	lsls	r0, r3, #29
 80099d8:	d512      	bpl.n	8009a00 <__swsetup_r+0x5c>
 80099da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099dc:	b141      	cbz	r1, 80099f0 <__swsetup_r+0x4c>
 80099de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099e2:	4299      	cmp	r1, r3
 80099e4:	d002      	beq.n	80099ec <__swsetup_r+0x48>
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7fd fbda 	bl	80071a0 <_free_r>
 80099ec:	2300      	movs	r3, #0
 80099ee:	6363      	str	r3, [r4, #52]	; 0x34
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	2300      	movs	r3, #0
 80099fa:	6063      	str	r3, [r4, #4]
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f043 0308 	orr.w	r3, r3, #8
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	b94b      	cbnz	r3, 8009a20 <__swsetup_r+0x7c>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a16:	d003      	beq.n	8009a20 <__swsetup_r+0x7c>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 f883 	bl	8009b26 <__smakebuf_r>
 8009a20:	89a0      	ldrh	r0, [r4, #12]
 8009a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a26:	f010 0301 	ands.w	r3, r0, #1
 8009a2a:	d00a      	beq.n	8009a42 <__swsetup_r+0x9e>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60a3      	str	r3, [r4, #8]
 8009a30:	6963      	ldr	r3, [r4, #20]
 8009a32:	425b      	negs	r3, r3
 8009a34:	61a3      	str	r3, [r4, #24]
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	b943      	cbnz	r3, 8009a4c <__swsetup_r+0xa8>
 8009a3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a3e:	d1c4      	bne.n	80099ca <__swsetup_r+0x26>
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	0781      	lsls	r1, r0, #30
 8009a44:	bf58      	it	pl
 8009a46:	6963      	ldrpl	r3, [r4, #20]
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	e7f4      	b.n	8009a36 <__swsetup_r+0x92>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e7f7      	b.n	8009a40 <__swsetup_r+0x9c>
 8009a50:	20000064 	.word	0x20000064

08009a54 <_raise_r>:
 8009a54:	291f      	cmp	r1, #31
 8009a56:	b538      	push	{r3, r4, r5, lr}
 8009a58:	4604      	mov	r4, r0
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	d904      	bls.n	8009a68 <_raise_r+0x14>
 8009a5e:	2316      	movs	r3, #22
 8009a60:	6003      	str	r3, [r0, #0]
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009a6a:	b112      	cbz	r2, 8009a72 <_raise_r+0x1e>
 8009a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a70:	b94b      	cbnz	r3, 8009a86 <_raise_r+0x32>
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f830 	bl	8009ad8 <_getpid_r>
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a82:	f000 b817 	b.w	8009ab4 <_kill_r>
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d00a      	beq.n	8009aa0 <_raise_r+0x4c>
 8009a8a:	1c59      	adds	r1, r3, #1
 8009a8c:	d103      	bne.n	8009a96 <_raise_r+0x42>
 8009a8e:	2316      	movs	r3, #22
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	2001      	movs	r0, #1
 8009a94:	e7e7      	b.n	8009a66 <_raise_r+0x12>
 8009a96:	2400      	movs	r4, #0
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a9e:	4798      	blx	r3
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e7e0      	b.n	8009a66 <_raise_r+0x12>

08009aa4 <raise>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <raise+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f7ff bfd3 	b.w	8009a54 <_raise_r>
 8009aae:	bf00      	nop
 8009ab0:	20000064 	.word	0x20000064

08009ab4 <_kill_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	4d06      	ldr	r5, [pc, #24]	; (8009ad4 <_kill_r+0x20>)
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f7f8 f9eb 	bl	8001e9c <_kill>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d102      	bne.n	8009ad0 <_kill_r+0x1c>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	b103      	cbz	r3, 8009ad0 <_kill_r+0x1c>
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000594 	.word	0x20000594

08009ad8 <_getpid_r>:
 8009ad8:	f7f8 b9d9 	b.w	8001e8e <_getpid>

08009adc <__swhatbuf_r>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	460c      	mov	r4, r1
 8009ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae4:	4615      	mov	r5, r2
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	461e      	mov	r6, r3
 8009aea:	b096      	sub	sp, #88	; 0x58
 8009aec:	da0c      	bge.n	8009b08 <__swhatbuf_r+0x2c>
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	2100      	movs	r1, #0
 8009af2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009af6:	bf0c      	ite	eq
 8009af8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009afc:	2340      	movne	r3, #64	; 0x40
 8009afe:	2000      	movs	r0, #0
 8009b00:	6031      	str	r1, [r6, #0]
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	b016      	add	sp, #88	; 0x58
 8009b06:	bd70      	pop	{r4, r5, r6, pc}
 8009b08:	466a      	mov	r2, sp
 8009b0a:	f000 f849 	bl	8009ba0 <_fstat_r>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	dbed      	blt.n	8009aee <__swhatbuf_r+0x12>
 8009b12:	9901      	ldr	r1, [sp, #4]
 8009b14:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b18:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b1c:	4259      	negs	r1, r3
 8009b1e:	4159      	adcs	r1, r3
 8009b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b24:	e7eb      	b.n	8009afe <__swhatbuf_r+0x22>

08009b26 <__smakebuf_r>:
 8009b26:	898b      	ldrh	r3, [r1, #12]
 8009b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b2a:	079d      	lsls	r5, r3, #30
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	d507      	bpl.n	8009b42 <__smakebuf_r+0x1c>
 8009b32:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	6163      	str	r3, [r4, #20]
 8009b3e:	b002      	add	sp, #8
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
 8009b42:	466a      	mov	r2, sp
 8009b44:	ab01      	add	r3, sp, #4
 8009b46:	f7ff ffc9 	bl	8009adc <__swhatbuf_r>
 8009b4a:	9900      	ldr	r1, [sp, #0]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f7fd fb96 	bl	8007280 <_malloc_r>
 8009b54:	b948      	cbnz	r0, 8009b6a <__smakebuf_r+0x44>
 8009b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b5a:	059a      	lsls	r2, r3, #22
 8009b5c:	d4ef      	bmi.n	8009b3e <__smakebuf_r+0x18>
 8009b5e:	f023 0303 	bic.w	r3, r3, #3
 8009b62:	f043 0302 	orr.w	r3, r3, #2
 8009b66:	81a3      	strh	r3, [r4, #12]
 8009b68:	e7e3      	b.n	8009b32 <__smakebuf_r+0xc>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	6020      	str	r0, [r4, #0]
 8009b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	6120      	str	r0, [r4, #16]
 8009b78:	6163      	str	r3, [r4, #20]
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	b15b      	cbz	r3, 8009b96 <__smakebuf_r+0x70>
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b84:	f000 f81e 	bl	8009bc4 <_isatty_r>
 8009b88:	b128      	cbz	r0, 8009b96 <__smakebuf_r+0x70>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	431d      	orrs	r5, r3
 8009b9a:	81a5      	strh	r5, [r4, #12]
 8009b9c:	e7cf      	b.n	8009b3e <__smakebuf_r+0x18>
	...

08009ba0 <_fstat_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	4d06      	ldr	r5, [pc, #24]	; (8009bc0 <_fstat_r+0x20>)
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	f7f8 f9d3 	bl	8001f58 <_fstat>
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d102      	bne.n	8009bbc <_fstat_r+0x1c>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	b103      	cbz	r3, 8009bbc <_fstat_r+0x1c>
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000594 	.word	0x20000594

08009bc4 <_isatty_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4d05      	ldr	r5, [pc, #20]	; (8009be0 <_isatty_r+0x1c>)
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	f7f8 f9d1 	bl	8001f76 <_isatty>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_isatty_r+0x1a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_isatty_r+0x1a>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	20000594 	.word	0x20000594

08009be4 <_init>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	bf00      	nop
 8009be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bea:	bc08      	pop	{r3}
 8009bec:	469e      	mov	lr, r3
 8009bee:	4770      	bx	lr

08009bf0 <_fini>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	bf00      	nop
 8009bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf6:	bc08      	pop	{r3}
 8009bf8:	469e      	mov	lr, r3
 8009bfa:	4770      	bx	lr
